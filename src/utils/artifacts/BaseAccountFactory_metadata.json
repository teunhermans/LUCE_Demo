{
	"compiler": {
		"version": "0.8.24+commit.e11b9ed9"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "accountAdmin",
						"type": "address"
					}
				],
				"name": "AccountCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "signer",
						"type": "address"
					}
				],
				"name": "SignerAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "signer",
						"type": "address"
					}
				],
				"name": "SignerRemoved",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "accountImplementation",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_admin",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "createAccount",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "entrypoint",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_start",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_end",
						"type": "uint256"
					}
				],
				"name": "getAccounts",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "accounts",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "signer",
						"type": "address"
					}
				],
				"name": "getAccountsOfSigner",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "accounts",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_adminSigner",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "getAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllAccounts",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_account",
						"type": "address"
					}
				],
				"name": "isRegistered",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes[]",
						"name": "data",
						"type": "bytes[]"
					}
				],
				"name": "multicall",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "results",
						"type": "bytes[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_salt",
						"type": "bytes32"
					}
				],
				"name": "onRegister",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_signer",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "_salt",
						"type": "bytes32"
					}
				],
				"name": "onSignerAdded",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_signer",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "_salt",
						"type": "bytes32"
					}
				],
				"name": "onSignerRemoved",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalAccounts",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"multicall(bytes[])": {
					"details": "Receives and executes a batch of function calls on this contract.",
					"params": {
						"data": "The bytes data that makes up the batch of function calls to execute."
					},
					"returns": {
						"results": "The bytes data that makes up the result of the batch of function calls executed."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"events": {
				"AccountCreated(address,address)": {
					"notice": "Emitted when a new Account is created."
				},
				"SignerAdded(address,address)": {
					"notice": "Emitted when a new signer is added to an Account."
				},
				"SignerRemoved(address,address)": {
					"notice": "Emitted when a new signer is added to an Account."
				}
			},
			"kind": "user",
			"methods": {
				"accountImplementation()": {
					"notice": "Returns the address of the Account implementation."
				},
				"createAccount(address,bytes)": {
					"notice": "Deploys a new Account for admin."
				},
				"getAccounts(uint256,uint256)": {
					"notice": "Returns all accounts between the given indices."
				},
				"getAccountsOfSigner(address)": {
					"notice": "Returns all accounts that the given address is a signer of."
				},
				"getAddress(address,bytes)": {
					"notice": "Returns the address of an Account that would be deployed with the given admin signer."
				},
				"getAllAccounts()": {
					"notice": "Returns all accounts created on the factory."
				},
				"isRegistered(address)": {
					"notice": "Returns whether an account is registered on this factory."
				},
				"multicall(bytes[])": {
					"notice": "Receives and executes a batch of function calls on this contract."
				},
				"onRegister(bytes32)": {
					"notice": "Callback function for an Account to register itself on the factory."
				},
				"onSignerRemoved(address,bytes32)": {
					"notice": "Callback function for an Account to un-register its signers."
				},
				"totalAccounts()": {
					"notice": "Returns the total number of accounts."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			".deps/npm/@thirdweb-dev/dynamic-contracts/src/utils/BaseAccountFactory.sol": "BaseAccountFactory"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/Multicall.sol": {
			"keccak256": "0x82921a9d2813a43b54ef82352e252f112ce7542accb95f5cfd2db18ef392646b",
			"license": "Apache 2.0",
			"urls": [
				"bzz-raw://9ad280ac58a70a423deb3a938da2dbbeabc6e3f861abf61073f7c0a218903a57",
				"dweb:/ipfs/QmXy7k5P7z4s6YpJfeAKWWpE1fJdny8hJStHTYVv23RWzg"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/UserOperation.sol": {
			"keccak256": "0x0844576ffce3c3fd6ec5454d3a142efe5ed119112d7e1c6698c99b5b93a6476f",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://5e788a3d11d336be698790552bd9f31f1bdc72f43a22a5b2574fb248c819076f",
				"dweb:/ipfs/QmcfToLtD2tA36AL6FKB8Du7EWr43zC5yo2HZFGKeY41Z4"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IAccount.sol": {
			"keccak256": "0xdbf3f91dd92200e52294b0606a1344bc7f959426577e27f4fd1e757d04e7b045",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://f8ea4061342a16e18c5ad652e19fa7d0343493e6302470e498c79f12cd5b4bf6",
				"dweb:/ipfs/QmTvSGFxEZkSg656mx1ombm6a1CU33L8JxqTVtUKN5daML"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IAccountFactory.sol": {
			"keccak256": "0x820f45842ad539f214db3fbca19fea58702b5ecdd496aa770951904a4938d7e4",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://091e913a25e6a3cde14596525e8d5a8656275fd5fcd8fcb56ec3fd7a66d050f9",
				"dweb:/ipfs/Qmbp73fgRHMWyQ2ETsCpVanUXj6NxnzBiJxcEupZwCAKWx"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IAccountFactoryCore.sol": {
			"keccak256": "0x65c5ed98c2b7dd9ba4f2c83eaa652b1069470999a04625e33ea197e39aff63b6",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://9a3d0c5d28efdae547f3714e341b6caf71f27358d9409a6dcc72ca569aeb9ff6",
				"dweb:/ipfs/QmUBZHg1bCsNGWrSC9d34oPDqriLregwxiRCUjmYYZeR5E"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IAccountPermissions.sol": {
			"keccak256": "0x34e998c2cfac71ae5837280e487215fc64f17c4212270192442e541527a38871",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://51d201d243ade4b6aa37f88e6dbd8f4886ef2b15a290630367b8b95f8ef1a69c",
				"dweb:/ipfs/QmfHdzvzEugZMatjex3sbp2ehjcRE3mDi7QxEHCi6A25Ww"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IAggregator.sol": {
			"keccak256": "0x516d1dcafa4a239386340533d87ed0c1eff291c631cf596afaf82262ddfa603d",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://ed5974a9e0fe8de3de6779ca0ef4c1655a26ca9a73a94b4d8a26789ac1bd09ef",
				"dweb:/ipfs/QmXxjfVDdZS6bqyHo5AfbZthZUtytcCt8Gn87jg8bdM4wv"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IEntrypoint.sol": {
			"keccak256": "0xef4668624f5de2d35eba19dd3edfddc3acd5a2b845cae211f299c1311e216f2c",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://8769f0c62103b659084e7cefdb26eeb9b46b31de03fd4002e264e9afa64868a8",
				"dweb:/ipfs/QmZovAx1SQH6rmhciv1tGSJTAxRq1YBUjUo63mqsrw3did"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IMulticall.sol": {
			"keccak256": "0xa569531ddd48bf1bd6fcb12927a732ea49a5277429fbba7e44108f4f8d336234",
			"license": "MIT",
			"urls": [
				"bzz-raw://5bd423a5b7315e40dd6cf31ce3c34d236d349c8959d0fed44a1dc84eb431429c",
				"dweb:/ipfs/QmYR9XkzCvPzT48HieLHkujzF1cAAZT3E8pazRCgCU8NaJ"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/INonceManager.sol": {
			"keccak256": "0x77085fe40d8352eb6d16f02cca3b8b57db016e97173b5341104d4c4fc677531f",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://8c7eec5d8ebaef50e8e856364a6570cac01f609a3dfcd611af6d7fa550f05d54",
				"dweb:/ipfs/QmToDwfQAymfgUWUTg4VMnfZW72fGcmxWbGk1pipw5Bkm1"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IStakeManager.sol": {
			"keccak256": "0x56ed36384e0c62253769a2219b2e9161d88e5f58ae1f781fd3a540c8a399b9a7",
			"license": "GPL-3.0-only",
			"urls": [
				"bzz-raw://9f26a6b28abc3eee5cf63938205ee6274d508b6f3acd5d1af0f041a2f239be45",
				"dweb:/ipfs/QmY4DYvnqU93ta3VNSa6nxNjoWoum6B8t8k9D7wLUvk6m1"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/lib/Address.sol": {
			"keccak256": "0x3793ed8492fa575cf73beed883a26cda685bb53f63950599c1280eae9a73fada",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://f9e2916d53829baff87699664e65b95ff536c25d02d4b9ff2433eab54812f9b0",
				"dweb:/ipfs/QmXSqLvmNZ3qLLC42TCDzNEia2mUmALdTTfLxKmfdqNEot"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/lib/BytesLib.sol": {
			"keccak256": "0x2516d3f849615cb70f26692e1f1c4c25d056eb74fa68b18aa46c46edb7fa5ec7",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://5a38ea655a3553fa7a32610ee11de2e3d5ae36367a667a0d1c229ffa6c073c5e",
				"dweb:/ipfs/QmU9GUNZkvWnSbRoGWfbqDnZb6GAMnXHBerkrqN93bqeig"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/lib/Clones.sol": {
			"keccak256": "0x2362d7dd406da7ffbd665a99fd4a9c033d5d0e0113429f28848a54ff603d1878",
			"license": "MIT",
			"urls": [
				"bzz-raw://963cfd950920cc1703d1190b0f0bcd6d5bbce666773e13f1d5955cc356bd9ba8",
				"dweb:/ipfs/QmT6pkaQqEYcvDwHvJakuwNTtBRnaJJFhGW85Mn6238EUh"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/lib/EnumerableSet.sol": {
			"keccak256": "0x3fcc70973c4fd46e32562aa3cb2b5bb465200dc76dd6ac32a6ac83ca36605294",
			"license": "MIT",
			"urls": [
				"bzz-raw://e25c92065f2afba193544cfef02fd8803f192447ed45ddc6e7bed5f892bd21b3",
				"dweb:/ipfs/QmP5Xbh7YBDieZ4rKoX3RCGbG8cmA2NbxYqSio4PfvuW4T"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/utils/BaseAccount.sol": {
			"keccak256": "0xd9d9a4c7f3189c8b8fa153188096c142f5e3761aacbf983ce3d65640fb3572ed",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://b59ca955c5764341e61c27fb41aa048fe135477e9a16cf22e6c0ed199dc0a3cf",
				"dweb:/ipfs/Qmd7f4ei7wo5CkjnVXff2H7mVUnmHTv2zuCrJUDNBfkDTk"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/utils/BaseAccountFactory.sol": {
			"keccak256": "0x5b64d43318db2c3f3497777044d12acf761bc60256b10ca1b742a6735a3bbe40",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://e8b780ec4a55c0031fe6cc9597db2e42362fadd3ff39b75761fac38d586446a5",
				"dweb:/ipfs/QmeGyjZTVnTXtQmdABnUiAZmGCKuie8T8uhyG12fjEsSTX"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/utils/Helpers.sol": {
			"keccak256": "0x78aa2145fcfb195f533e68486fd1617a3b6b5bdf53af1b8fd2ab7211459bc8ba",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://a1ea19d4707c245e5bdad9df43cd89bbc451b08e074b0cb2156a04c0e1e2c6da",
				"dweb:/ipfs/QmVas9dTRJt9HJQomia5ZTBgQanxyz1akyDAkCHRL3ecx7"
			]
		}
	},
	"version": 1
}