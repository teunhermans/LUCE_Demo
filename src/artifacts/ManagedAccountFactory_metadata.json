{
	"compiler": {
		"version": "0.8.24+commit.e11b9ed9"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_defaultAdmin",
						"type": "address"
					},
					{
						"internalType": "contract IEntryPoint",
						"name": "_entrypoint",
						"type": "address"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "string",
										"name": "name",
										"type": "string"
									},
									{
										"internalType": "string",
										"name": "metadataURI",
										"type": "string"
									},
									{
										"internalType": "address",
										"name": "implementation",
										"type": "address"
									}
								],
								"internalType": "struct IExtension.ExtensionMetadata",
								"name": "metadata",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "bytes4",
										"name": "functionSelector",
										"type": "bytes4"
									},
									{
										"internalType": "string",
										"name": "functionSignature",
										"type": "string"
									}
								],
								"internalType": "struct IExtension.ExtensionFunction[]",
								"name": "functions",
								"type": "tuple[]"
							}
						],
						"internalType": "struct IExtension.Extension[]",
						"name": "_defaultExtensions",
						"type": "tuple[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_size",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_start",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_end",
						"type": "uint256"
					}
				],
				"name": "InvalidCodeAtRange",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "WriteError",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "accountAdmin",
						"type": "address"
					}
				],
				"name": "AccountCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "prevURI",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "newURI",
						"type": "string"
					}
				],
				"name": "ContractURIUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "implementation",
						"type": "address"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "string",
										"name": "name",
										"type": "string"
									},
									{
										"internalType": "string",
										"name": "metadataURI",
										"type": "string"
									},
									{
										"internalType": "address",
										"name": "implementation",
										"type": "address"
									}
								],
								"internalType": "struct IExtension.ExtensionMetadata",
								"name": "metadata",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "bytes4",
										"name": "functionSelector",
										"type": "bytes4"
									},
									{
										"internalType": "string",
										"name": "functionSignature",
										"type": "string"
									}
								],
								"internalType": "struct IExtension.ExtensionFunction[]",
								"name": "functions",
								"type": "tuple[]"
							}
						],
						"indexed": false,
						"internalType": "struct IExtension.Extension",
						"name": "extension",
						"type": "tuple"
					}
				],
				"name": "ExtensionAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "string",
										"name": "name",
										"type": "string"
									},
									{
										"internalType": "string",
										"name": "metadataURI",
										"type": "string"
									},
									{
										"internalType": "address",
										"name": "implementation",
										"type": "address"
									}
								],
								"internalType": "struct IExtension.ExtensionMetadata",
								"name": "metadata",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "bytes4",
										"name": "functionSelector",
										"type": "bytes4"
									},
									{
										"internalType": "string",
										"name": "functionSignature",
										"type": "string"
									}
								],
								"internalType": "struct IExtension.ExtensionFunction[]",
								"name": "functions",
								"type": "tuple[]"
							}
						],
						"indexed": false,
						"internalType": "struct IExtension.Extension",
						"name": "extension",
						"type": "tuple"
					}
				],
				"name": "ExtensionRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "implementation",
						"type": "address"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "string",
										"name": "name",
										"type": "string"
									},
									{
										"internalType": "string",
										"name": "metadataURI",
										"type": "string"
									},
									{
										"internalType": "address",
										"name": "implementation",
										"type": "address"
									}
								],
								"internalType": "struct IExtension.ExtensionMetadata",
								"name": "metadata",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "bytes4",
										"name": "functionSelector",
										"type": "bytes4"
									},
									{
										"internalType": "string",
										"name": "functionSignature",
										"type": "string"
									}
								],
								"internalType": "struct IExtension.ExtensionFunction[]",
								"name": "functions",
								"type": "tuple[]"
							}
						],
						"indexed": false,
						"internalType": "struct IExtension.Extension",
						"name": "extension",
						"type": "tuple"
					}
				],
				"name": "ExtensionReplaced",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"indexed": true,
						"internalType": "bytes4",
						"name": "functionSelector",
						"type": "bytes4"
					},
					{
						"components": [
							{
								"internalType": "string",
								"name": "name",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "metadataURI",
								"type": "string"
							},
							{
								"internalType": "address",
								"name": "implementation",
								"type": "address"
							}
						],
						"indexed": false,
						"internalType": "struct IExtension.ExtensionMetadata",
						"name": "extMetadata",
						"type": "tuple"
					}
				],
				"name": "FunctionDisabled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"indexed": true,
						"internalType": "bytes4",
						"name": "functionSelector",
						"type": "bytes4"
					},
					{
						"components": [
							{
								"internalType": "bytes4",
								"name": "functionSelector",
								"type": "bytes4"
							},
							{
								"internalType": "string",
								"name": "functionSignature",
								"type": "string"
							}
						],
						"indexed": false,
						"internalType": "struct IExtension.ExtensionFunction",
						"name": "extFunction",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "string",
								"name": "name",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "metadataURI",
								"type": "string"
							},
							{
								"internalType": "address",
								"name": "implementation",
								"type": "address"
							}
						],
						"indexed": false,
						"internalType": "struct IExtension.ExtensionMetadata",
						"name": "extMetadata",
						"type": "tuple"
					}
				],
				"name": "FunctionEnabled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "previousAdminRole",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "newAdminRole",
						"type": "bytes32"
					}
				],
				"name": "RoleAdminChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleGranted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleRevoked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "signer",
						"type": "address"
					}
				],
				"name": "SignerAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "signer",
						"type": "address"
					}
				],
				"name": "SignerRemoved",
				"type": "event"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [],
				"name": "DEFAULT_ADMIN_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_extensionName",
						"type": "string"
					},
					{
						"internalType": "bytes4",
						"name": "_functionSelector",
						"type": "bytes4"
					}
				],
				"name": "_disableFunctionInExtension",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "accountImplementation",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "string",
										"name": "name",
										"type": "string"
									},
									{
										"internalType": "string",
										"name": "metadataURI",
										"type": "string"
									},
									{
										"internalType": "address",
										"name": "implementation",
										"type": "address"
									}
								],
								"internalType": "struct IExtension.ExtensionMetadata",
								"name": "metadata",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "bytes4",
										"name": "functionSelector",
										"type": "bytes4"
									},
									{
										"internalType": "string",
										"name": "functionSignature",
										"type": "string"
									}
								],
								"internalType": "struct IExtension.ExtensionFunction[]",
								"name": "functions",
								"type": "tuple[]"
							}
						],
						"internalType": "struct IExtension.Extension",
						"name": "_extension",
						"type": "tuple"
					}
				],
				"name": "addExtension",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "contractURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_admin",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "createAccount",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "defaultExtensions",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_extensionName",
						"type": "string"
					},
					{
						"internalType": "bytes4",
						"name": "_functionSelector",
						"type": "bytes4"
					}
				],
				"name": "disableFunctionInExtension",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_extensionName",
						"type": "string"
					},
					{
						"components": [
							{
								"internalType": "bytes4",
								"name": "functionSelector",
								"type": "bytes4"
							},
							{
								"internalType": "string",
								"name": "functionSignature",
								"type": "string"
							}
						],
						"internalType": "struct IExtension.ExtensionFunction",
						"name": "_function",
						"type": "tuple"
					}
				],
				"name": "enableFunctionInExtension",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "entrypoint",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_start",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_end",
						"type": "uint256"
					}
				],
				"name": "getAccounts",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "accounts",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "signer",
						"type": "address"
					}
				],
				"name": "getAccountsOfSigner",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "accounts",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_adminSigner",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "getAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllAccounts",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllExtensions",
				"outputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "string",
										"name": "name",
										"type": "string"
									},
									{
										"internalType": "string",
										"name": "metadataURI",
										"type": "string"
									},
									{
										"internalType": "address",
										"name": "implementation",
										"type": "address"
									}
								],
								"internalType": "struct IExtension.ExtensionMetadata",
								"name": "metadata",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "bytes4",
										"name": "functionSelector",
										"type": "bytes4"
									},
									{
										"internalType": "string",
										"name": "functionSignature",
										"type": "string"
									}
								],
								"internalType": "struct IExtension.ExtensionFunction[]",
								"name": "functions",
								"type": "tuple[]"
							}
						],
						"internalType": "struct IExtension.Extension[]",
						"name": "allExtensions",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "extensionName",
						"type": "string"
					}
				],
				"name": "getExtension",
				"outputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "string",
										"name": "name",
										"type": "string"
									},
									{
										"internalType": "string",
										"name": "metadataURI",
										"type": "string"
									},
									{
										"internalType": "address",
										"name": "implementation",
										"type": "address"
									}
								],
								"internalType": "struct IExtension.ExtensionMetadata",
								"name": "metadata",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "bytes4",
										"name": "functionSelector",
										"type": "bytes4"
									},
									{
										"internalType": "string",
										"name": "functionSignature",
										"type": "string"
									}
								],
								"internalType": "struct IExtension.ExtensionFunction[]",
								"name": "functions",
								"type": "tuple[]"
							}
						],
						"internalType": "struct IExtension.Extension",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "_functionSelector",
						"type": "bytes4"
					}
				],
				"name": "getImplementationForFunction",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "functionSelector",
						"type": "bytes4"
					}
				],
				"name": "getMetadataForFunction",
				"outputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "name",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "metadataURI",
								"type": "string"
							},
							{
								"internalType": "address",
								"name": "implementation",
								"type": "address"
							}
						],
						"internalType": "struct IExtension.ExtensionMetadata",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "getRoleAdmin",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "getRoleMember",
				"outputs": [
					{
						"internalType": "address",
						"name": "member",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "getRoleMemberCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "count",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "grantRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "hasRole",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "hasRoleWithSwitch",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_account",
						"type": "address"
					}
				],
				"name": "isRegistered",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes[]",
						"name": "data",
						"type": "bytes[]"
					}
				],
				"name": "multicall",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "results",
						"type": "bytes[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_salt",
						"type": "bytes32"
					}
				],
				"name": "onRegister",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_signer",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "_salt",
						"type": "bytes32"
					}
				],
				"name": "onSignerAdded",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_signer",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "_salt",
						"type": "bytes32"
					}
				],
				"name": "onSignerRemoved",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_extensionName",
						"type": "string"
					}
				],
				"name": "removeExtension",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "renounceRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "string",
										"name": "name",
										"type": "string"
									},
									{
										"internalType": "string",
										"name": "metadataURI",
										"type": "string"
									},
									{
										"internalType": "address",
										"name": "implementation",
										"type": "address"
									}
								],
								"internalType": "struct IExtension.ExtensionMetadata",
								"name": "metadata",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "bytes4",
										"name": "functionSelector",
										"type": "bytes4"
									},
									{
										"internalType": "string",
										"name": "functionSignature",
										"type": "string"
									}
								],
								"internalType": "struct IExtension.ExtensionFunction[]",
								"name": "functions",
								"type": "tuple[]"
							}
						],
						"internalType": "struct IExtension.Extension",
						"name": "_extension",
						"type": "tuple"
					}
				],
				"name": "replaceExtension",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "revokeRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_uri",
						"type": "string"
					}
				],
				"name": "setContractURI",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalAccounts",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"events": {
				"ContractURIUpdated(string,string)": {
					"details": "Emitted when the contract URI is updated."
				},
				"ExtensionAdded(string,address,((string,string,address),(bytes4,string)[]))": {
					"details": "Emitted when a extension is added."
				},
				"ExtensionRemoved(string,((string,string,address),(bytes4,string)[]))": {
					"details": "Emitted when a extension is removed."
				},
				"ExtensionReplaced(string,address,((string,string,address),(bytes4,string)[]))": {
					"details": "Emitted when a extension is replaced."
				},
				"FunctionDisabled(string,bytes4,(string,string,address))": {
					"details": "Emitted when a function is disabled i.e. made un-callable."
				},
				"FunctionEnabled(string,bytes4,(bytes4,string),(string,string,address))": {
					"details": "Emitted when a function is enabled i.e. made callable."
				},
				"RoleAdminChanged(bytes32,bytes32,bytes32)": {
					"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
				},
				"RoleGranted(bytes32,address,address)": {
					"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
				},
				"RoleRevoked(bytes32,address,address)": {
					"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
				}
			},
			"kind": "dev",
			"methods": {
				"_disableFunctionInExtension(string,bytes4)": {
					"details": "Disables a single function in an Extension."
				},
				"addExtension(((string,string,address),(bytes4,string)[]))": {
					"params": {
						"_extension": "The extension to add."
					}
				},
				"disableFunctionInExtension(string,bytes4)": {
					"params": {
						"_extensionName": "The name of the extension to which the function of `functionSelector` belongs.",
						"_functionSelector": "The function to disable."
					}
				},
				"enableFunctionInExtension(string,(bytes4,string))": {
					"details": "Makes the given function callable on the router.",
					"params": {
						"_extensionName": "The name of the extension to which `extFunction` belongs.",
						"_function": "The function to enable."
					}
				},
				"getAllExtensions()": {
					"returns": {
						"allExtensions": "An array of all extensions."
					}
				},
				"getExtension(string)": {
					"params": {
						"extensionName": "The name of the extension to get the metadata and functions for."
					},
					"returns": {
						"_0": "extension The extension metadata and functions for a given extension."
					}
				},
				"getMetadataForFunction(bytes4)": {
					"params": {
						"functionSelector": "The function selector to get the extension metadata for."
					},
					"returns": {
						"_0": "metadata The extension metadata for a given function."
					}
				},
				"getRoleAdmin(bytes32)": {
					"details": "See {grantRole} and {revokeRole}.                  To change a role's admin, use {_setRoleAdmin}.",
					"params": {
						"role": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
					}
				},
				"getRoleMember(bytes32,uint256)": {
					"details": "Returns `member` who has `role`, at `index` of role-members list.                  See struct {RoleMembers}, and mapping {roleMembers}",
					"params": {
						"index": "Index in list of current members for the role.",
						"role": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
					},
					"returns": {
						"member": " Address of account that has `role`"
					}
				},
				"getRoleMemberCount(bytes32)": {
					"details": "Returns `count` of accounts that have `role`.                  See struct {RoleMembers}, and mapping {roleMembers}",
					"params": {
						"role": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
					},
					"returns": {
						"count": "  Total number of accounts that have `role`"
					}
				},
				"grantRole(bytes32,address)": {
					"details": "Caller must have admin role for the `role`.                  Emits {RoleGranted Event}.",
					"params": {
						"account": "Address of the account to which the role is being granted.",
						"role": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
					}
				},
				"hasRole(bytes32,address)": {
					"details": "Returns `true` if `account` has been granted `role`.",
					"params": {
						"account": "Address of the account for which the role is being checked.",
						"role": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
					}
				},
				"hasRoleWithSwitch(bytes32,address)": {
					"details": "Returns `true` if `account` has been granted `role`.                  Role restrictions can be swtiched on and off:                      - If address(0) has ROLE, then the ROLE restrictions                        don't apply.                      - If address(0) does not have ROLE, then the ROLE                        restrictions will apply.",
					"params": {
						"account": "Address of the account for which the role is being checked.",
						"role": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
					}
				},
				"multicall(bytes[])": {
					"details": "Receives and executes a batch of function calls on this contract.",
					"params": {
						"data": "The bytes data that makes up the batch of function calls to execute."
					},
					"returns": {
						"results": "The bytes data that makes up the result of the batch of function calls executed."
					}
				},
				"removeExtension(string)": {
					"params": {
						"_extensionName": "The name of the extension to remove."
					}
				},
				"renounceRole(bytes32,address)": {
					"details": "Caller must have the `role`, with caller being the same as `account`.                  Emits {RoleRevoked Event}.",
					"params": {
						"account": "Address of the account from which the role is being revoked.",
						"role": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
					}
				},
				"replaceExtension(((string,string,address),(bytes4,string)[]))": {
					"details": "The extension with name `extension.name` is the extension being replaced.",
					"params": {
						"_extension": "The extension to replace or overwrite."
					}
				},
				"revokeRole(bytes32,address)": {
					"details": "Caller must have admin role for the `role`.                  Emits {RoleRevoked Event}.",
					"params": {
						"account": "Address of the account from which the role is being revoked.",
						"role": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
					}
				},
				"setContractURI(string)": {
					"details": "Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.",
					"params": {
						"_uri": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"events": {
				"AccountCreated(address,address)": {
					"notice": "Emitted when a new Account is created."
				},
				"SignerAdded(address,address)": {
					"notice": "Emitted when a new signer is added to an Account."
				},
				"SignerRemoved(address,address)": {
					"notice": "Emitted when a new signer is added to an Account."
				}
			},
			"kind": "user",
			"methods": {
				"accountImplementation()": {
					"notice": "Returns the address of the Account implementation."
				},
				"addExtension(((string,string,address),(bytes4,string)[]))": {
					"notice": "Add a new extension to the router."
				},
				"contractURI()": {
					"notice": "Returns the contract metadata URI."
				},
				"createAccount(address,bytes)": {
					"notice": "Deploys a new Account for admin."
				},
				"defaultExtensions()": {
					"notice": "The address where the router's default extension set is stored."
				},
				"disableFunctionInExtension(string,bytes4)": {
					"notice": "Disables a single function in an Extension."
				},
				"enableFunctionInExtension(string,(bytes4,string))": {
					"notice": "Enables a single function in an existing extension."
				},
				"getAccounts(uint256,uint256)": {
					"notice": "Returns all accounts between the given indices."
				},
				"getAccountsOfSigner(address)": {
					"notice": "Returns all accounts that the given address is a signer of."
				},
				"getAddress(address,bytes)": {
					"notice": "Returns the address of an Account that would be deployed with the given admin signer."
				},
				"getAllAccounts()": {
					"notice": "Returns all accounts created on the factory."
				},
				"getAllExtensions()": {
					"notice": "Returns all extensions of the Router."
				},
				"getExtension(string)": {
					"notice": "Returns the extension metadata and functions for a given extension."
				},
				"getImplementationForFunction(bytes4)": {
					"notice": "Returns the implementation contract address for a given function signature."
				},
				"getMetadataForFunction(bytes4)": {
					"notice": "Returns the extension metadata for a given function."
				},
				"getRoleAdmin(bytes32)": {
					"notice": "Returns the admin role that controls the specified role."
				},
				"getRoleMember(bytes32,uint256)": {
					"notice": "Returns the role-member from a list of members for a role,                  at a given index."
				},
				"getRoleMemberCount(bytes32)": {
					"notice": "Returns total number of accounts that have a role."
				},
				"grantRole(bytes32,address)": {
					"notice": "Grants a role to an account, if not previously granted."
				},
				"hasRole(bytes32,address)": {
					"notice": "Checks whether an account has a particular role."
				},
				"hasRoleWithSwitch(bytes32,address)": {
					"notice": "Checks whether an account has a particular role;                  role restrictions can be swtiched on and off."
				},
				"isRegistered(address)": {
					"notice": "Returns whether an account is registered on this factory."
				},
				"multicall(bytes[])": {
					"notice": "Receives and executes a batch of function calls on this contract."
				},
				"onRegister(bytes32)": {
					"notice": "Callback function for an Account to register itself on the factory."
				},
				"onSignerRemoved(address,bytes32)": {
					"notice": "Callback function for an Account to un-register its signers."
				},
				"removeExtension(string)": {
					"notice": "Remove an existing extension from the router."
				},
				"renounceRole(bytes32,address)": {
					"notice": "Revokes role from the account."
				},
				"replaceExtension(((string,string,address),(bytes4,string)[]))": {
					"notice": "Fully replace an existing extension of the router."
				},
				"revokeRole(bytes32,address)": {
					"notice": "Revokes role from an account."
				},
				"setContractURI(string)": {
					"notice": "Lets a contract admin set the URI for contract-level metadata."
				},
				"totalAccounts()": {
					"notice": "Returns the total number of accounts."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			".deps/npm/@thirdweb-dev/dynamic-contracts/src/ManagedAccountFactory.sol": "ManagedAccountFactory"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/AccountPermissions.sol": {
			"keccak256": "0x7dc96d85d88569c2acb5e471dc04f0cb6b97ddd57ec01a1a2d786e34bf0378b7",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://3d41ea9fa3017a451a646a320e5f12051e85e33c77c6a01cf701cb1ae5c98037",
				"dweb:/ipfs/QmRXbSgZGHSXo1UaUZC4NXMvrobZGzTc665Z1f8KHtQW6B"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/ContractMetadata.sol": {
			"keccak256": "0xf39f4a9b5205086cce817c972e99cbbe8650b8fb9cc95b62845ea4cde3fa2844",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://274b22cead06dc42a56c1dcf450a70036c9fe59c3326d415c852a5cc3a4cbc8e",
				"dweb:/ipfs/QmSdA68Qmby5rAdr3JQzCw4EnfzvRLYfDQrgFH6rCTd1Wq"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/Initializable.sol": {
			"keccak256": "0x745d7351e20def4842a749197e65bea93a7d9d7b9556d2c516e52a698b53170d",
			"license": "Apache 2.0",
			"urls": [
				"bzz-raw://df7e96985f30495f70b5d98c934bb52a2a7123bc8e24003ef110d26eca56dfe2",
				"dweb:/ipfs/QmUpXp5e1w3BgYTpGY9W6akoDyfrxB7TeDsbPpRmXse4KQ"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/Multicall.sol": {
			"keccak256": "0x82921a9d2813a43b54ef82352e252f112ce7542accb95f5cfd2db18ef392646b",
			"license": "Apache 2.0",
			"urls": [
				"bzz-raw://9ad280ac58a70a423deb3a938da2dbbeabc6e3f861abf61073f7c0a218903a57",
				"dweb:/ipfs/QmXy7k5P7z4s6YpJfeAKWWpE1fJdny8hJStHTYVv23RWzg"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/Permissions.sol": {
			"keccak256": "0x1a0a753452ae6e4ebde43eba5966956e9d8ae16a3ad3caf70728aba9dd832167",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://6c7102d78689dd324f3c97745cdd1250bf0f2e151a56ebd23e14b3bd82f7c397",
				"dweb:/ipfs/QmbkARgWbW7pfqkjVKRwBYJjkd9eE8DXzBaamZsQeZtHF8"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/PermissionsEnumberable.sol": {
			"keccak256": "0x625ae0ac617c968d5485ad80342c0cea93747acfa4e27cf49d290441e7e2c41e",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://09f6c0d161ee17ddd11b27eb33e55668a5ffdb559213cf07a3487a38c1edb709",
				"dweb:/ipfs/Qmd21bF4ugPojrXmP9sLZ1qa9zVoKmciQvs5PL9QwQzGHu"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/UserOperation.sol": {
			"keccak256": "0x0844576ffce3c3fd6ec5454d3a142efe5ed119112d7e1c6698c99b5b93a6476f",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://5e788a3d11d336be698790552bd9f31f1bdc72f43a22a5b2574fb248c819076f",
				"dweb:/ipfs/QmcfToLtD2tA36AL6FKB8Du7EWr43zC5yo2HZFGKeY41Z4"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/EIP712.sol": {
			"keccak256": "0x25654c1fd5d6eea9cd129468120eca50d3bdb95688018d8ac449e3a97380f035",
			"license": "MIT",
			"urls": [
				"bzz-raw://3b29af88804a5c5ded9a4d91f5a83874fde773aac2e2b55b265296db4c8f15c8",
				"dweb:/ipfs/Qmcw3SXJhmztyeShYZYxGHzvVVBYx94rB86gtywBStVYVk"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/ERC1155Holder.sol": {
			"keccak256": "0x4525b38acf0419f706f992302c764218e5e276b26c7e8ac941c888ab06d7c252",
			"license": "MIT",
			"urls": [
				"bzz-raw://5731ffc764b904ba3251b01cae42bf5b68214155e4e4a7e1496502cdb9c2119f",
				"dweb:/ipfs/QmQNJJv7JRXjmEoZ2Su13hgqKgAbj1NCu1rUMxRYiG1VNy"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/ERC1155Receiver.sol": {
			"keccak256": "0xdf46e837f9647620d40dead57860d0e471af6cb166e3fa2d336983ec437230b3",
			"license": "MIT",
			"urls": [
				"bzz-raw://a8976271272e0471df84b67b2dcf62b5642f61809876f62dbf40cbfd39f0accb",
				"dweb:/ipfs/QmUiw6aBUA7HpuETgd4WKhMm8QR63acRmE2qac2mYUJLjs"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/ERC1271.sol": {
			"keccak256": "0x7ed4875c46aa03fe1d51a02f03d3af111dc620576e6c35a638d73bf16225a957",
			"license": "Apache 2.0",
			"urls": [
				"bzz-raw://7bd3fb45b9e1f398c4067936dfe0f8076760896e499edde600aa5d904028e832",
				"dweb:/ipfs/QmY1YvQhNWK5BhHMLKbSTGoM19QtK76ofU9vrGCGQVa2Ka"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/ERC165.sol": {
			"keccak256": "0xa96986bc175f1dc29e7e41b0d0f583e2ce0653fe7e97c1eb77a7295f5198c17e",
			"license": "MIT",
			"urls": [
				"bzz-raw://7bb0624408e8b206aac47baeff6f0b8206086563ece7a43cb7ecda15306c01a4",
				"dweb:/ipfs/QmaES9pxgPLSMor7YMMC5rPqJf43aydDiMBxPRrXyjEB1L"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/ERC721Holder.sol": {
			"keccak256": "0x23ca9c264a6db67e6e38b13485c540a7da41b18255023a541d7eb898d8abf839",
			"license": "MIT",
			"urls": [
				"bzz-raw://7662c82f0ba877be24925128974308d7dc65ca4e31d3c42adcd16a8f5fda821b",
				"dweb:/ipfs/QmcxVjgXLZJuggWBa8biAxEHRhub5uoAwsqePXSBWyo6pc"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/ExtensionManager.sol": {
			"keccak256": "0x3622f411c416e5986ca6714df4d27b189f379f4529cc0eb5e63de9fddc381cae",
			"license": "MIT",
			"urls": [
				"bzz-raw://61604d59f3d324ed6b66de5bd9f289748b711f7a8b2772048ab3f537583a3d37",
				"dweb:/ipfs/QmVXCnCscCw2Ar5Hmd8htDWEsV5XQke3YUUqf78iDkNgZv"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/ManagedAccount.sol": {
			"keccak256": "0xa029afb527854654d5a3679cecebe7137b8aa4bddeacf4a0644410b761bae24f",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://854d6af3de413a5537ba4938386e325bd1ffa2e0bcf4bacddbd15307c35de30e",
				"dweb:/ipfs/QmVDonMgYDn3mio1M4ZZVekkanuSce3B3FBCnsefmsKUzq"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/ManagedAccountFactory.sol": {
			"keccak256": "0x0bbf42a068846aa87c83909baeedc72082b8b73ac115de44a93db6cc9e6ade60",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://1690c9899eeabc298a8d3c081b3655bb0485cc726446861b0ea3fdd1db1c5c88",
				"dweb:/ipfs/QmcR2tSfZD4m6ZgdLiLckGsMhk8amnKJJqg3iMZUm6bhNd"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/core/Router.sol": {
			"keccak256": "0x87e224e1ff20eb8cc8d01cc04acfcf8eb9d6c788793d83bb4047054c9f4f330e",
			"license": "MIT",
			"urls": [
				"bzz-raw://43c706ea033ba24d6823f0a3cad6b6790a10128bcef25f325c2c3ef87c4857d7",
				"dweb:/ipfs/QmWLoBYc4oLzWVCK1Rwccs5cyUb1nfTgojkanEV2RkDQbd"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IAccount.sol": {
			"keccak256": "0xdbf3f91dd92200e52294b0606a1344bc7f959426577e27f4fd1e757d04e7b045",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://f8ea4061342a16e18c5ad652e19fa7d0343493e6302470e498c79f12cd5b4bf6",
				"dweb:/ipfs/QmTvSGFxEZkSg656mx1ombm6a1CU33L8JxqTVtUKN5daML"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IAccountCore.sol": {
			"keccak256": "0xb4aeeb7e5ed69998cbc8d674cb44b989426b039af5f41f7a887f090e3bc7a876",
			"license": "Apache 2.0",
			"urls": [
				"bzz-raw://5ae7c19b2d22d2e74719875c6d0762a341fbb9db36e81f894e15a228e1ad637c",
				"dweb:/ipfs/QmZHL9jed5Tdn3SQSRjCDuRu6GBgmPruqu43ENj3N3vJhr"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IAccountFactory.sol": {
			"keccak256": "0x820f45842ad539f214db3fbca19fea58702b5ecdd496aa770951904a4938d7e4",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://091e913a25e6a3cde14596525e8d5a8656275fd5fcd8fcb56ec3fd7a66d050f9",
				"dweb:/ipfs/Qmbp73fgRHMWyQ2ETsCpVanUXj6NxnzBiJxcEupZwCAKWx"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IAccountFactoryCore.sol": {
			"keccak256": "0x65c5ed98c2b7dd9ba4f2c83eaa652b1069470999a04625e33ea197e39aff63b6",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://9a3d0c5d28efdae547f3714e341b6caf71f27358d9409a6dcc72ca569aeb9ff6",
				"dweb:/ipfs/QmUBZHg1bCsNGWrSC9d34oPDqriLregwxiRCUjmYYZeR5E"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IAccountPermissions.sol": {
			"keccak256": "0x34e998c2cfac71ae5837280e487215fc64f17c4212270192442e541527a38871",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://51d201d243ade4b6aa37f88e6dbd8f4886ef2b15a290630367b8b95f8ef1a69c",
				"dweb:/ipfs/QmfHdzvzEugZMatjex3sbp2ehjcRE3mDi7QxEHCi6A25Ww"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IAggregator.sol": {
			"keccak256": "0x516d1dcafa4a239386340533d87ed0c1eff291c631cf596afaf82262ddfa603d",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://ed5974a9e0fe8de3de6779ca0ef4c1655a26ca9a73a94b4d8a26789ac1bd09ef",
				"dweb:/ipfs/QmXxjfVDdZS6bqyHo5AfbZthZUtytcCt8Gn87jg8bdM4wv"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IContractMetadata.sol": {
			"keccak256": "0x5952d0586b962b2023a9ab6375496c90067fcced4f7f6283ea6b3026f2f14983",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://c53bc124b874d0db67ff2c96cdd8a2a375557446f3a2a026c88a334db2250c34",
				"dweb:/ipfs/QmR7to5196g8Py4qa4GuFH4DeSLWHgyZzFa17biRosrrpM"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IERC1155Receiver.sol": {
			"keccak256": "0x22a0c50cbc69aa19cb1d9ee08f73b227e2c5d3a14b9dbb53de819a916ddd3e3e",
			"license": "MIT",
			"urls": [
				"bzz-raw://ac979f9a2c42aedb3b66da2cb7d7d579224a2129c54f6515256835839158b7b9",
				"dweb:/ipfs/QmUxV7xaoM1tjEXgUCSR46x43aN9XtaNSv4ijURpTbSiHv"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IERC165.sol": {
			"keccak256": "0x602295d1c44a6f0bae7035cb559d78cd005d3f03468847c1b7ebc42d4021d74d",
			"license": "MIT",
			"urls": [
				"bzz-raw://79efcef9e064ce6be54e41319afd5f54cd2ab82010e6831499a8b4e189dac466",
				"dweb:/ipfs/QmT3E66u7DhBBwF4o1eJQSi7KBrwbtUjGBiwXbZn8mCsU8"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IERC721Receiver.sol": {
			"keccak256": "0xd7dcb4429a3ce3e3abfd2aff9a057ce4267492b2a88730fa41d62ac43df5573b",
			"license": "MIT",
			"urls": [
				"bzz-raw://7ac0366003a4a99a3380ce9f5f8ebd20e8b75f4c42c14d732dffad1e623634f9",
				"dweb:/ipfs/QmXYRqc21kGRi5yhMpjwifFKdPYXR4S6xKfcyYWeEHuPPf"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IEntrypoint.sol": {
			"keccak256": "0xef4668624f5de2d35eba19dd3edfddc3acd5a2b845cae211f299c1311e216f2c",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://8769f0c62103b659084e7cefdb26eeb9b46b31de03fd4002e264e9afa64868a8",
				"dweb:/ipfs/QmZovAx1SQH6rmhciv1tGSJTAxRq1YBUjUo63mqsrw3did"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IExtension.sol": {
			"keccak256": "0x22181c67dd7ec821697d7dfabe778d9ae85dc784aabcbc85e2dd8cc97789939e",
			"license": "MIT",
			"urls": [
				"bzz-raw://0802dbefa09c672978b95115083da519484bce42c9a7d0ebe756606a7f08ac7b",
				"dweb:/ipfs/QmRsyrkkmR7dTyhY8cF3M389V5eip24Y5gN3X8ok4W8z8M"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IExtensionManager.sol": {
			"keccak256": "0x1a58de382da66ce24780d8b35191fe56f32b0a4c7554b0d37f8efe4784473149",
			"license": "MIT",
			"urls": [
				"bzz-raw://314c60069fb1e1f6e11c7841ac249e1163531aa1f7864aaffc9a52fae8852c62",
				"dweb:/ipfs/QmVBP4GZGkudMD2NUKRga9CQebxi5732dq997GhVGT8JsG"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IMulticall.sol": {
			"keccak256": "0xa569531ddd48bf1bd6fcb12927a732ea49a5277429fbba7e44108f4f8d336234",
			"license": "MIT",
			"urls": [
				"bzz-raw://5bd423a5b7315e40dd6cf31ce3c34d236d349c8959d0fed44a1dc84eb431429c",
				"dweb:/ipfs/QmYR9XkzCvPzT48HieLHkujzF1cAAZT3E8pazRCgCU8NaJ"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/INonceManager.sol": {
			"keccak256": "0x77085fe40d8352eb6d16f02cca3b8b57db016e97173b5341104d4c4fc677531f",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://8c7eec5d8ebaef50e8e856364a6570cac01f609a3dfcd611af6d7fa550f05d54",
				"dweb:/ipfs/QmToDwfQAymfgUWUTg4VMnfZW72fGcmxWbGk1pipw5Bkm1"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IPermissions.sol": {
			"keccak256": "0xc52f7860688170ac28460b874ed205306f46b8a52eeca4773ec79492b2fed2e1",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://3d594586779bed95879a0fc685a83ab0a20c7b5bde152ac102bd4225e2654280",
				"dweb:/ipfs/QmdAooj3NDzkz6Za5CW3oBcHai5FVo8jRotLjoVP3RE8WP"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IPermissionsEnumberable.sol": {
			"keccak256": "0xe77eb276a130a99bceb44a8a80c3e3a05bd7d11f7668c689ef4052a51da6dced",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://ad79602efe9226547bfacef0bc4b10191facc4b4f3403b89fcb7b35cee10fee3",
				"dweb:/ipfs/QmaWcZsGBFH34Q4hWivVqZc5va9FQ3CJxedUUkuSesKznF"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IRouter.sol": {
			"keccak256": "0xda007810e0416a45e3e6bbaa6c9977029e4e7cccb0c45e324b2dfbda900ee0bf",
			"license": "MIT",
			"urls": [
				"bzz-raw://d2c7a80cad255c4f6928391272209d724a9d044801bca1b873bbf998363e0c55",
				"dweb:/ipfs/Qme9cCYBPw28uLq3N688jAS6jAV8yVhhBCXNgxMQeHeDxJ"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IRouterState.sol": {
			"keccak256": "0x675677235369c260e7b867d14e33fda5806320803061ea90d1e0441be5cc3d04",
			"license": "MIT",
			"urls": [
				"bzz-raw://ad3a3a31d042d10d9a5860fdac76a78ac3538d2fc59ae96551b24f28490026e9",
				"dweb:/ipfs/QmTGSS1HR3yLUSQJfGF5tZYCzvpz1HweZWWm3NNVuv4x7M"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IRouterStateGetters.sol": {
			"keccak256": "0x8aadc42fcc739bab6e256b24c87a011ddbb60e511c05af8e32ab86fa22cded39",
			"license": "MIT",
			"urls": [
				"bzz-raw://a780170fbfb0d17a04400d569d4141d51ca5ccaf3567dbbcd95a53f85b664726",
				"dweb:/ipfs/QmSkjtMHgU7f8QpDghHyJTWJs2HavLxmfvfQeWosiPa3Pv"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IStakeManager.sol": {
			"keccak256": "0x56ed36384e0c62253769a2219b2e9161d88e5f58ae1f781fd3a540c8a399b9a7",
			"license": "GPL-3.0-only",
			"urls": [
				"bzz-raw://9f26a6b28abc3eee5cf63938205ee6274d508b6f3acd5d1af0f041a2f239be45",
				"dweb:/ipfs/QmY4DYvnqU93ta3VNSa6nxNjoWoum6B8t8k9D7wLUvk6m1"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/lib/Address.sol": {
			"keccak256": "0x3793ed8492fa575cf73beed883a26cda685bb53f63950599c1280eae9a73fada",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://f9e2916d53829baff87699664e65b95ff536c25d02d4b9ff2433eab54812f9b0",
				"dweb:/ipfs/QmXSqLvmNZ3qLLC42TCDzNEia2mUmALdTTfLxKmfdqNEot"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/lib/BaseRouterStorage.sol": {
			"keccak256": "0x200f712a8165fb865f90891cc0cede68059c3eec2f87c14a8d8dac21ac448b76",
			"license": "MIT",
			"urls": [
				"bzz-raw://dccf7578d1e231bfbefdebf35b9db590c4574cce599c13a708e9d0bd836c85bd",
				"dweb:/ipfs/QmQvwB8YUuL7aqdNtGp2ECfJwKuzExPGkFd6BSuKR3etEi"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/lib/Bytecode.sol": {
			"keccak256": "0x093f6876407eb841cda20ee20df4e29d6586bd03c4daa611357c681c881f2312",
			"license": "MIT",
			"urls": [
				"bzz-raw://bf4eacdfa5e2fb7f7ebcb0a3d6fc7b09ddc9afdce12657723f8396f22ac736c4",
				"dweb:/ipfs/QmbRnx6QgFdTXEM2wk8mjJZea45KWMYcJ9aF7RSZvN1trA"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/lib/BytesLib.sol": {
			"keccak256": "0x2516d3f849615cb70f26692e1f1c4c25d056eb74fa68b18aa46c46edb7fa5ec7",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://5a38ea655a3553fa7a32610ee11de2e3d5ae36367a667a0d1c229ffa6c073c5e",
				"dweb:/ipfs/QmU9GUNZkvWnSbRoGWfbqDnZb6GAMnXHBerkrqN93bqeig"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/lib/Clones.sol": {
			"keccak256": "0x2362d7dd406da7ffbd665a99fd4a9c033d5d0e0113429f28848a54ff603d1878",
			"license": "MIT",
			"urls": [
				"bzz-raw://963cfd950920cc1703d1190b0f0bcd6d5bbce666773e13f1d5955cc356bd9ba8",
				"dweb:/ipfs/QmT6pkaQqEYcvDwHvJakuwNTtBRnaJJFhGW85Mn6238EUh"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/lib/EnumerableSet.sol": {
			"keccak256": "0x3fcc70973c4fd46e32562aa3cb2b5bb465200dc76dd6ac32a6ac83ca36605294",
			"license": "MIT",
			"urls": [
				"bzz-raw://e25c92065f2afba193544cfef02fd8803f192447ed45ddc6e7bed5f892bd21b3",
				"dweb:/ipfs/QmP5Xbh7YBDieZ4rKoX3RCGbG8cmA2NbxYqSio4PfvuW4T"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/lib/ExtensionManagerStorage.sol": {
			"keccak256": "0x5dde547f745a353fe4a651edfa1edb8a28ff4d40d3100b6f2491ee0ee6bcc3a3",
			"license": "MIT",
			"urls": [
				"bzz-raw://dc1f6ab15319263384f0a65ede2bf0b0fb4a3e7d7db0857799238415af099738",
				"dweb:/ipfs/Qmb9pKpEriGfhcEsHs6WDAQxp6drFJq4nM3onumpfkkbis"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/lib/SSTORE2.sol": {
			"keccak256": "0xd026f41c4cb1d32cd78b964b79b7046b7aa38981b04a6befccdce3404e75c69f",
			"license": "MIT",
			"urls": [
				"bzz-raw://4147637953a38a2be263efd159cde3418e6e863e6992cdecd5f835ccac45c7cf",
				"dweb:/ipfs/QmZLrrNL9wdt4g16BQCW5MN3qCm4QbEyxpri18pAYENhxn"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/lib/StringSet.sol": {
			"keccak256": "0x3cfe09c207edb70d6aec054f80ba6559a01bb17f95796765b9a98cc59e7ffafc",
			"license": "MIT",
			"urls": [
				"bzz-raw://43383086cbc953cb6fbd18e677f13e72c83081c095611c0608d7a66f55071ff3",
				"dweb:/ipfs/QmfMxmNAhPZZgsopXDXJ5PviMpcahsvYoiN3GEkLnaXiDf"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/lib/Strings.sol": {
			"keccak256": "0x20e6bbbb0ac64ba9358b7d03773ba533d9474afb93285e412c80ba951fc16e52",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://c6706f7cd9a2c723cb7df32e4dfbfc08f96812dfda2d96d0d922385da6fed190",
				"dweb:/ipfs/QmVEfuuyWFTQQsZ4Xk4hmVwojKPjVk8pgX5hUmvUi4prQg"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/presets/BaseRouter.sol": {
			"keccak256": "0xee9eb24ec965517dab3244de5038c20802355e0cd8fcd8930768a64125a427bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://9f6075031e8c7e8de48ca7de31fc0fd401c5c6e85756349c7b21f15b45d5ccbf",
				"dweb:/ipfs/QmbsYiR6X5xiEaFmaHF9D1dPc1rTJzhvADQgqsjmqH3emY"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/utils/AccountCore.sol": {
			"keccak256": "0xfb2f6b11edecb19de6beb9bb486dabba9a8f08df4634d3d93e2b8c550055ae3e",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://727782252816db07d4a4b17c72ccc9d7e69f145e48990294922bff115bbff018",
				"dweb:/ipfs/QmVKSS625yR2qnRZA3TXgdR3CzjqZSR9FrbzGiYvexQ9ZH"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/utils/AccountCoreStorage.sol": {
			"keccak256": "0x07e95e472659b39c2925e4df6af15d4d048b4a2c0d0b85d8d40bf38ab6bdc85b",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://0cbc9090daef1a527c3d620e7369fc3d5a8354e9d307ed09607e5f9675bde0d7",
				"dweb:/ipfs/QmdknnxZmNPiPRmZkBELoyxafx92KhLVgjeBAMAYiJVp3h"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/utils/AccountExtension.sol": {
			"keccak256": "0xffb2697ba17716c303cae73d18c863c156c069ec240a5d2ad544b56820992333",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://20a249ad1a5da912327a22404eb1628659c78e1ccd409f2073b164e88474bfcb",
				"dweb:/ipfs/QmWHGkAizig4Jv7dTzw4Y8hrPDWJMLGzR5jFH561cFfR96"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/utils/BaseAccount.sol": {
			"keccak256": "0xd9d9a4c7f3189c8b8fa153188096c142f5e3761aacbf983ce3d65640fb3572ed",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://b59ca955c5764341e61c27fb41aa048fe135477e9a16cf22e6c0ed199dc0a3cf",
				"dweb:/ipfs/Qmd7f4ei7wo5CkjnVXff2H7mVUnmHTv2zuCrJUDNBfkDTk"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/utils/BaseAccountFactory.sol": {
			"keccak256": "0x5b64d43318db2c3f3497777044d12acf761bc60256b10ca1b742a6735a3bbe40",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://e8b780ec4a55c0031fe6cc9597db2e42362fadd3ff39b75761fac38d586446a5",
				"dweb:/ipfs/QmeGyjZTVnTXtQmdABnUiAZmGCKuie8T8uhyG12fjEsSTX"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/utils/ECDSA.sol": {
			"keccak256": "0xd3ff430c58be2936bf9cd4619ae0db100832fb08a75d20f18bc5abce89140421",
			"license": "MIT",
			"urls": [
				"bzz-raw://de4755385866c68e43000ee6d068b6214137d4aa42fe4534a408d72e37520da1",
				"dweb:/ipfs/QmZHJKhUX6m7fNEqUvLUSXtKEaH1CdvN7QZaeKtsi7kiuB"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/utils/Helpers.sol": {
			"keccak256": "0x78aa2145fcfb195f533e68486fd1617a3b6b5bdf53af1b8fd2ab7211459bc8ba",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://a1ea19d4707c245e5bdad9df43cd89bbc451b08e074b0cb2156a04c0e1e2c6da",
				"dweb:/ipfs/QmVas9dTRJt9HJQomia5ZTBgQanxyz1akyDAkCHRL3ecx7"
			]
		},
		"@thirdweb-dev/dynamic-contracts/src/core/Router.sol": {
			"keccak256": "0x87e224e1ff20eb8cc8d01cc04acfcf8eb9d6c788793d83bb4047054c9f4f330e",
			"license": "MIT",
			"urls": [
				"bzz-raw://43c706ea033ba24d6823f0a3cad6b6790a10128bcef25f325c2c3ef87c4857d7",
				"dweb:/ipfs/QmWLoBYc4oLzWVCK1Rwccs5cyUb1nfTgojkanEV2RkDQbd"
			]
		},
		"@thirdweb-dev/dynamic-contracts/src/interface/IExtension.sol": {
			"keccak256": "0x22181c67dd7ec821697d7dfabe778d9ae85dc784aabcbc85e2dd8cc97789939e",
			"license": "MIT",
			"urls": [
				"bzz-raw://0802dbefa09c672978b95115083da519484bce42c9a7d0ebe756606a7f08ac7b",
				"dweb:/ipfs/QmRsyrkkmR7dTyhY8cF3M389V5eip24Y5gN3X8ok4W8z8M"
			]
		},
		"@thirdweb-dev/dynamic-contracts/src/interface/IRouter.sol": {
			"keccak256": "0xda007810e0416a45e3e6bbaa6c9977029e4e7cccb0c45e324b2dfbda900ee0bf",
			"license": "MIT",
			"urls": [
				"bzz-raw://d2c7a80cad255c4f6928391272209d724a9d044801bca1b873bbf998363e0c55",
				"dweb:/ipfs/Qme9cCYBPw28uLq3N688jAS6jAV8yVhhBCXNgxMQeHeDxJ"
			]
		},
		"@thirdweb-dev/dynamic-contracts/src/interface/IRouterState.sol": {
			"keccak256": "0x675677235369c260e7b867d14e33fda5806320803061ea90d1e0441be5cc3d04",
			"license": "MIT",
			"urls": [
				"bzz-raw://ad3a3a31d042d10d9a5860fdac76a78ac3538d2fc59ae96551b24f28490026e9",
				"dweb:/ipfs/QmTGSS1HR3yLUSQJfGF5tZYCzvpz1HweZWWm3NNVuv4x7M"
			]
		}
	},
	"version": 1
}