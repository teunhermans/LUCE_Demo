{
	"compiler": {
		"version": "0.8.24+commit.e11b9ed9"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "signer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "isAdmin",
						"type": "bool"
					}
				],
				"name": "AdminUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "authorizingSigner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "targetSigner",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "signer",
								"type": "address"
							},
							{
								"internalType": "uint8",
								"name": "isAdmin",
								"type": "uint8"
							},
							{
								"internalType": "address[]",
								"name": "approvedTargets",
								"type": "address[]"
							},
							{
								"internalType": "uint256",
								"name": "nativeTokenLimitPerTransaction",
								"type": "uint256"
							},
							{
								"internalType": "uint128",
								"name": "permissionStartTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "permissionEndTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "reqValidityStartTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "reqValidityEndTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "bytes32",
								"name": "uid",
								"type": "bytes32"
							}
						],
						"indexed": false,
						"internalType": "struct IAccountPermissions.SignerPermissionRequest",
						"name": "permissions",
						"type": "tuple"
					}
				],
				"name": "SignerPermissionsUpdated",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "factory",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllActiveSigners",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "signer",
								"type": "address"
							},
							{
								"internalType": "address[]",
								"name": "approvedTargets",
								"type": "address[]"
							},
							{
								"internalType": "uint256",
								"name": "nativeTokenLimitPerTransaction",
								"type": "uint256"
							},
							{
								"internalType": "uint128",
								"name": "startTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "endTimestamp",
								"type": "uint128"
							}
						],
						"internalType": "struct IAccountPermissions.SignerPermissions[]",
						"name": "signers",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllAdmins",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "admins",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllSigners",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "signer",
								"type": "address"
							},
							{
								"internalType": "address[]",
								"name": "approvedTargets",
								"type": "address[]"
							},
							{
								"internalType": "uint256",
								"name": "nativeTokenLimitPerTransaction",
								"type": "uint256"
							},
							{
								"internalType": "uint128",
								"name": "startTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "endTimestamp",
								"type": "uint128"
							}
						],
						"internalType": "struct IAccountPermissions.SignerPermissions[]",
						"name": "signers",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "signer",
						"type": "address"
					}
				],
				"name": "getPermissionsForSigner",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "signer",
								"type": "address"
							},
							{
								"internalType": "address[]",
								"name": "approvedTargets",
								"type": "address[]"
							},
							{
								"internalType": "uint256",
								"name": "nativeTokenLimitPerTransaction",
								"type": "uint256"
							},
							{
								"internalType": "uint128",
								"name": "startTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "endTimestamp",
								"type": "uint128"
							}
						],
						"internalType": "struct IAccountPermissions.SignerPermissions",
						"name": "permissions",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "signer",
						"type": "address"
					}
				],
				"name": "isActiveSigner",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "signer",
						"type": "address"
					}
				],
				"name": "isAdmin",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes[]",
						"name": "data",
						"type": "bytes[]"
					}
				],
				"name": "multicall",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "results",
						"type": "bytes[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "signer",
								"type": "address"
							},
							{
								"internalType": "uint8",
								"name": "isAdmin",
								"type": "uint8"
							},
							{
								"internalType": "address[]",
								"name": "approvedTargets",
								"type": "address[]"
							},
							{
								"internalType": "uint256",
								"name": "nativeTokenLimitPerTransaction",
								"type": "uint256"
							},
							{
								"internalType": "uint128",
								"name": "permissionStartTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "permissionEndTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "reqValidityStartTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "reqValidityEndTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "bytes32",
								"name": "uid",
								"type": "bytes32"
							}
						],
						"internalType": "struct IAccountPermissions.SignerPermissionRequest",
						"name": "req",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "setPermissionsForSigner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "nonce",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "initCode",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "callData",
								"type": "bytes"
							},
							{
								"internalType": "uint256",
								"name": "callGasLimit",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "verificationGasLimit",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "preVerificationGas",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxFeePerGas",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxPriorityFeePerGas",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "paymasterAndData",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "signature",
								"type": "bytes"
							}
						],
						"internalType": "struct UserOperation",
						"name": "userOp",
						"type": "tuple"
					},
					{
						"internalType": "bytes32",
						"name": "userOpHash",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "missingAccountFunds",
						"type": "uint256"
					}
				],
				"name": "validateUserOp",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "validationData",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "signer",
								"type": "address"
							},
							{
								"internalType": "uint8",
								"name": "isAdmin",
								"type": "uint8"
							},
							{
								"internalType": "address[]",
								"name": "approvedTargets",
								"type": "address[]"
							},
							{
								"internalType": "uint256",
								"name": "nativeTokenLimitPerTransaction",
								"type": "uint256"
							},
							{
								"internalType": "uint128",
								"name": "permissionStartTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "permissionEndTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "reqValidityStartTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "reqValidityEndTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "bytes32",
								"name": "uid",
								"type": "bytes32"
							}
						],
						"internalType": "struct IAccountPermissions.SignerPermissionRequest",
						"name": "req",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "verifySignerPermissionRequest",
				"outputs": [
					{
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					},
					{
						"internalType": "address",
						"name": "signer",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"factory()": {
					"details": "Returns the address of the factory from which the account was created."
				},
				"multicall(bytes[])": {
					"details": "Receives and executes a batch of function calls on this contract."
				},
				"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": {
					"details": "Must validate caller is the entryPoint.      Must validate the signature and nonce",
					"params": {
						"missingAccountFunds": "missing funds on the account's deposit in the entrypoint.      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.      The excess is left as a deposit in the entrypoint, for future calls.      can be withdrawn anytime using \"entryPoint.withdrawTo()\"      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.",
						"userOp": "the operation that is about to be executed.",
						"userOpHash": "hash of the user's request data. can be used as the basis for signature."
					},
					"returns": {
						"validationData": "packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,         otherwise, an address of an \"authorizer\" contract.      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"      <6-byte> validAfter - first timestamp this operation is valid      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.      Note that the validation code cannot use block.timestamp (or block.number) directly."
					}
				},
				"verifySignerPermissionRequest((address,uint8,address[],uint256,uint128,uint128,uint128,uint128,bytes32),bytes)": {
					"details": "Verifies that a request is signed by an authorized account."
				}
			},
			"version": 1
		},
		"userdoc": {
			"events": {
				"AdminUpdated(address,bool)": {
					"notice": "Emitted when an admin is set or removed."
				},
				"SignerPermissionsUpdated(address,address,(address,uint8,address[],uint256,uint128,uint128,uint128,uint128,bytes32))": {
					"notice": "Emitted when permissions for a signer are updated."
				}
			},
			"kind": "user",
			"methods": {
				"getAllActiveSigners()": {
					"notice": "Returns all signers with active permissions to use the account."
				},
				"getAllAdmins()": {
					"notice": "Returns all admins of the account."
				},
				"getAllSigners()": {
					"notice": "Returns all active and inactive signers of the account."
				},
				"getPermissionsForSigner(address)": {
					"notice": "Returns the restrictions under which a signer can use the smart wallet."
				},
				"isActiveSigner(address)": {
					"notice": "Returns whether the given account is an active signer on the account."
				},
				"isAdmin(address)": {
					"notice": "Returns whether the given account is an admin."
				},
				"setPermissionsForSigner((address,uint8,address[],uint256,uint128,uint128,uint128,uint128,bytes32),bytes)": {
					"notice": "Sets the permissions for a given signer."
				},
				"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": {
					"notice": "Validate user's signature and nonce the entryPoint will make the call to the recipient only if this validation call returns successfully. signature failure should be reported by returning SIG_VALIDATION_FAILED (1). This allows making a \"simulation call\" without a valid signature Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IAccountCore.sol": "IAccountCore"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/UserOperation.sol": {
			"keccak256": "0x0844576ffce3c3fd6ec5454d3a142efe5ed119112d7e1c6698c99b5b93a6476f",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://5e788a3d11d336be698790552bd9f31f1bdc72f43a22a5b2574fb248c819076f",
				"dweb:/ipfs/QmcfToLtD2tA36AL6FKB8Du7EWr43zC5yo2HZFGKeY41Z4"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IAccount.sol": {
			"keccak256": "0xdbf3f91dd92200e52294b0606a1344bc7f959426577e27f4fd1e757d04e7b045",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://f8ea4061342a16e18c5ad652e19fa7d0343493e6302470e498c79f12cd5b4bf6",
				"dweb:/ipfs/QmTvSGFxEZkSg656mx1ombm6a1CU33L8JxqTVtUKN5daML"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IAccountCore.sol": {
			"keccak256": "0xb4aeeb7e5ed69998cbc8d674cb44b989426b039af5f41f7a887f090e3bc7a876",
			"license": "Apache 2.0",
			"urls": [
				"bzz-raw://5ae7c19b2d22d2e74719875c6d0762a341fbb9db36e81f894e15a228e1ad637c",
				"dweb:/ipfs/QmZHL9jed5Tdn3SQSRjCDuRu6GBgmPruqu43ENj3N3vJhr"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IAccountPermissions.sol": {
			"keccak256": "0x34e998c2cfac71ae5837280e487215fc64f17c4212270192442e541527a38871",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://51d201d243ade4b6aa37f88e6dbd8f4886ef2b15a290630367b8b95f8ef1a69c",
				"dweb:/ipfs/QmfHdzvzEugZMatjex3sbp2ehjcRE3mDi7QxEHCi6A25Ww"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IMulticall.sol": {
			"keccak256": "0xa569531ddd48bf1bd6fcb12927a732ea49a5277429fbba7e44108f4f8d336234",
			"license": "MIT",
			"urls": [
				"bzz-raw://5bd423a5b7315e40dd6cf31ce3c34d236d349c8959d0fed44a1dc84eb431429c",
				"dweb:/ipfs/QmYR9XkzCvPzT48HieLHkujzF1cAAZT3E8pazRCgCU8NaJ"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/utils/Helpers.sol": {
			"keccak256": "0x78aa2145fcfb195f533e68486fd1617a3b6b5bdf53af1b8fd2ab7211459bc8ba",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://a1ea19d4707c245e5bdad9df43cd89bbc451b08e074b0cb2156a04c0e1e2c6da",
				"dweb:/ipfs/QmVas9dTRJt9HJQomia5ZTBgQanxyz1akyDAkCHRL3ecx7"
			]
		}
	},
	"version": 1
}