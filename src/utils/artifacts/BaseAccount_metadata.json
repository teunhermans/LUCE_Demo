{
	"compiler": {
		"version": "0.8.24+commit.e11b9ed9"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "entryPoint",
				"outputs": [
					{
						"internalType": "contract IEntryPoint",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getNonce",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "nonce",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "initCode",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "callData",
								"type": "bytes"
							},
							{
								"internalType": "uint256",
								"name": "callGasLimit",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "verificationGasLimit",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "preVerificationGas",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxFeePerGas",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxPriorityFeePerGas",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "paymasterAndData",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "signature",
								"type": "bytes"
							}
						],
						"internalType": "struct UserOperation",
						"name": "userOp",
						"type": "tuple"
					},
					{
						"internalType": "bytes32",
						"name": "userOpHash",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "missingAccountFunds",
						"type": "uint256"
					}
				],
				"name": "validateUserOp",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "validationData",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"entryPoint()": {
					"notice": "return the entryPoint used by this account. subclass should return the current entryPoint used by this account."
				},
				"getNonce()": {
					"notice": "Return the account nonce. This method returns the next sequential nonce. For a nonce of a specific key, use `entrypoint.getNonce(account, key)`"
				},
				"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": {
					"notice": "Validate user's signature and nonce. subclass doesn't need to override this method. Instead, it should override the specific internal validation methods."
				}
			},
			"notice": "Basic account implementation. this contract provides the basic logic for implementing the IAccount interface  - validateUserOp specific account implementation should inherit it and provide the account-specific logic",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			".deps/npm/@thirdweb-dev/dynamic-contracts/src/utils/BaseAccount.sol": "BaseAccount"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/UserOperation.sol": {
			"keccak256": "0x0844576ffce3c3fd6ec5454d3a142efe5ed119112d7e1c6698c99b5b93a6476f",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://5e788a3d11d336be698790552bd9f31f1bdc72f43a22a5b2574fb248c819076f",
				"dweb:/ipfs/QmcfToLtD2tA36AL6FKB8Du7EWr43zC5yo2HZFGKeY41Z4"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IAccount.sol": {
			"keccak256": "0xdbf3f91dd92200e52294b0606a1344bc7f959426577e27f4fd1e757d04e7b045",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://f8ea4061342a16e18c5ad652e19fa7d0343493e6302470e498c79f12cd5b4bf6",
				"dweb:/ipfs/QmTvSGFxEZkSg656mx1ombm6a1CU33L8JxqTVtUKN5daML"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IAggregator.sol": {
			"keccak256": "0x516d1dcafa4a239386340533d87ed0c1eff291c631cf596afaf82262ddfa603d",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://ed5974a9e0fe8de3de6779ca0ef4c1655a26ca9a73a94b4d8a26789ac1bd09ef",
				"dweb:/ipfs/QmXxjfVDdZS6bqyHo5AfbZthZUtytcCt8Gn87jg8bdM4wv"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IEntrypoint.sol": {
			"keccak256": "0xef4668624f5de2d35eba19dd3edfddc3acd5a2b845cae211f299c1311e216f2c",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://8769f0c62103b659084e7cefdb26eeb9b46b31de03fd4002e264e9afa64868a8",
				"dweb:/ipfs/QmZovAx1SQH6rmhciv1tGSJTAxRq1YBUjUo63mqsrw3did"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/INonceManager.sol": {
			"keccak256": "0x77085fe40d8352eb6d16f02cca3b8b57db016e97173b5341104d4c4fc677531f",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://8c7eec5d8ebaef50e8e856364a6570cac01f609a3dfcd611af6d7fa550f05d54",
				"dweb:/ipfs/QmToDwfQAymfgUWUTg4VMnfZW72fGcmxWbGk1pipw5Bkm1"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IStakeManager.sol": {
			"keccak256": "0x56ed36384e0c62253769a2219b2e9161d88e5f58ae1f781fd3a540c8a399b9a7",
			"license": "GPL-3.0-only",
			"urls": [
				"bzz-raw://9f26a6b28abc3eee5cf63938205ee6274d508b6f3acd5d1af0f041a2f239be45",
				"dweb:/ipfs/QmY4DYvnqU93ta3VNSa6nxNjoWoum6B8t8k9D7wLUvk6m1"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/utils/BaseAccount.sol": {
			"keccak256": "0xd9d9a4c7f3189c8b8fa153188096c142f5e3761aacbf983ce3d65640fb3572ed",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://b59ca955c5764341e61c27fb41aa048fe135477e9a16cf22e6c0ed199dc0a3cf",
				"dweb:/ipfs/Qmd7f4ei7wo5CkjnVXff2H7mVUnmHTv2zuCrJUDNBfkDTk"
			]
		},
		".deps/npm/@thirdweb-dev/dynamic-contracts/src/utils/Helpers.sol": {
			"keccak256": "0x78aa2145fcfb195f533e68486fd1617a3b6b5bdf53af1b8fd2ab7211459bc8ba",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://a1ea19d4707c245e5bdad9df43cd89bbc451b08e074b0cb2156a04c0e1e2c6da",
				"dweb:/ipfs/QmVas9dTRJt9HJQomia5ZTBgQanxyz1akyDAkCHRL3ecx7"
			]
		}
	},
	"version": 1
}