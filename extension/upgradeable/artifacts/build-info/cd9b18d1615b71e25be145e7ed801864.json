{
	"id": "cd9b18d1615b71e25be145e7ed801864",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.24",
	"solcLongVersion": "0.8.24+commit.e11b9ed9",
	"input": {
		"language": "Solidity",
		"sources": {
			".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/ContractMetadata.sol": {
				"content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.0;\r\n\r\n/// @author thirdweb\r\n\r\nimport \"../../src/interface/IContractMetadata.sol\";\r\n\r\n/**\r\n *  @author  thirdweb.com\r\n *\r\n *  @title   Contract Metadata\r\n *  @notice  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\r\n *           for you contract.\r\n *           Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\r\n */\r\n\r\nlibrary ContractMetadataStorage {\r\n    /// @custom:storage-location erc7201:contract.metadata.storage\r\n    /// @dev keccak256(abi.encode(uint256(keccak256(\"contract.metadata.storage\")) - 1)) & ~bytes32(uint256(0xff))\r\n    bytes32 public constant CONTRACT_METADATA_STORAGE_POSITION =\r\n        0x4bc804ba64359c0e35e5ed5d90ee596ecaa49a3a930ddcb1470ea0dd625da900;\r\n\r\n    struct Data {\r\n        /// @notice Returns the contract metadata URI.\r\n        string contractURI;\r\n    }\r\n\r\n    function data() internal pure returns (Data storage data_) {\r\n        bytes32 position = CONTRACT_METADATA_STORAGE_POSITION;\r\n        assembly {\r\n            data_.slot := position\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract ContractMetadata is IContractMetadata {\r\n    /**\r\n     *  @notice         Lets a contract admin set the URI for contract-level metadata.\r\n     *  @dev            Caller should be authorized to setup contractURI, e.g. contract admin.\r\n     *                  See {_canSetContractURI}.\r\n     *                  Emits {ContractURIUpdated Event}.\r\n     *\r\n     *  @param _uri     keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")\r\n     */\r\n    function setContractURI(string memory _uri) external override {\r\n        if (!_canSetContractURI()) {\r\n            revert(\"Not authorized\");\r\n        }\r\n\r\n        _setupContractURI(_uri);\r\n    }\r\n\r\n    /// @dev Lets a contract admin set the URI for contract-level metadata.\r\n    function _setupContractURI(string memory _uri) internal {\r\n        string memory prevURI = _contractMetadataStorage().contractURI;\r\n        _contractMetadataStorage().contractURI = _uri;\r\n\r\n        emit ContractURIUpdated(prevURI, _uri);\r\n    }\r\n\r\n    /// @notice Returns the contract metadata URI.\r\n    function contractURI() public view virtual override returns (string memory) {\r\n        return _contractMetadataStorage().contractURI;\r\n    }\r\n\r\n    /// @dev Returns the AccountPermissions storage.\r\n    function _contractMetadataStorage() internal pure returns (ContractMetadataStorage.Data storage data) {\r\n        data = ContractMetadataStorage.data();\r\n    }\r\n\r\n    /// @dev Returns whether contract metadata can be set in the given execution context.\r\n    function _canSetContractURI() internal view virtual returns (bool);\r\n}"
			},
			".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IContractMetadata.sol": {
				"content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.0;\r\n\r\n/// @author thirdweb\r\n\r\n/**\r\n *  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\r\n *  for you contract.\r\n *\r\n *  Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\r\n */\r\n\r\ninterface IContractMetadata {\r\n    /// @dev Returns the metadata URI of the contract.\r\n    function contractURI() external view returns (string memory);\r\n\r\n    /**\r\n     *  @dev Sets contract URI for the storefront-level metadata of the contract.\r\n     *       Only module admin can call this function.\r\n     */\r\n    function setContractURI(string calldata _uri) external;\r\n\r\n    /// @dev Emitted when the contract URI is updated.\r\n    event ContractURIUpdated(string prevURI, string newURI);\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/ContractMetadata.sol": {
				"ContractMetadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "string",
									"name": "prevURI",
									"type": "string"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "newURI",
									"type": "string"
								}
							],
							"name": "ContractURIUpdated",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "contractURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "_uri",
									"type": "string"
								}
							],
							"name": "setContractURI",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"ContractURIUpdated(string,string)": {
								"details": "Emitted when the contract URI is updated."
							}
						},
						"kind": "dev",
						"methods": {
							"setContractURI(string)": {
								"details": "Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.",
								"params": {
									"_uri": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"contractURI()": "e8a3d485",
							"setContractURI(string)": "938e3d7b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ContractURIUpdated(string,string)\":{\"details\":\"Emitted when the contract URI is updated.\"}},\"kind\":\"dev\",\"methods\":{\"setContractURI(string)\":{\"details\":\"Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.\",\"params\":{\"_uri\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"contractURI()\":{\"notice\":\"Returns the contract metadata URI.\"},\"setContractURI(string)\":{\"notice\":\"Lets a contract admin set the URI for contract-level metadata.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/ContractMetadata.sol\":\"ContractMetadata\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/ContractMetadata.sol\":{\"keccak256\":\"0xf39f4a9b5205086cce817c972e99cbbe8650b8fb9cc95b62845ea4cde3fa2844\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://274b22cead06dc42a56c1dcf450a70036c9fe59c3326d415c852a5cc3a4cbc8e\",\"dweb:/ipfs/QmSdA68Qmby5rAdr3JQzCw4EnfzvRLYfDQrgFH6rCTd1Wq\"]},\".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IContractMetadata.sol\":{\"keccak256\":\"0x5952d0586b962b2023a9ab6375496c90067fcced4f7f6283ea6b3026f2f14983\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c53bc124b874d0db67ff2c96cdd8a2a375557446f3a2a026c88a334db2250c34\",\"dweb:/ipfs/QmR7to5196g8Py4qa4GuFH4DeSLWHgyZzFa17biRosrrpM\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"contractURI()": {
								"notice": "Returns the contract metadata URI."
							},
							"setContractURI(string)": {
								"notice": "Lets a contract admin set the URI for contract-level metadata."
							}
						},
						"version": 1
					}
				},
				"ContractMetadataStorage": {
					"abi": [
						{
							"inputs": [],
							"name": "CONTRACT_METADATA_STORAGE_POSITION",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "thirdweb.com",
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"CONTRACT_METADATA_STORAGE_POSITION": {
								"custom:storage-location": "erc7201:contract.metadata.storage",
								"details": "keccak256(abi.encode(uint256(keccak256(\"contract.metadata.storage\")) - 1)) & ~bytes32(uint256(0xff))"
							}
						},
						"title": "Contract Metadata",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/ContractMetadata.sol\":505:1186  library ContractMetadataStorage {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/ContractMetadata.sol\":505:1186  library ContractMetadataStorage {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x7e837fbf\n      eq\n      tag_2\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/ContractMetadata.sol\":727:863  bytes32 public constant CONTRACT_METADATA_STORAGE_POSITION =... */\n    tag_2:\n      tag_3\n      tag_4\n      jump\t// in\n    tag_3:\n      mload(0x40)\n      tag_5\n      swap2\n      swap1\n      tag_6\n      jump\t// in\n    tag_5:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n    tag_4:\n        /* \".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/ContractMetadata.sol\":797:863  0x4bc804ba64359c0e35e5ed5d90ee596ecaa49a3a930ddcb1470ea0dd625da900 */\n      0x4bc804ba64359c0e35e5ed5d90ee596ecaa49a3a930ddcb1470ea0dd625da900\n        /* \".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/ContractMetadata.sol\":727:863  bytes32 public constant CONTRACT_METADATA_STORAGE_POSITION =... */\n      0x00\n      shl\n      dup2\n      jump\t// out\n        /* \"#utility.yul\":7:84   */\n    tag_7:\n        /* \"#utility.yul\":44:51   */\n      0x00\n        /* \"#utility.yul\":73:78   */\n      dup2\n        /* \"#utility.yul\":62:78   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:84   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":90:216   */\n    tag_8:\n        /* \"#utility.yul\":185:209   */\n      tag_12\n        /* \"#utility.yul\":203:208   */\n      dup2\n        /* \"#utility.yul\":185:209   */\n      tag_7\n      jump\t// in\n    tag_12:\n        /* \"#utility.yul\":180:183   */\n      dup3\n        /* \"#utility.yul\":173:210   */\n      mstore\n        /* \"#utility.yul\":90:216   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":222:460   */\n    tag_6:\n        /* \"#utility.yul\":323:327   */\n      0x00\n        /* \"#utility.yul\":361:363   */\n      0x20\n        /* \"#utility.yul\":350:359   */\n      dup3\n        /* \"#utility.yul\":346:364   */\n      add\n        /* \"#utility.yul\":338:364   */\n      swap1\n      pop\n        /* \"#utility.yul\":374:453   */\n      tag_14\n        /* \"#utility.yul\":450:451   */\n      0x00\n        /* \"#utility.yul\":439:448   */\n      dup4\n        /* \"#utility.yul\":435:452   */\n      add\n        /* \"#utility.yul\":426:432   */\n      dup5\n        /* \"#utility.yul\":374:453   */\n      tag_8\n      jump\t// in\n    tag_14:\n        /* \"#utility.yul\":222:460   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220e55397d0316c8c53f97037c8ce5a9a695f2e6e9b0eed73e590cfbc352c399b1764736f6c63430008180033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60d961004d600b8282823980515f1a607314610041577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106032575f3560e01c80637e837fbf146036575b5f80fd5b603c6050565b60405160479190608c565b60405180910390f35b7f4bc804ba64359c0e35e5ed5d90ee596ecaa49a3a930ddcb1470ea0dd625da9005f1b81565b5f819050919050565b6086816076565b82525050565b5f602082019050609d5f830184607f565b9291505056fea2646970667358221220e55397d0316c8c53f97037c8ce5a9a695f2e6e9b0eed73e590cfbc352c399b1764736f6c63430008180033",
							"opcodes": "PUSH1 0xD9 PUSH2 0x4D PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH2 0x41 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x32 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7E837FBF EQ PUSH1 0x36 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x3C PUSH1 0x50 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x47 SWAP2 SWAP1 PUSH1 0x8C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0x4BC804BA64359C0E35E5ED5D90EE596ECAA49A3A930DDCB1470EA0DD625DA900 PUSH0 SHL DUP2 JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x86 DUP2 PUSH1 0x76 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x9D PUSH0 DUP4 ADD DUP5 PUSH1 0x7F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 MSTORE8 SWAP8 0xD0 BALANCE PUSH13 0x8C53F97037C8CE5A9A695F2E6E SWAP12 0xE 0xED PUSH20 0xE590CFBC352C399B1764736F6C63430008180033 ",
							"sourceMap": "505:681:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@CONTRACT_METADATA_STORAGE_POSITION_7": {
									"entryPoint": 80,
									"id": 7,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_encode_t_bytes32_to_t_bytes32_fromStack_library": {
									"entryPoint": 127,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_library_reversed": {
									"entryPoint": 140,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_bytes32": {
									"entryPoint": 118,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:463:2",
										"nodeType": "YulBlock",
										"src": "0:463:2",
										"statements": [
											{
												"body": {
													"nativeSrc": "52:32:2",
													"nodeType": "YulBlock",
													"src": "52:32:2",
													"statements": [
														{
															"nativeSrc": "62:16:2",
															"nodeType": "YulAssignment",
															"src": "62:16:2",
															"value": {
																"name": "value",
																"nativeSrc": "73:5:2",
																"nodeType": "YulIdentifier",
																"src": "73:5:2"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "62:7:2",
																	"nodeType": "YulIdentifier",
																	"src": "62:7:2"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes32",
												"nativeSrc": "7:77:2",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "34:5:2",
														"nodeType": "YulTypedName",
														"src": "34:5:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "44:7:2",
														"nodeType": "YulTypedName",
														"src": "44:7:2",
														"type": ""
													}
												],
												"src": "7:77:2"
											},
											{
												"body": {
													"nativeSrc": "163:53:2",
													"nodeType": "YulBlock",
													"src": "163:53:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "180:3:2",
																		"nodeType": "YulIdentifier",
																		"src": "180:3:2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "203:5:2",
																				"nodeType": "YulIdentifier",
																				"src": "203:5:2"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bytes32",
																			"nativeSrc": "185:17:2",
																			"nodeType": "YulIdentifier",
																			"src": "185:17:2"
																		},
																		"nativeSrc": "185:24:2",
																		"nodeType": "YulFunctionCall",
																		"src": "185:24:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "173:6:2",
																	"nodeType": "YulIdentifier",
																	"src": "173:6:2"
																},
																"nativeSrc": "173:37:2",
																"nodeType": "YulFunctionCall",
																"src": "173:37:2"
															},
															"nativeSrc": "173:37:2",
															"nodeType": "YulExpressionStatement",
															"src": "173:37:2"
														}
													]
												},
												"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack_library",
												"nativeSrc": "90:126:2",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "151:5:2",
														"nodeType": "YulTypedName",
														"src": "151:5:2",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "158:3:2",
														"nodeType": "YulTypedName",
														"src": "158:3:2",
														"type": ""
													}
												],
												"src": "90:126:2"
											},
											{
												"body": {
													"nativeSrc": "328:132:2",
													"nodeType": "YulBlock",
													"src": "328:132:2",
													"statements": [
														{
															"nativeSrc": "338:26:2",
															"nodeType": "YulAssignment",
															"src": "338:26:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "350:9:2",
																		"nodeType": "YulIdentifier",
																		"src": "350:9:2"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "361:2:2",
																		"nodeType": "YulLiteral",
																		"src": "361:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "346:3:2",
																	"nodeType": "YulIdentifier",
																	"src": "346:3:2"
																},
																"nativeSrc": "346:18:2",
																"nodeType": "YulFunctionCall",
																"src": "346:18:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "338:4:2",
																	"nodeType": "YulIdentifier",
																	"src": "338:4:2"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "426:6:2",
																		"nodeType": "YulIdentifier",
																		"src": "426:6:2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "439:9:2",
																				"nodeType": "YulIdentifier",
																				"src": "439:9:2"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "450:1:2",
																				"nodeType": "YulLiteral",
																				"src": "450:1:2",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "435:3:2",
																			"nodeType": "YulIdentifier",
																			"src": "435:3:2"
																		},
																		"nativeSrc": "435:17:2",
																		"nodeType": "YulFunctionCall",
																		"src": "435:17:2"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack_library",
																	"nativeSrc": "374:51:2",
																	"nodeType": "YulIdentifier",
																	"src": "374:51:2"
																},
																"nativeSrc": "374:79:2",
																"nodeType": "YulFunctionCall",
																"src": "374:79:2"
															},
															"nativeSrc": "374:79:2",
															"nodeType": "YulExpressionStatement",
															"src": "374:79:2"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_library_reversed",
												"nativeSrc": "222:238:2",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "300:9:2",
														"nodeType": "YulTypedName",
														"src": "300:9:2",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "312:6:2",
														"nodeType": "YulTypedName",
														"src": "312:6:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "323:4:2",
														"nodeType": "YulTypedName",
														"src": "323:4:2",
														"type": ""
													}
												],
												"src": "222:238:2"
											}
										]
									},
									"contents": "{\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack_library(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_library_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack_library(value0,  add(headStart, 0))\n\n    }\n\n}\n",
									"id": 2,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600436106032575f3560e01c80637e837fbf146036575b5f80fd5b603c6050565b60405160479190608c565b60405180910390f35b7f4bc804ba64359c0e35e5ed5d90ee596ecaa49a3a930ddcb1470ea0dd625da9005f1b81565b5f819050919050565b6086816076565b82525050565b5f602082019050609d5f830184607f565b9291505056fea2646970667358221220e55397d0316c8c53f97037c8ce5a9a695f2e6e9b0eed73e590cfbc352c399b1764736f6c63430008180033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x32 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7E837FBF EQ PUSH1 0x36 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x3C PUSH1 0x50 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x47 SWAP2 SWAP1 PUSH1 0x8C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0x4BC804BA64359C0E35E5ED5D90EE596ECAA49A3A930DDCB1470EA0DD625DA900 PUSH0 SHL DUP2 JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x86 DUP2 PUSH1 0x76 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x9D PUSH0 DUP4 ADD DUP5 PUSH1 0x7F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 MSTORE8 SWAP8 0xD0 BALANCE PUSH13 0x8C53F97037C8CE5A9A695F2E6E SWAP12 0xE 0xED PUSH20 0xE590CFBC352C399B1764736F6C63430008180033 ",
							"sourceMap": "505:681:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;727:136;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;797:66;727:136;;;:::o;7:77:2:-;44:7;73:5;62:16;;7:77;;;:::o;90:126::-;185:24;203:5;185:24;:::i;:::-;180:3;173:37;90:126;;:::o;222:238::-;323:4;361:2;350:9;346:18;338:26;;374:79;450:1;439:9;435:17;426:6;374:79;:::i;:::-;222:238;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "43400",
								"executionCost": "119",
								"totalCost": "43519"
							},
							"external": {
								"CONTRACT_METADATA_STORAGE_POSITION()": "292"
							},
							"internal": {
								"data()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 505,
									"end": 1186,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "PUSH",
									"source": 0,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "PUSH",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 505,
									"end": 1186,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e55397d0316c8c53f97037c8ce5a9a695f2e6e9b0eed73e590cfbc352c399b1764736f6c63430008180033",
									".code": [
										{
											"begin": 505,
											"end": 1186,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 505,
											"end": 1186,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 505,
											"end": 1186,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 505,
											"end": 1186,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 505,
											"end": 1186,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 505,
											"end": 1186,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 505,
											"end": 1186,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 505,
											"end": 1186,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 505,
											"end": 1186,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 505,
											"end": 1186,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 505,
											"end": 1186,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 505,
											"end": 1186,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 505,
											"end": 1186,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 505,
											"end": 1186,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 505,
											"end": 1186,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 505,
											"end": 1186,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 505,
											"end": 1186,
											"name": "PUSH",
											"source": 0,
											"value": "7E837FBF"
										},
										{
											"begin": 505,
											"end": 1186,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 505,
											"end": 1186,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 505,
											"end": 1186,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 505,
											"end": 1186,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 505,
											"end": 1186,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 505,
											"end": 1186,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 505,
											"end": 1186,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 505,
											"end": 1186,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 727,
											"end": 863,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 727,
											"end": 863,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 727,
											"end": 863,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 727,
											"end": 863,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 727,
											"end": 863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 727,
											"end": 863,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 727,
											"end": 863,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 727,
											"end": 863,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 727,
											"end": 863,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 727,
											"end": 863,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 727,
											"end": 863,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 727,
											"end": 863,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 727,
											"end": 863,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 727,
											"end": 863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 727,
											"end": 863,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 727,
											"end": 863,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 727,
											"end": 863,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 727,
											"end": 863,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 727,
											"end": 863,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 727,
											"end": 863,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 727,
											"end": 863,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 727,
											"end": 863,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 727,
											"end": 863,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 727,
											"end": 863,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 727,
											"end": 863,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 797,
											"end": 863,
											"name": "PUSH",
											"source": 0,
											"value": "4BC804BA64359C0E35E5ED5D90EE596ECAA49A3A930DDCB1470EA0DD625DA900"
										},
										{
											"begin": 727,
											"end": 863,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 727,
											"end": 863,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 727,
											"end": 863,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 727,
											"end": 863,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7,
											"end": 84,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 7,
											"end": 84,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 44,
											"end": 51,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 73,
											"end": 78,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 62,
											"end": 78,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 62,
											"end": 78,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7,
											"end": 84,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7,
											"end": 84,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7,
											"end": 84,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7,
											"end": 84,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 90,
											"end": 216,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 90,
											"end": 216,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 185,
											"end": 209,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 203,
											"end": 208,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 185,
											"end": 209,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 185,
											"end": 209,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 185,
											"end": 209,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 185,
											"end": 209,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 180,
											"end": 183,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 173,
											"end": 210,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 90,
											"end": 216,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 90,
											"end": 216,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 90,
											"end": 216,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 222,
											"end": 460,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 222,
											"end": 460,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 323,
											"end": 327,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 361,
											"end": 363,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 350,
											"end": 359,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 346,
											"end": 364,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 338,
											"end": 364,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 338,
											"end": 364,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 374,
											"end": 453,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 450,
											"end": 451,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 439,
											"end": 448,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 435,
											"end": 452,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 426,
											"end": 432,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 374,
											"end": 453,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 374,
											"end": 453,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 374,
											"end": 453,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 374,
											"end": 453,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 222,
											"end": 460,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 222,
											"end": 460,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 222,
											"end": 460,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 222,
											"end": 460,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 222,
											"end": 460,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										}
									]
								}
							},
							"sourceList": [
								".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/ContractMetadata.sol",
								".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IContractMetadata.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"CONTRACT_METADATA_STORAGE_POSITION()": "7e837fbf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CONTRACT_METADATA_STORAGE_POSITION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"thirdweb.com\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"CONTRACT_METADATA_STORAGE_POSITION\":{\"custom:storage-location\":\"erc7201:contract.metadata.storage\",\"details\":\"keccak256(abi.encode(uint256(keccak256(\\\"contract.metadata.storage\\\")) - 1)) & ~bytes32(uint256(0xff))\"}},\"title\":\"Contract Metadata\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI           for you contract.           Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/ContractMetadata.sol\":\"ContractMetadataStorage\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/ContractMetadata.sol\":{\"keccak256\":\"0xf39f4a9b5205086cce817c972e99cbbe8650b8fb9cc95b62845ea4cde3fa2844\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://274b22cead06dc42a56c1dcf450a70036c9fe59c3326d415c852a5cc3a4cbc8e\",\"dweb:/ipfs/QmSdA68Qmby5rAdr3JQzCw4EnfzvRLYfDQrgFH6rCTd1Wq\"]},\".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IContractMetadata.sol\":{\"keccak256\":\"0x5952d0586b962b2023a9ab6375496c90067fcced4f7f6283ea6b3026f2f14983\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c53bc124b874d0db67ff2c96cdd8a2a375557446f3a2a026c88a334db2250c34\",\"dweb:/ipfs/QmR7to5196g8Py4qa4GuFH4DeSLWHgyZzFa17biRosrrpM\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI           for you contract.           Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.",
						"version": 1
					}
				}
			},
			".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IContractMetadata.sol": {
				"IContractMetadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "string",
									"name": "prevURI",
									"type": "string"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "newURI",
									"type": "string"
								}
							],
							"name": "ContractURIUpdated",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "contractURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "_uri",
									"type": "string"
								}
							],
							"name": "setContractURI",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"ContractURIUpdated(string,string)": {
								"details": "Emitted when the contract URI is updated."
							}
						},
						"kind": "dev",
						"methods": {
							"contractURI()": {
								"details": "Returns the metadata URI of the contract."
							},
							"setContractURI(string)": {
								"details": "Sets contract URI for the storefront-level metadata of the contract.       Only module admin can call this function."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"contractURI()": "e8a3d485",
							"setContractURI(string)": "938e3d7b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ContractURIUpdated(string,string)\":{\"details\":\"Emitted when the contract URI is updated.\"}},\"kind\":\"dev\",\"methods\":{\"contractURI()\":{\"details\":\"Returns the metadata URI of the contract.\"},\"setContractURI(string)\":{\"details\":\"Sets contract URI for the storefront-level metadata of the contract.       Only module admin can call this function.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI  for you contract.  Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IContractMetadata.sol\":\"IContractMetadata\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IContractMetadata.sol\":{\"keccak256\":\"0x5952d0586b962b2023a9ab6375496c90067fcced4f7f6283ea6b3026f2f14983\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c53bc124b874d0db67ff2c96cdd8a2a375557446f3a2a026c88a334db2250c34\",\"dweb:/ipfs/QmR7to5196g8Py4qa4GuFH4DeSLWHgyZzFa17biRosrrpM\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI  for you contract.  Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.",
						"version": 1
					}
				}
			}
		},
		"sources": {
			".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/ContractMetadata.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/ContractMetadata.sol",
					"exportedSymbols": {
						"ContractMetadata": [
							104
						],
						"ContractMetadataStorage": [
							24
						],
						"IContractMetadata": [
							127
						]
					},
					"id": 105,
					"license": "Apache-2.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "40:23:0"
						},
						{
							"absolutePath": ".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IContractMetadata.sol",
							"file": "../../src/interface/IContractMetadata.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 128,
							"src": "91:51:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ContractMetadataStorage",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "146:355:0",
								"text": "  @author  thirdweb.com\n  @title   Contract Metadata\n  @notice  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\n           for you contract.\n           Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea."
							},
							"fullyImplemented": true,
							"id": 24,
							"linearizedBaseContracts": [
								24
							],
							"name": "ContractMetadataStorage",
							"nameLocation": "513:23:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"documentation": {
										"id": 4,
										"nodeType": "StructuredDocumentation",
										"src": "544:177:0",
										"text": "@custom:storage-location erc7201:contract.metadata.storage\n @dev keccak256(abi.encode(uint256(keccak256(\"contract.metadata.storage\")) - 1)) & ~bytes32(uint256(0xff))"
									},
									"functionSelector": "7e837fbf",
									"id": 7,
									"mutability": "constant",
									"name": "CONTRACT_METADATA_STORAGE_POSITION",
									"nameLocation": "751:34:0",
									"nodeType": "VariableDeclaration",
									"scope": 24,
									"src": "727:136:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 5,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "727:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307834626338303462613634333539633065333565356564356439306565353936656361613439613361393330646463623134373065613064643632356461393030",
										"id": 6,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "797:66:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_34276865688789406119966255279305065088168394928171641044625848011006007945472_by_1",
											"typeString": "int_const 3427...(69 digits omitted)...5472"
										},
										"value": "0x4bc804ba64359c0e35e5ed5d90ee596ecaa49a3a930ddcb1470ea0dd625da900"
									},
									"visibility": "public"
								},
								{
									"canonicalName": "ContractMetadataStorage.Data",
									"id": 11,
									"members": [
										{
											"constant": false,
											"id": 10,
											"mutability": "mutable",
											"name": "contractURI",
											"nameLocation": "958:11:0",
											"nodeType": "VariableDeclaration",
											"scope": 11,
											"src": "951:18:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 9,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "951:6:0",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Data",
									"nameLocation": "879:4:0",
									"nodeType": "StructDefinition",
									"scope": 24,
									"src": "872:105:0",
									"visibility": "public"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "1044:139:0",
										"statements": [
											{
												"assignments": [
													18
												],
												"declarations": [
													{
														"constant": false,
														"id": 18,
														"mutability": "mutable",
														"name": "position",
														"nameLocation": "1063:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 22,
														"src": "1055:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 17,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "1055:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 20,
												"initialValue": {
													"id": 19,
													"name": "CONTRACT_METADATA_STORAGE_POSITION",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1074:34:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1055:53:0"
											},
											{
												"AST": {
													"nativeSrc": "1128:48:0",
													"nodeType": "YulBlock",
													"src": "1128:48:0",
													"statements": [
														{
															"nativeSrc": "1143:22:0",
															"nodeType": "YulAssignment",
															"src": "1143:22:0",
															"value": {
																"name": "position",
																"nativeSrc": "1157:8:0",
																"nodeType": "YulIdentifier",
																"src": "1157:8:0"
															},
															"variableNames": [
																{
																	"name": "data_.slot",
																	"nativeSrc": "1143:10:0",
																	"nodeType": "YulIdentifier",
																	"src": "1143:10:0"
																}
															]
														}
													]
												},
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 15,
														"isOffset": false,
														"isSlot": true,
														"src": "1143:10:0",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 18,
														"isOffset": false,
														"isSlot": false,
														"src": "1157:8:0",
														"valueSize": 1
													}
												],
												"id": 21,
												"nodeType": "InlineAssembly",
												"src": "1119:57:0"
											}
										]
									},
									"id": 23,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "data",
									"nameLocation": "994:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "998:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 15,
												"mutability": "mutable",
												"name": "data_",
												"nameLocation": "1037:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "1024:18:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Data_$11_storage_ptr",
													"typeString": "struct ContractMetadataStorage.Data"
												},
												"typeName": {
													"id": 14,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 13,
														"name": "Data",
														"nameLocations": [
															"1024:4:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 11,
														"src": "1024:4:0"
													},
													"referencedDeclaration": 11,
													"src": "1024:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Data_$11_storage_ptr",
														"typeString": "struct ContractMetadataStorage.Data"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1023:20:0"
									},
									"scope": 24,
									"src": "985:198:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 105,
							"src": "505:681:0",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 25,
										"name": "IContractMetadata",
										"nameLocations": [
											"1228:17:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 127,
										"src": "1228:17:0"
									},
									"id": 26,
									"nodeType": "InheritanceSpecifier",
									"src": "1228:17:0"
								}
							],
							"canonicalName": "ContractMetadata",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": false,
							"id": 104,
							"linearizedBaseContracts": [
								104,
								127
							],
							"name": "ContractMetadata",
							"nameLocation": "1208:16:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										119
									],
									"body": {
										"id": 46,
										"nodeType": "Block",
										"src": "1720:132:0",
										"statements": [
											{
												"condition": {
													"id": 35,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "1735:21:0",
													"subExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 33,
															"name": "_canSetContractURI",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 103,
															"src": "1736:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																"typeString": "function () view returns (bool)"
															}
														},
														"id": 34,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1736:20:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 41,
												"nodeType": "IfStatement",
												"src": "1731:78:0",
												"trueBody": {
													"id": 40,
													"nodeType": "Block",
													"src": "1758:51:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"hexValue": "4e6f7420617574686f72697a6564",
																		"id": 37,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1780:16:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36",
																			"typeString": "literal_string \"Not authorized\""
																		},
																		"value": "Not authorized"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36",
																			"typeString": "literal_string \"Not authorized\""
																		}
																	],
																	"id": 36,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "1773:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 38,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1773:24:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 39,
															"nodeType": "ExpressionStatement",
															"src": "1773:24:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 43,
															"name": "_uri",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 29,
															"src": "1839:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 42,
														"name": "_setupContractURI",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 71,
														"src": "1821:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory)"
														}
													},
													"id": 44,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1821:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 45,
												"nodeType": "ExpressionStatement",
												"src": "1821:23:0"
											}
										]
									},
									"documentation": {
										"id": 27,
										"nodeType": "StructuredDocumentation",
										"src": "1253:399:0",
										"text": "  @notice         Lets a contract admin set the URI for contract-level metadata.\n  @dev            Caller should be authorized to setup contractURI, e.g. contract admin.\n                  See {_canSetContractURI}.\n                  Emits {ContractURIUpdated Event}.\n  @param _uri     keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
									},
									"functionSelector": "938e3d7b",
									"id": 47,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setContractURI",
									"nameLocation": "1667:14:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 31,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1711:8:0"
									},
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "_uri",
												"nameLocation": "1696:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 47,
												"src": "1682:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 28,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1682:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1681:20:0"
									},
									"returnParameters": {
										"id": 32,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1720:0:0"
									},
									"scope": 104,
									"src": "1658:194:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 70,
										"nodeType": "Block",
										"src": "1993:188:0",
										"statements": [
											{
												"assignments": [
													54
												],
												"declarations": [
													{
														"constant": false,
														"id": 54,
														"mutability": "mutable",
														"name": "prevURI",
														"nameLocation": "2018:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 70,
														"src": "2004:21:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 53,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2004:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 58,
												"initialValue": {
													"expression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 55,
															"name": "_contractMetadataStorage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 97,
															"src": "2028:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_Data_$11_storage_ptr_$",
																"typeString": "function () pure returns (struct ContractMetadataStorage.Data storage pointer)"
															}
														},
														"id": 56,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2028:26:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Data_$11_storage_ptr",
															"typeString": "struct ContractMetadataStorage.Data storage pointer"
														}
													},
													"id": 57,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2055:11:0",
													"memberName": "contractURI",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 10,
													"src": "2028:38:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2004:62:0"
											},
											{
												"expression": {
													"id": 63,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 59,
																"name": "_contractMetadataStorage",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 97,
																"src": "2077:24:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_Data_$11_storage_ptr_$",
																	"typeString": "function () pure returns (struct ContractMetadataStorage.Data storage pointer)"
																}
															},
															"id": 60,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2077:26:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Data_$11_storage_ptr",
																"typeString": "struct ContractMetadataStorage.Data storage pointer"
															}
														},
														"id": 61,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "2104:11:0",
														"memberName": "contractURI",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 10,
														"src": "2077:38:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 62,
														"name": "_uri",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 50,
														"src": "2118:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2077:45:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 64,
												"nodeType": "ExpressionStatement",
												"src": "2077:45:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 66,
															"name": "prevURI",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 54,
															"src": "2159:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 67,
															"name": "_uri",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 50,
															"src": "2168:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 65,
														"name": "ContractURIUpdated",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 126,
														"src": "2140:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 68,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2140:33:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 69,
												"nodeType": "EmitStatement",
												"src": "2135:38:0"
											}
										]
									},
									"documentation": {
										"id": 48,
										"nodeType": "StructuredDocumentation",
										"src": "1860:71:0",
										"text": "@dev Lets a contract admin set the URI for contract-level metadata."
									},
									"id": 71,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setupContractURI",
									"nameLocation": "1946:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "_uri",
												"nameLocation": "1978:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 71,
												"src": "1964:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 49,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1964:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1963:20:0"
									},
									"returnParameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1993:0:0"
									},
									"scope": 104,
									"src": "1937:244:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										113
									],
									"body": {
										"id": 82,
										"nodeType": "Block",
										"src": "2317:64:0",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 78,
															"name": "_contractMetadataStorage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 97,
															"src": "2335:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_Data_$11_storage_ptr_$",
																"typeString": "function () pure returns (struct ContractMetadataStorage.Data storage pointer)"
															}
														},
														"id": 79,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2335:26:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Data_$11_storage_ptr",
															"typeString": "struct ContractMetadataStorage.Data storage pointer"
														}
													},
													"id": 80,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2362:11:0",
													"memberName": "contractURI",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 10,
													"src": "2335:38:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 77,
												"id": 81,
												"nodeType": "Return",
												"src": "2328:45:0"
											}
										]
									},
									"documentation": {
										"id": 72,
										"nodeType": "StructuredDocumentation",
										"src": "2189:46:0",
										"text": "@notice Returns the contract metadata URI."
									},
									"functionSelector": "e8a3d485",
									"id": 83,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "contractURI",
									"nameLocation": "2250:11:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 74,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2284:8:0"
									},
									"parameters": {
										"id": 73,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2261:2:0"
									},
									"returnParameters": {
										"id": 77,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 76,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 83,
												"src": "2302:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 75,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2302:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2301:15:0"
									},
									"scope": 104,
									"src": "2241:140:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 96,
										"nodeType": "Block",
										"src": "2545:56:0",
										"statements": [
											{
												"expression": {
													"id": 94,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 90,
														"name": "data",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 88,
														"src": "2556:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Data_$11_storage_ptr",
															"typeString": "struct ContractMetadataStorage.Data storage pointer"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"id": 91,
																"name": "ContractMetadataStorage",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 24,
																"src": "2563:23:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ContractMetadataStorage_$24_$",
																	"typeString": "type(library ContractMetadataStorage)"
																}
															},
															"id": 92,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2587:4:0",
															"memberName": "data",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 23,
															"src": "2563:28:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_Data_$11_storage_ptr_$",
																"typeString": "function () pure returns (struct ContractMetadataStorage.Data storage pointer)"
															}
														},
														"id": 93,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2563:30:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Data_$11_storage_ptr",
															"typeString": "struct ContractMetadataStorage.Data storage pointer"
														}
													},
													"src": "2556:37:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Data_$11_storage_ptr",
														"typeString": "struct ContractMetadataStorage.Data storage pointer"
													}
												},
												"id": 95,
												"nodeType": "ExpressionStatement",
												"src": "2556:37:0"
											}
										]
									},
									"documentation": {
										"id": 84,
										"nodeType": "StructuredDocumentation",
										"src": "2389:48:0",
										"text": "@dev Returns the AccountPermissions storage."
									},
									"id": 97,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contractMetadataStorage",
									"nameLocation": "2452:24:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 85,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2476:2:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 88,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2539:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 97,
												"src": "2502:41:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Data_$11_storage_ptr",
													"typeString": "struct ContractMetadataStorage.Data"
												},
												"typeName": {
													"id": 87,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 86,
														"name": "ContractMetadataStorage.Data",
														"nameLocations": [
															"2502:23:0",
															"2526:4:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 11,
														"src": "2502:28:0"
													},
													"referencedDeclaration": 11,
													"src": "2502:28:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Data_$11_storage_ptr",
														"typeString": "struct ContractMetadataStorage.Data"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2501:43:0"
									},
									"scope": 104,
									"src": "2443:158:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"documentation": {
										"id": 98,
										"nodeType": "StructuredDocumentation",
										"src": "2609:85:0",
										"text": "@dev Returns whether contract metadata can be set in the given execution context."
									},
									"id": 103,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "_canSetContractURI",
									"nameLocation": "2709:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 99,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2727:2:0"
									},
									"returnParameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "2761:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 100,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2761:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2760:6:0"
									},
									"scope": 104,
									"src": "2700:67:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 105,
							"src": "1190:1580:0",
							"usedErrors": [],
							"usedEvents": [
								126
							]
						}
					],
					"src": "40:2730:0"
				},
				"id": 0
			},
			".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IContractMetadata.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IContractMetadata.sol",
					"exportedSymbols": {
						"IContractMetadata": [
							127
						]
					},
					"id": 128,
					"license": "Apache-2.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 106,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "40:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IContractMetadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 107,
								"nodeType": "StructuredDocumentation",
								"src": "91:269:1",
								"text": "  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\n  for you contract.\n  Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea."
							},
							"fullyImplemented": false,
							"id": 127,
							"linearizedBaseContracts": [
								127
							],
							"name": "IContractMetadata",
							"nameLocation": "374:17:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 108,
										"nodeType": "StructuredDocumentation",
										"src": "399:50:1",
										"text": "@dev Returns the metadata URI of the contract."
									},
									"functionSelector": "e8a3d485",
									"id": 113,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "contractURI",
									"nameLocation": "464:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 109,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "475:2:1"
									},
									"returnParameters": {
										"id": 112,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 111,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 113,
												"src": "501:13:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 110,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "501:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "500:15:1"
									},
									"scope": 127,
									"src": "455:61:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 114,
										"nodeType": "StructuredDocumentation",
										"src": "524:151:1",
										"text": "  @dev Sets contract URI for the storefront-level metadata of the contract.\n       Only module admin can call this function."
									},
									"functionSelector": "938e3d7b",
									"id": 119,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setContractURI",
									"nameLocation": "690:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 116,
												"mutability": "mutable",
												"name": "_uri",
												"nameLocation": "721:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "705:20:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 115,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "705:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "704:22:1"
									},
									"returnParameters": {
										"id": 118,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "735:0:1"
									},
									"scope": 127,
									"src": "681:55:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 120,
										"nodeType": "StructuredDocumentation",
										"src": "744:50:1",
										"text": "@dev Emitted when the contract URI is updated."
									},
									"eventSelector": "c9c7c3fe08b88b4df9d4d47ef47d2c43d55c025a0ba88ca442580ed9e7348a16",
									"id": 126,
									"name": "ContractURIUpdated",
									"nameLocation": "806:18:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 122,
												"indexed": false,
												"mutability": "mutable",
												"name": "prevURI",
												"nameLocation": "832:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "825:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 121,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "825:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 124,
												"indexed": false,
												"mutability": "mutable",
												"name": "newURI",
												"nameLocation": "848:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "841:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 123,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "841:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "824:31:1"
									},
									"src": "800:56:1"
								}
							],
							"scope": 128,
							"src": "364:495:1",
							"usedErrors": [],
							"usedEvents": [
								126
							]
						}
					],
					"src": "40:819:1"
				},
				"id": 1
			}
		}
	}
}