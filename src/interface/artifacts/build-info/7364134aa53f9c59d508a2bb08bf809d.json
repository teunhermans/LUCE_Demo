{
	"id": "7364134aa53f9c59d508a2bb08bf809d",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.24",
	"solcLongVersion": "0.8.24+commit.e11b9ed9",
	"input": {
		"language": "Solidity",
		"sources": {
			".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IEntryPoint.sol": {
				"content": "/**\r\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\r\n ** Only one instance required on each chain.\r\n **/\r\n// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\n/* solhint-disable avoid-low-level-calls */\r\n/* solhint-disable no-inline-assembly */\r\n/* solhint-disable reason-string */\r\n\r\nimport \"../../extension/upgradeable/UserOperation.sol\";\r\nimport \"./IStakeManager.sol\";\r\nimport \"./IAggregator.sol\";\r\nimport \"./INonceManager.sol\";\r\n\r\ninterface IEntryPoint is IStakeManager, INonceManager {\r\n    /***\r\n     * An event emitted after each successful request\r\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\r\n     * @param sender - the account that generates this request.\r\n     * @param paymaster - if non-null, the paymaster that pays for this request.\r\n     * @param nonce - the nonce value from the request.\r\n     * @param success - true if the sender transaction succeeded, false if reverted.\r\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\r\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\r\n     */\r\n    event UserOperationEvent(\r\n        bytes32 indexed userOpHash,\r\n        address indexed sender,\r\n        address indexed paymaster,\r\n        uint256 nonce,\r\n        bool success,\r\n        uint256 actualGasCost,\r\n        uint256 actualGasUsed\r\n    );\r\n\r\n    /**\r\n     * account \"sender\" was deployed.\r\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\r\n     * @param sender the account that is deployed\r\n     * @param factory the factory used to deploy this account (in the initCode)\r\n     * @param paymaster the paymaster used by this UserOp\r\n     */\r\n    event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\r\n\r\n    /**\r\n     * An event emitted if the UserOperation \"callData\" reverted with non-zero length\r\n     * @param userOpHash the request unique identifier.\r\n     * @param sender the sender of this request\r\n     * @param nonce the nonce used in the request\r\n     * @param revertReason - the return bytes from the (reverted) call to \"callData\".\r\n     */\r\n    event UserOperationRevertReason(\r\n        bytes32 indexed userOpHash,\r\n        address indexed sender,\r\n        uint256 nonce,\r\n        bytes revertReason\r\n    );\r\n\r\n    /**\r\n     * an event emitted by handleOps(), before starting the execution loop.\r\n     * any event emitted before this event, is part of the validation.\r\n     */\r\n    event BeforeExecution();\r\n\r\n    /**\r\n     * signature aggregator used by the following UserOperationEvents within this bundle.\r\n     */\r\n    event SignatureAggregatorChanged(address indexed aggregator);\r\n\r\n    /**\r\n     * a custom revert error of handleOps, to identify the offending op.\r\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\r\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\r\n     *  @param reason - revert reason\r\n     *      The string starts with a unique code \"AAmn\", where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,\r\n     *      so a failure can be attributed to the correct entity.\r\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\r\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\r\n     */\r\n    error FailedOp(uint256 opIndex, string reason);\r\n\r\n    /**\r\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\r\n     */\r\n    error SignatureValidationFailed(address aggregator);\r\n\r\n    /**\r\n     * Successful result from simulateValidation.\r\n     * @param returnInfo gas and time-range returned values\r\n     * @param senderInfo stake information about the sender\r\n     * @param factoryInfo stake information about the factory (if any)\r\n     * @param paymasterInfo stake information about the paymaster (if any)\r\n     */\r\n    error ValidationResult(ReturnInfo returnInfo, StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\r\n\r\n    /**\r\n     * Successful result from simulateValidation, if the account returns a signature aggregator\r\n     * @param returnInfo gas and time-range returned values\r\n     * @param senderInfo stake information about the sender\r\n     * @param factoryInfo stake information about the factory (if any)\r\n     * @param paymasterInfo stake information about the paymaster (if any)\r\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\r\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\r\n     */\r\n    error ValidationResultWithAggregation(\r\n        ReturnInfo returnInfo,\r\n        StakeInfo senderInfo,\r\n        StakeInfo factoryInfo,\r\n        StakeInfo paymasterInfo,\r\n        AggregatorStakeInfo aggregatorInfo\r\n    );\r\n\r\n    /**\r\n     * return value of getSenderAddress\r\n     */\r\n    error SenderAddressResult(address sender);\r\n\r\n    /**\r\n     * return value of simulateHandleOp\r\n     */\r\n    error ExecutionResult(\r\n        uint256 preOpGas,\r\n        uint256 paid,\r\n        uint48 validAfter,\r\n        uint48 validUntil,\r\n        bool targetSuccess,\r\n        bytes targetResult\r\n    );\r\n\r\n    //UserOps handled, per aggregator\r\n    struct UserOpsPerAggregator {\r\n        UserOperation[] userOps;\r\n        // aggregator address\r\n        IAggregator aggregator;\r\n        // aggregated signature\r\n        bytes signature;\r\n    }\r\n\r\n    /**\r\n     * Execute a batch of UserOperation.\r\n     * no signature aggregator is used.\r\n     * if any account requires an aggregator (that is, it returned an aggregator when\r\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\r\n     * @param ops the operations to execute\r\n     * @param beneficiary the address to receive the fees\r\n     */\r\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\r\n\r\n    /**\r\n     * Execute a batch of UserOperation with Aggregators\r\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\r\n     * @param beneficiary the address to receive the fees\r\n     */\r\n    function handleAggregatedOps(\r\n        UserOpsPerAggregator[] calldata opsPerAggregator,\r\n        address payable beneficiary\r\n    ) external;\r\n\r\n    /**\r\n     * generate a request Id - unique identifier for this request.\r\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\r\n     */\r\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\r\n\r\n    /**\r\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\r\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\r\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\r\n     * @param userOp the user operation to validate.\r\n     */\r\n    function simulateValidation(UserOperation calldata userOp) external;\r\n\r\n    /**\r\n     * gas and return values during simulation\r\n     * @param preOpGas the gas used for validation (including preValidationGas)\r\n     * @param prefund the required prefund for this operation\r\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\r\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\r\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\r\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\r\n     */\r\n    struct ReturnInfo {\r\n        uint256 preOpGas;\r\n        uint256 prefund;\r\n        bool sigFailed;\r\n        uint48 validAfter;\r\n        uint48 validUntil;\r\n        bytes paymasterContext;\r\n    }\r\n\r\n    /**\r\n     * returned aggregated signature info.\r\n     * the aggregator returned by the account, and its current stake.\r\n     */\r\n    struct AggregatorStakeInfo {\r\n        address aggregator;\r\n        StakeInfo stakeInfo;\r\n    }\r\n\r\n    /**\r\n     * Get counterfactual sender address.\r\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\r\n     * this method always revert, and returns the address in SenderAddressResult error\r\n     * @param initCode the constructor code to be passed into the UserOperation.\r\n     */\r\n    function getSenderAddress(bytes memory initCode) external;\r\n\r\n    /**\r\n     * simulate full execution of a UserOperation (including both validation and target execution)\r\n     * this method will always revert with \"ExecutionResult\".\r\n     * it performs full validation of the UserOperation, but ignores signature error.\r\n     * an optional target address is called after the userop succeeds, and its value is returned\r\n     * (before the entire call is reverted)\r\n     * Note that in order to collect the success/failure of the target call, it must be executed\r\n     * with trace enabled to track the emitted events.\r\n     * @param op the UserOperation to simulate\r\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\r\n     *        are set to the return from that call.\r\n     * @param targetCallData callData to pass to target address\r\n     */\r\n    function simulateHandleOp(UserOperation calldata op, address target, bytes calldata targetCallData) external;\r\n}"
			},
			".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/INonceManager.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\ninterface INonceManager {\r\n    /**\r\n     * Return the next nonce for this sender.\r\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\r\n     * But UserOp with different keys can come with arbitrary order.\r\n     *\r\n     * @param sender the account address\r\n     * @param key the high 192 bit of the nonce\r\n     * @return nonce a full nonce to pass for next UserOp with this sender.\r\n     */\r\n    function getNonce(address sender, uint192 key) external view returns (uint256 nonce);\r\n\r\n    /**\r\n     * Manually increment the nonce of the sender.\r\n     * This method is exposed just for completeness..\r\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\r\n     * as the EntryPoint will update the nonce regardless.\r\n     * Possible use-case is call it with various keys to \"initialize\" their nonces to one, so that future\r\n     * UserOperations will not pay extra for the first transaction with a given key.\r\n     */\r\n    function incrementNonce(uint192 key) external;\r\n}"
			},
			".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IAggregator.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\nimport \"../../extension/upgradeable/UserOperation.sol\";\r\n\r\n/**\r\n * Aggregated Signatures validator.\r\n */\r\ninterface IAggregator {\r\n    /**\r\n     * validate aggregated signature.\r\n     * revert if the aggregated signature does not match the given list of operations.\r\n     */\r\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\r\n\r\n    /**\r\n     * validate signature of a single userOp\r\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\r\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\r\n     * @param userOp the userOperation received from the user.\r\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\r\n     *    (usually empty, unless account and aggregator support some kind of \"multisig\"\r\n     */\r\n    function validateUserOpSignature(UserOperation calldata userOp) external view returns (bytes memory sigForUserOp);\r\n\r\n    /**\r\n     * aggregate multiple signatures into a single value.\r\n     * This method is called off-chain to calculate the signature to pass with handleOps()\r\n     * bundler MAY use optimized custom code perform this aggregation\r\n     * @param userOps array of UserOperations to collect the signatures from.\r\n     * @return aggregatedSignature the aggregated signature\r\n     */\r\n    function aggregateSignatures(\r\n        UserOperation[] calldata userOps\r\n    ) external view returns (bytes memory aggregatedSignature);\r\n}"
			},
			".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IStakeManager.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity ^0.8.12;\r\n\r\n/**\r\n * manage deposits and stakes.\r\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\r\n * stake is value locked for at least \"unstakeDelay\" by the staked entity.\r\n */\r\ninterface IStakeManager {\r\n    event Deposited(address indexed account, uint256 totalDeposit);\r\n\r\n    event Withdrawn(address indexed account, address withdrawAddress, uint256 amount);\r\n\r\n    /// Emitted when stake or unstake delay are modified\r\n    event StakeLocked(address indexed account, uint256 totalStaked, uint256 unstakeDelaySec);\r\n\r\n    /// Emitted once a stake is scheduled for withdrawal\r\n    event StakeUnlocked(address indexed account, uint256 withdrawTime);\r\n\r\n    event StakeWithdrawn(address indexed account, address withdrawAddress, uint256 amount);\r\n\r\n    /**\r\n     * @param deposit the entity's deposit\r\n     * @param staked true if this entity is staked.\r\n     * @param stake actual amount of ether staked for this entity.\r\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\r\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\r\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\r\n     *    and the rest fit into a 2nd cell.\r\n     *    112 bit allows for 10^15 eth\r\n     *    48 bit for full timestamp\r\n     *    32 bit allows 150 years for unstake delay\r\n     */\r\n    struct DepositInfo {\r\n        uint112 deposit;\r\n        bool staked;\r\n        uint112 stake;\r\n        uint32 unstakeDelaySec;\r\n        uint48 withdrawTime;\r\n    }\r\n\r\n    //API struct used by getStakeInfo and simulateValidation\r\n    struct StakeInfo {\r\n        uint256 stake;\r\n        uint256 unstakeDelaySec;\r\n    }\r\n\r\n    /// @return info - full deposit information of given account\r\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\r\n\r\n    /// @return the deposit (for gas payment) of the account\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * add to the deposit of the given account\r\n     */\r\n    function depositTo(address account) external payable;\r\n\r\n    /**\r\n     * add to the account's stake - amount and delay\r\n     * any pending unstake is first cancelled.\r\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\r\n     */\r\n    function addStake(uint32 _unstakeDelaySec) external payable;\r\n\r\n    /**\r\n     * attempt to unlock the stake.\r\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\r\n     */\r\n    function unlockStake() external;\r\n\r\n    /**\r\n     * withdraw from the (unlocked) stake.\r\n     * must first call unlockStake and wait for the unstakeDelay to pass\r\n     * @param withdrawAddress the address to send withdrawn value.\r\n     */\r\n    function withdrawStake(address payable withdrawAddress) external;\r\n\r\n    /**\r\n     * withdraw from the deposit.\r\n     * @param withdrawAddress the address to send withdrawn value.\r\n     * @param withdrawAmount the amount to withdraw.\r\n     */\r\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\r\n}"
			},
			".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/UserOperation.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\n/* solhint-disable no-inline-assembly */\r\n\r\nimport { calldataKeccak } from \"../../src/utils/Helpers.sol\";\r\n\r\n/**\r\n * User Operation struct\r\n * @param sender the sender account of this request.\r\n * @param nonce unique value the sender uses to verify it is not a replay.\r\n * @param initCode if set, the account contract will be created by this constructor/\r\n * @param callData the method call to execute on this account.\r\n * @param callGasLimit the gas limit passed to the callData method call.\r\n * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\r\n * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\r\n * @param maxFeePerGas same as EIP-1559 gas parameter.\r\n * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\r\n * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\r\n * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\r\n */\r\nstruct UserOperation {\r\n    address sender;\r\n    uint256 nonce;\r\n    bytes initCode;\r\n    bytes callData;\r\n    uint256 callGasLimit;\r\n    uint256 verificationGasLimit;\r\n    uint256 preVerificationGas;\r\n    uint256 maxFeePerGas;\r\n    uint256 maxPriorityFeePerGas;\r\n    bytes paymasterAndData;\r\n    bytes signature;\r\n}\r\n\r\n/**\r\n * Utility functions helpful when working with UserOperation structs.\r\n */\r\nlibrary UserOperationLib {\r\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\r\n        address data;\r\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\r\n        assembly {\r\n            data := calldataload(userOp)\r\n        }\r\n        return address(uint160(data));\r\n    }\r\n\r\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\r\n    // pay above what he signed for.\r\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\r\n        unchecked {\r\n            uint256 maxFeePerGas = userOp.maxFeePerGas;\r\n            uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\r\n            if (maxFeePerGas == maxPriorityFeePerGas) {\r\n                //legacy mode (for networks that don't support basefee opcode)\r\n                return maxFeePerGas;\r\n            }\r\n            return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\r\n        }\r\n    }\r\n\r\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\r\n        address sender = getSender(userOp);\r\n        uint256 nonce = userOp.nonce;\r\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\r\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\r\n        uint256 callGasLimit = userOp.callGasLimit;\r\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\r\n        uint256 preVerificationGas = userOp.preVerificationGas;\r\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\r\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\r\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\r\n\r\n        return\r\n            abi.encode(\r\n                sender,\r\n                nonce,\r\n                hashInitCode,\r\n                hashCallData,\r\n                callGasLimit,\r\n                verificationGasLimit,\r\n                preVerificationGas,\r\n                maxFeePerGas,\r\n                maxPriorityFeePerGas,\r\n                hashPaymasterAndData\r\n            );\r\n    }\r\n\r\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\r\n        return keccak256(pack(userOp));\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}"
			},
			".deps/npm/@thirdweb-dev/dynamic-contracts/src/utils/Helpers.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\n/* solhint-disable no-inline-assembly */\r\n/* solhint-disable func-visibility */\r\n\r\n/**\r\n * returned data from validateUserOp.\r\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\r\n * @param aggregator - address(0) - the account validated the signature by itself.\r\n *              address(1) - the account failed to validate the signature.\r\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\r\n * @param validAfter - this UserOp is valid only after this timestamp.\r\n * @param validaUntil - this UserOp is valid only up to this timestamp.\r\n */\r\nstruct ValidationData {\r\n    address aggregator;\r\n    uint48 validAfter;\r\n    uint48 validUntil;\r\n}\r\n\r\n//extract sigFailed, validAfter, validUntil.\r\n// also convert zero validUntil to type(uint48).max\r\nfunction _parseValidationData(uint256 validationData) pure returns (ValidationData memory data) {\r\n    address aggregator = address(uint160(validationData));\r\n    uint48 validUntil = uint48(validationData >> 160);\r\n    if (validUntil == 0) {\r\n        validUntil = type(uint48).max;\r\n    }\r\n    uint48 validAfter = uint48(validationData >> (48 + 160));\r\n    return ValidationData(aggregator, validAfter, validUntil);\r\n}\r\n\r\n// intersect account and paymaster ranges.\r\nfunction _intersectTimeRange(\r\n    uint256 validationData,\r\n    uint256 paymasterValidationData\r\n) pure returns (ValidationData memory) {\r\n    ValidationData memory accountValidationData = _parseValidationData(validationData);\r\n    ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\r\n    address aggregator = accountValidationData.aggregator;\r\n    if (aggregator == address(0)) {\r\n        aggregator = pmValidationData.aggregator;\r\n    }\r\n    uint48 validAfter = accountValidationData.validAfter;\r\n    uint48 validUntil = accountValidationData.validUntil;\r\n    uint48 pmValidAfter = pmValidationData.validAfter;\r\n    uint48 pmValidUntil = pmValidationData.validUntil;\r\n\r\n    if (validAfter < pmValidAfter) validAfter = pmValidAfter;\r\n    if (validUntil > pmValidUntil) validUntil = pmValidUntil;\r\n    return ValidationData(aggregator, validAfter, validUntil);\r\n}\r\n\r\n/**\r\n * helper to pack the return value for validateUserOp\r\n * @param data - the ValidationData to pack\r\n */\r\nfunction _packValidationData(ValidationData memory data) pure returns (uint256) {\r\n    return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\r\n}\r\n\r\n/**\r\n * helper to pack the return value for validateUserOp, when not using an aggregator\r\n * @param sigFailed - true for signature failure, false for success\r\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\r\n * @param validAfter first timestamp this UserOperation is valid\r\n */\r\nfunction _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\r\n    return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\r\n}\r\n\r\n/**\r\n * keccak function over calldata.\r\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\r\n */\r\nfunction calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\r\n    assembly {\r\n        let mem := mload(0x40)\r\n        let len := data.length\r\n        calldatacopy(mem, data.offset, len)\r\n        ret := keccak256(mem, len)\r\n    }\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/UserOperation.sol": {
				"UserOperationLib": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/UserOperation.sol\":1581:3927  library UserOperationLib {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/UserOperation.sol\":1581:3927  library UserOperationLib {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212200dd160f2d8f49592e79fb33fa2d949eb3e83ca21516f31ed53550f9982fa01e764736f6c63430008180033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212200dd160f2d8f49592e79fb33fa2d949eb3e83ca21516f31ed53550f9982fa01e764736f6c63430008180033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD 0xD1 PUSH1 0xF2 0xD8 DELEGATECALL SWAP6 SWAP3 0xE7 SWAP16 0xB3 EXTCODEHASH LOG2 0xD9 BLOBHASH 0xEB RETURNDATACOPY DUP4 0xCA 0x21 MLOAD PUSH16 0x31ED53550F9982FA01E764736F6C6343 STOP ADDMOD XOR STOP CALLER ",
							"sourceMap": "1581:2346:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212200dd160f2d8f49592e79fb33fa2d949eb3e83ca21516f31ed53550f9982fa01e764736f6c63430008180033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD 0xD1 PUSH1 0xF2 0xD8 DELEGATECALL SWAP6 SWAP3 0xE7 SWAP16 0xB3 EXTCODEHASH LOG2 0xD9 BLOBHASH 0xEB RETURNDATACOPY DUP4 0xCA 0x21 MLOAD PUSH16 0x31ED53550F9982FA01E764736F6C6343 STOP ADDMOD XOR STOP CALLER ",
							"sourceMap": "1581:2346:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"gasPrice(struct UserOperation calldata)": "infinite",
								"getSender(struct UserOperation calldata)": "infinite",
								"hash(struct UserOperation calldata)": "infinite",
								"min(uint256,uint256)": "infinite",
								"pack(struct UserOperation calldata)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1581,
									"end": 3927,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "PUSH",
									"source": 0,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "PUSH",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1581,
									"end": 3927,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212200dd160f2d8f49592e79fb33fa2d949eb3e83ca21516f31ed53550f9982fa01e764736f6c63430008180033",
									".code": [
										{
											"begin": 1581,
											"end": 3927,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 3927,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 3927,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 3927,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 1581,
											"end": 3927,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1581,
											"end": 3927,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 3927,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1581,
											"end": 3927,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 3927,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/UserOperation.sol",
								".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IAggregator.sol",
								".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IEntryPoint.sol",
								".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/INonceManager.sol",
								".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IStakeManager.sol",
								".deps/npm/@thirdweb-dev/dynamic-contracts/src/utils/Helpers.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Utility functions helpful when working with UserOperation structs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/UserOperation.sol\":\"UserOperationLib\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/UserOperation.sol\":{\"keccak256\":\"0x0844576ffce3c3fd6ec5454d3a142efe5ed119112d7e1c6698c99b5b93a6476f\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://5e788a3d11d336be698790552bd9f31f1bdc72f43a22a5b2574fb248c819076f\",\"dweb:/ipfs/QmcfToLtD2tA36AL6FKB8Du7EWr43zC5yo2HZFGKeY41Z4\"]},\".deps/npm/@thirdweb-dev/dynamic-contracts/src/utils/Helpers.sol\":{\"keccak256\":\"0x78aa2145fcfb195f533e68486fd1617a3b6b5bdf53af1b8fd2ab7211459bc8ba\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://a1ea19d4707c245e5bdad9df43cd89bbc451b08e074b0cb2156a04c0e1e2c6da\",\"dweb:/ipfs/QmVas9dTRJt9HJQomia5ZTBgQanxyz1akyDAkCHRL3ecx7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Utility functions helpful when working with UserOperation structs.",
						"version": 1
					}
				}
			},
			".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IAggregator.sol": {
				"IAggregator": {
					"abi": [
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "sender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "initCode",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "callData",
											"type": "bytes"
										},
										{
											"internalType": "uint256",
											"name": "callGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "verificationGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "preVerificationGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxPriorityFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "paymasterAndData",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "signature",
											"type": "bytes"
										}
									],
									"internalType": "struct UserOperation[]",
									"name": "userOps",
									"type": "tuple[]"
								}
							],
							"name": "aggregateSignatures",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "aggregatedSignature",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "sender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "initCode",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "callData",
											"type": "bytes"
										},
										{
											"internalType": "uint256",
											"name": "callGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "verificationGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "preVerificationGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxPriorityFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "paymasterAndData",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "signature",
											"type": "bytes"
										}
									],
									"internalType": "struct UserOperation[]",
									"name": "userOps",
									"type": "tuple[]"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "validateSignatures",
							"outputs": [],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "sender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "initCode",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "callData",
											"type": "bytes"
										},
										{
											"internalType": "uint256",
											"name": "callGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "verificationGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "preVerificationGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxPriorityFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "paymasterAndData",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "signature",
											"type": "bytes"
										}
									],
									"internalType": "struct UserOperation",
									"name": "userOp",
									"type": "tuple"
								}
							],
							"name": "validateUserOpSignature",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "sigForUserOp",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])": {
								"params": {
									"userOps": "array of UserOperations to collect the signatures from."
								},
								"returns": {
									"aggregatedSignature": "the aggregated signature"
								}
							},
							"validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
								"params": {
									"userOp": "the userOperation received from the user."
								},
								"returns": {
									"sigForUserOp": "the value to put into the signature field of the userOp when calling handleOps.    (usually empty, unless account and aggregator support some kind of \"multisig\""
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])": "275e2d79",
							"validateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes)": "e3563a4f",
							"validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": "64c530cd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"userOps\",\"type\":\"tuple[]\"}],\"name\":\"aggregateSignatures\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"aggregatedSignature\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"userOps\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"validateSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"validateUserOpSignature\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"sigForUserOp\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])\":{\"params\":{\"userOps\":\"array of UserOperations to collect the signatures from.\"},\"returns\":{\"aggregatedSignature\":\"the aggregated signature\"}},\"validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"params\":{\"userOp\":\"the userOperation received from the user.\"},\"returns\":{\"sigForUserOp\":\"the value to put into the signature field of the userOp when calling handleOps.    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])\":{\"notice\":\"aggregate multiple signatures into a single value. This method is called off-chain to calculate the signature to pass with handleOps() bundler MAY use optimized custom code perform this aggregation\"},\"validateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes)\":{\"notice\":\"validate aggregated signature. revert if the aggregated signature does not match the given list of operations.\"},\"validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"notice\":\"validate signature of a single userOp This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\"}},\"notice\":\"Aggregated Signatures validator.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IAggregator.sol\":\"IAggregator\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/UserOperation.sol\":{\"keccak256\":\"0x0844576ffce3c3fd6ec5454d3a142efe5ed119112d7e1c6698c99b5b93a6476f\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://5e788a3d11d336be698790552bd9f31f1bdc72f43a22a5b2574fb248c819076f\",\"dweb:/ipfs/QmcfToLtD2tA36AL6FKB8Du7EWr43zC5yo2HZFGKeY41Z4\"]},\".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IAggregator.sol\":{\"keccak256\":\"0x516d1dcafa4a239386340533d87ed0c1eff291c631cf596afaf82262ddfa603d\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://ed5974a9e0fe8de3de6779ca0ef4c1655a26ca9a73a94b4d8a26789ac1bd09ef\",\"dweb:/ipfs/QmXxjfVDdZS6bqyHo5AfbZthZUtytcCt8Gn87jg8bdM4wv\"]},\".deps/npm/@thirdweb-dev/dynamic-contracts/src/utils/Helpers.sol\":{\"keccak256\":\"0x78aa2145fcfb195f533e68486fd1617a3b6b5bdf53af1b8fd2ab7211459bc8ba\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://a1ea19d4707c245e5bdad9df43cd89bbc451b08e074b0cb2156a04c0e1e2c6da\",\"dweb:/ipfs/QmVas9dTRJt9HJQomia5ZTBgQanxyz1akyDAkCHRL3ecx7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])": {
								"notice": "aggregate multiple signatures into a single value. This method is called off-chain to calculate the signature to pass with handleOps() bundler MAY use optimized custom code perform this aggregation"
							},
							"validateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes)": {
								"notice": "validate aggregated signature. revert if the aggregated signature does not match the given list of operations."
							},
							"validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
								"notice": "validate signature of a single userOp This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps."
							}
						},
						"notice": "Aggregated Signatures validator.",
						"version": 1
					}
				}
			},
			".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IEntryPoint.sol": {
				"IEntryPoint": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "preOpGas",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "paid",
									"type": "uint256"
								},
								{
									"internalType": "uint48",
									"name": "validAfter",
									"type": "uint48"
								},
								{
									"internalType": "uint48",
									"name": "validUntil",
									"type": "uint48"
								},
								{
									"internalType": "bool",
									"name": "targetSuccess",
									"type": "bool"
								},
								{
									"internalType": "bytes",
									"name": "targetResult",
									"type": "bytes"
								}
							],
							"name": "ExecutionResult",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "opIndex",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "reason",
									"type": "string"
								}
							],
							"name": "FailedOp",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "SenderAddressResult",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "aggregator",
									"type": "address"
								}
							],
							"name": "SignatureValidationFailed",
							"type": "error"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "preOpGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "prefund",
											"type": "uint256"
										},
										{
											"internalType": "bool",
											"name": "sigFailed",
											"type": "bool"
										},
										{
											"internalType": "uint48",
											"name": "validAfter",
											"type": "uint48"
										},
										{
											"internalType": "uint48",
											"name": "validUntil",
											"type": "uint48"
										},
										{
											"internalType": "bytes",
											"name": "paymasterContext",
											"type": "bytes"
										}
									],
									"internalType": "struct IEntryPoint.ReturnInfo",
									"name": "returnInfo",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "stake",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "unstakeDelaySec",
											"type": "uint256"
										}
									],
									"internalType": "struct IStakeManager.StakeInfo",
									"name": "senderInfo",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "stake",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "unstakeDelaySec",
											"type": "uint256"
										}
									],
									"internalType": "struct IStakeManager.StakeInfo",
									"name": "factoryInfo",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "stake",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "unstakeDelaySec",
											"type": "uint256"
										}
									],
									"internalType": "struct IStakeManager.StakeInfo",
									"name": "paymasterInfo",
									"type": "tuple"
								}
							],
							"name": "ValidationResult",
							"type": "error"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "preOpGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "prefund",
											"type": "uint256"
										},
										{
											"internalType": "bool",
											"name": "sigFailed",
											"type": "bool"
										},
										{
											"internalType": "uint48",
											"name": "validAfter",
											"type": "uint48"
										},
										{
											"internalType": "uint48",
											"name": "validUntil",
											"type": "uint48"
										},
										{
											"internalType": "bytes",
											"name": "paymasterContext",
											"type": "bytes"
										}
									],
									"internalType": "struct IEntryPoint.ReturnInfo",
									"name": "returnInfo",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "stake",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "unstakeDelaySec",
											"type": "uint256"
										}
									],
									"internalType": "struct IStakeManager.StakeInfo",
									"name": "senderInfo",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "stake",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "unstakeDelaySec",
											"type": "uint256"
										}
									],
									"internalType": "struct IStakeManager.StakeInfo",
									"name": "factoryInfo",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "stake",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "unstakeDelaySec",
											"type": "uint256"
										}
									],
									"internalType": "struct IStakeManager.StakeInfo",
									"name": "paymasterInfo",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "aggregator",
											"type": "address"
										},
										{
											"components": [
												{
													"internalType": "uint256",
													"name": "stake",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "unstakeDelaySec",
													"type": "uint256"
												}
											],
											"internalType": "struct IStakeManager.StakeInfo",
											"name": "stakeInfo",
											"type": "tuple"
										}
									],
									"internalType": "struct IEntryPoint.AggregatorStakeInfo",
									"name": "aggregatorInfo",
									"type": "tuple"
								}
							],
							"name": "ValidationResultWithAggregation",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "userOpHash",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "factory",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "paymaster",
									"type": "address"
								}
							],
							"name": "AccountDeployed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "BeforeExecution",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "totalDeposit",
									"type": "uint256"
								}
							],
							"name": "Deposited",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "aggregator",
									"type": "address"
								}
							],
							"name": "SignatureAggregatorChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "totalStaked",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "unstakeDelaySec",
									"type": "uint256"
								}
							],
							"name": "StakeLocked",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "withdrawTime",
									"type": "uint256"
								}
							],
							"name": "StakeUnlocked",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "withdrawAddress",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "StakeWithdrawn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "userOpHash",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "paymaster",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "actualGasCost",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "actualGasUsed",
									"type": "uint256"
								}
							],
							"name": "UserOperationEvent",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "userOpHash",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "revertReason",
									"type": "bytes"
								}
							],
							"name": "UserOperationRevertReason",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "withdrawAddress",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "Withdrawn",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint32",
									"name": "_unstakeDelaySec",
									"type": "uint32"
								}
							],
							"name": "addStake",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "depositTo",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "getDepositInfo",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint112",
											"name": "deposit",
											"type": "uint112"
										},
										{
											"internalType": "bool",
											"name": "staked",
											"type": "bool"
										},
										{
											"internalType": "uint112",
											"name": "stake",
											"type": "uint112"
										},
										{
											"internalType": "uint32",
											"name": "unstakeDelaySec",
											"type": "uint32"
										},
										{
											"internalType": "uint48",
											"name": "withdrawTime",
											"type": "uint48"
										}
									],
									"internalType": "struct IStakeManager.DepositInfo",
									"name": "info",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint192",
									"name": "key",
									"type": "uint192"
								}
							],
							"name": "getNonce",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "initCode",
									"type": "bytes"
								}
							],
							"name": "getSenderAddress",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "sender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "initCode",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "callData",
											"type": "bytes"
										},
										{
											"internalType": "uint256",
											"name": "callGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "verificationGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "preVerificationGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxPriorityFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "paymasterAndData",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "signature",
											"type": "bytes"
										}
									],
									"internalType": "struct UserOperation",
									"name": "userOp",
									"type": "tuple"
								}
							],
							"name": "getUserOpHash",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "sender",
													"type": "address"
												},
												{
													"internalType": "uint256",
													"name": "nonce",
													"type": "uint256"
												},
												{
													"internalType": "bytes",
													"name": "initCode",
													"type": "bytes"
												},
												{
													"internalType": "bytes",
													"name": "callData",
													"type": "bytes"
												},
												{
													"internalType": "uint256",
													"name": "callGasLimit",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "verificationGasLimit",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "preVerificationGas",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "maxFeePerGas",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "maxPriorityFeePerGas",
													"type": "uint256"
												},
												{
													"internalType": "bytes",
													"name": "paymasterAndData",
													"type": "bytes"
												},
												{
													"internalType": "bytes",
													"name": "signature",
													"type": "bytes"
												}
											],
											"internalType": "struct UserOperation[]",
											"name": "userOps",
											"type": "tuple[]"
										},
										{
											"internalType": "contract IAggregator",
											"name": "aggregator",
											"type": "address"
										},
										{
											"internalType": "bytes",
											"name": "signature",
											"type": "bytes"
										}
									],
									"internalType": "struct IEntryPoint.UserOpsPerAggregator[]",
									"name": "opsPerAggregator",
									"type": "tuple[]"
								},
								{
									"internalType": "address payable",
									"name": "beneficiary",
									"type": "address"
								}
							],
							"name": "handleAggregatedOps",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "sender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "initCode",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "callData",
											"type": "bytes"
										},
										{
											"internalType": "uint256",
											"name": "callGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "verificationGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "preVerificationGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxPriorityFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "paymasterAndData",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "signature",
											"type": "bytes"
										}
									],
									"internalType": "struct UserOperation[]",
									"name": "ops",
									"type": "tuple[]"
								},
								{
									"internalType": "address payable",
									"name": "beneficiary",
									"type": "address"
								}
							],
							"name": "handleOps",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint192",
									"name": "key",
									"type": "uint192"
								}
							],
							"name": "incrementNonce",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "sender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "initCode",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "callData",
											"type": "bytes"
										},
										{
											"internalType": "uint256",
											"name": "callGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "verificationGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "preVerificationGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxPriorityFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "paymasterAndData",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "signature",
											"type": "bytes"
										}
									],
									"internalType": "struct UserOperation",
									"name": "op",
									"type": "tuple"
								},
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "targetCallData",
									"type": "bytes"
								}
							],
							"name": "simulateHandleOp",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "sender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "initCode",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "callData",
											"type": "bytes"
										},
										{
											"internalType": "uint256",
											"name": "callGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "verificationGasLimit",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "preVerificationGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "maxPriorityFeePerGas",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "paymasterAndData",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "signature",
											"type": "bytes"
										}
									],
									"internalType": "struct UserOperation",
									"name": "userOp",
									"type": "tuple"
								}
							],
							"name": "simulateValidation",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unlockStake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address payable",
									"name": "withdrawAddress",
									"type": "address"
								}
							],
							"name": "withdrawStake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address payable",
									"name": "withdrawAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "withdrawAmount",
									"type": "uint256"
								}
							],
							"name": "withdrawTo",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"FailedOp(uint256,string)": [
								{
									"params": {
										"opIndex": "- index into the array of ops to the failed one (in simulateValidation, this is always zero)",
										"reason": "- revert reason      The string starts with a unique code \"AAmn\", where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,      so a failure can be attributed to the correct entity.   Should be caught in off-chain handleOps simulation and not happen on-chain.   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts."
									}
								}
							],
							"ValidationResult((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))": [
								{
									"params": {
										"factoryInfo": "stake information about the factory (if any)",
										"paymasterInfo": "stake information about the paymaster (if any)",
										"returnInfo": "gas and time-range returned values",
										"senderInfo": "stake information about the sender"
									}
								}
							],
							"ValidationResultWithAggregation((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))": [
								{
									"params": {
										"aggregatorInfo": "signature aggregation info (if the account requires signature aggregator)      bundler MUST use it to verify the signature, or reject the UserOperation",
										"factoryInfo": "stake information about the factory (if any)",
										"paymasterInfo": "stake information about the paymaster (if any)",
										"returnInfo": "gas and time-range returned values",
										"senderInfo": "stake information about the sender"
									}
								}
							]
						},
						"events": {
							"AccountDeployed(bytes32,address,address,address)": {
								"params": {
									"factory": "the factory used to deploy this account (in the initCode)",
									"paymaster": "the paymaster used by this UserOp",
									"sender": "the account that is deployed",
									"userOpHash": "the userOp that deployed this account. UserOperationEvent will follow."
								}
							},
							"UserOperationRevertReason(bytes32,address,uint256,bytes)": {
								"params": {
									"nonce": "the nonce used in the request",
									"revertReason": "- the return bytes from the (reverted) call to \"callData\".",
									"sender": "the sender of this request",
									"userOpHash": "the request unique identifier."
								}
							}
						},
						"kind": "dev",
						"methods": {
							"addStake(uint32)": {
								"params": {
									"_unstakeDelaySec": "the new lock duration before the deposit can be withdrawn."
								}
							},
							"balanceOf(address)": {
								"returns": {
									"_0": "the deposit (for gas payment) of the account"
								}
							},
							"getDepositInfo(address)": {
								"returns": {
									"info": "- full deposit information of given account"
								}
							},
							"getNonce(address,uint192)": {
								"params": {
									"key": "the high 192 bit of the nonce",
									"sender": "the account address"
								},
								"returns": {
									"nonce": "a full nonce to pass for next UserOp with this sender."
								}
							},
							"getSenderAddress(bytes)": {
								"params": {
									"initCode": "the constructor code to be passed into the UserOperation."
								}
							},
							"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)": {
								"params": {
									"beneficiary": "the address to receive the fees",
									"opsPerAggregator": "the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)"
								}
							},
							"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)": {
								"params": {
									"beneficiary": "the address to receive the fees",
									"ops": "the operations to execute"
								}
							},
							"simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)": {
								"params": {
									"op": "the UserOperation to simulate",
									"target": "if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult        are set to the return from that call.",
									"targetCallData": "callData to pass to target address"
								}
							},
							"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
								"details": "this method always revert. Successful result is ValidationResult error. other errors are failures.The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.",
								"params": {
									"userOp": "the user operation to validate."
								}
							},
							"withdrawStake(address)": {
								"params": {
									"withdrawAddress": "the address to send withdrawn value."
								}
							},
							"withdrawTo(address,uint256)": {
								"params": {
									"withdrawAddress": "the address to send withdrawn value.",
									"withdrawAmount": "the amount to withdraw."
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addStake(uint32)": "0396cb60",
							"balanceOf(address)": "70a08231",
							"depositTo(address)": "b760faf9",
							"getDepositInfo(address)": "5287ce12",
							"getNonce(address,uint192)": "35567e1a",
							"getSenderAddress(bytes)": "9b249f69",
							"getUserOpHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": "a6193531",
							"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)": "4b1d7cf5",
							"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)": "1fad948c",
							"incrementNonce(uint192)": "0bd28e3b",
							"simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)": "d6383f94",
							"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": "ee219423",
							"unlockStake()": "bb9fe6bf",
							"withdrawStake(address)": "c23a5cea",
							"withdrawTo(address,uint256)": "205c2878"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"validAfter\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"validUntil\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"targetSuccess\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"targetResult\",\"type\":\"bytes\"}],\"name\":\"ExecutionResult\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"opIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"FailedOp\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderAddressResult\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"SignatureValidationFailed\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prefund\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sigFailed\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"validAfter\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"validUntil\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"paymasterContext\",\"type\":\"bytes\"}],\"internalType\":\"struct IEntryPoint.ReturnInfo\",\"name\":\"returnInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"senderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"factoryInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"paymasterInfo\",\"type\":\"tuple\"}],\"name\":\"ValidationResult\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prefund\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sigFailed\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"validAfter\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"validUntil\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"paymasterContext\",\"type\":\"bytes\"}],\"internalType\":\"struct IEntryPoint.ReturnInfo\",\"name\":\"returnInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"senderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"factoryInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"paymasterInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"stakeInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct IEntryPoint.AggregatorStakeInfo\",\"name\":\"aggregatorInfo\",\"type\":\"tuple\"}],\"name\":\"ValidationResultWithAggregation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"}],\"name\":\"AccountDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BeforeExecution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"SignatureAggregatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"name\":\"StakeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"}],\"name\":\"StakeUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualGasCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualGasUsed\",\"type\":\"uint256\"}],\"name\":\"UserOperationEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"revertReason\",\"type\":\"bytes\"}],\"name\":\"UserOperationRevertReason\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_unstakeDelaySec\",\"type\":\"uint32\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDepositInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"deposit\",\"type\":\"uint112\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint112\",\"name\":\"stake\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"withdrawTime\",\"type\":\"uint48\"}],\"internalType\":\"struct IStakeManager.DepositInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"}],\"name\":\"getSenderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"getUserOpHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"userOps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IAggregator\",\"name\":\"aggregator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IEntryPoint.UserOpsPerAggregator[]\",\"name\":\"opsPerAggregator\",\"type\":\"tuple[]\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"handleAggregatedOps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"ops\",\"type\":\"tuple[]\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"handleOps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"incrementNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"op\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"targetCallData\",\"type\":\"bytes\"}],\"name\":\"simulateHandleOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"simulateValidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"FailedOp(uint256,string)\":[{\"params\":{\"opIndex\":\"- index into the array of ops to the failed one (in simulateValidation, this is always zero)\",\"reason\":\"- revert reason      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,      so a failure can be attributed to the correct entity.   Should be caught in off-chain handleOps simulation and not happen on-chain.   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\"}}],\"ValidationResult((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))\":[{\"params\":{\"factoryInfo\":\"stake information about the factory (if any)\",\"paymasterInfo\":\"stake information about the paymaster (if any)\",\"returnInfo\":\"gas and time-range returned values\",\"senderInfo\":\"stake information about the sender\"}}],\"ValidationResultWithAggregation((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))\":[{\"params\":{\"aggregatorInfo\":\"signature aggregation info (if the account requires signature aggregator)      bundler MUST use it to verify the signature, or reject the UserOperation\",\"factoryInfo\":\"stake information about the factory (if any)\",\"paymasterInfo\":\"stake information about the paymaster (if any)\",\"returnInfo\":\"gas and time-range returned values\",\"senderInfo\":\"stake information about the sender\"}}]},\"events\":{\"AccountDeployed(bytes32,address,address,address)\":{\"params\":{\"factory\":\"the factory used to deploy this account (in the initCode)\",\"paymaster\":\"the paymaster used by this UserOp\",\"sender\":\"the account that is deployed\",\"userOpHash\":\"the userOp that deployed this account. UserOperationEvent will follow.\"}},\"UserOperationRevertReason(bytes32,address,uint256,bytes)\":{\"params\":{\"nonce\":\"the nonce used in the request\",\"revertReason\":\"- the return bytes from the (reverted) call to \\\"callData\\\".\",\"sender\":\"the sender of this request\",\"userOpHash\":\"the request unique identifier.\"}}},\"kind\":\"dev\",\"methods\":{\"addStake(uint32)\":{\"params\":{\"_unstakeDelaySec\":\"the new lock duration before the deposit can be withdrawn.\"}},\"balanceOf(address)\":{\"returns\":{\"_0\":\"the deposit (for gas payment) of the account\"}},\"getDepositInfo(address)\":{\"returns\":{\"info\":\"- full deposit information of given account\"}},\"getNonce(address,uint192)\":{\"params\":{\"key\":\"the high 192 bit of the nonce\",\"sender\":\"the account address\"},\"returns\":{\"nonce\":\"a full nonce to pass for next UserOp with this sender.\"}},\"getSenderAddress(bytes)\":{\"params\":{\"initCode\":\"the constructor code to be passed into the UserOperation.\"}},\"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)\":{\"params\":{\"beneficiary\":\"the address to receive the fees\",\"opsPerAggregator\":\"the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\"}},\"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)\":{\"params\":{\"beneficiary\":\"the address to receive the fees\",\"ops\":\"the operations to execute\"}},\"simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)\":{\"params\":{\"op\":\"the UserOperation to simulate\",\"target\":\"if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult        are set to the return from that call.\",\"targetCallData\":\"callData to pass to target address\"}},\"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"details\":\"this method always revert. Successful result is ValidationResult error. other errors are failures.The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\",\"params\":{\"userOp\":\"the user operation to validate.\"}},\"withdrawStake(address)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\"}},\"withdrawTo(address,uint256)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\",\"withdrawAmount\":\"the amount to withdraw.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ExecutionResult(uint256,uint256,uint48,uint48,bool,bytes)\":[{\"notice\":\"return value of simulateHandleOp\"}],\"FailedOp(uint256,string)\":[{\"notice\":\"a custom revert error of handleOps, to identify the offending op.  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\"}],\"SenderAddressResult(address)\":[{\"notice\":\"return value of getSenderAddress\"}],\"SignatureValidationFailed(address)\":[{\"notice\":\"error case when a signature aggregator fails to verify the aggregated signature it had created.\"}],\"ValidationResult((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))\":[{\"notice\":\"Successful result from simulateValidation.\"}],\"ValidationResultWithAggregation((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))\":[{\"notice\":\"Successful result from simulateValidation, if the account returns a signature aggregator\"}]},\"events\":{\"AccountDeployed(bytes32,address,address,address)\":{\"notice\":\"account \\\"sender\\\" was deployed.\"},\"BeforeExecution()\":{\"notice\":\"an event emitted by handleOps(), before starting the execution loop. any event emitted before this event, is part of the validation.\"},\"SignatureAggregatorChanged(address)\":{\"notice\":\"signature aggregator used by the following UserOperationEvents within this bundle.\"},\"StakeLocked(address,uint256,uint256)\":{\"notice\":\"Emitted when stake or unstake delay are modified\"},\"StakeUnlocked(address,uint256)\":{\"notice\":\"Emitted once a stake is scheduled for withdrawal\"},\"UserOperationRevertReason(bytes32,address,uint256,bytes)\":{\"notice\":\"An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\"}},\"kind\":\"user\",\"methods\":{\"addStake(uint32)\":{\"notice\":\"add to the account's stake - amount and delay any pending unstake is first cancelled.\"},\"depositTo(address)\":{\"notice\":\"add to the deposit of the given account\"},\"getNonce(address,uint192)\":{\"notice\":\"Return the next nonce for this sender. Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop) But UserOp with different keys can come with arbitrary order.\"},\"getSenderAddress(bytes)\":{\"notice\":\"Get counterfactual sender address.  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation. this method always revert, and returns the address in SenderAddressResult error\"},\"getUserOpHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"notice\":\"generate a request Id - unique identifier for this request. the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\"},\"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)\":{\"notice\":\"Execute a batch of UserOperation with Aggregators\"},\"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)\":{\"notice\":\"Execute a batch of UserOperation. no signature aggregator is used. if any account requires an aggregator (that is, it returned an aggregator when performing simulateValidation), then handleAggregatedOps() must be used instead.\"},\"incrementNonce(uint192)\":{\"notice\":\"Manually increment the nonce of the sender. This method is exposed just for completeness.. Account does NOT need to call it, neither during validation, nor elsewhere, as the EntryPoint will update the nonce regardless. Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future UserOperations will not pay extra for the first transaction with a given key.\"},\"simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)\":{\"notice\":\"simulate full execution of a UserOperation (including both validation and target execution) this method will always revert with \\\"ExecutionResult\\\". it performs full validation of the UserOperation, but ignores signature error. an optional target address is called after the userop succeeds, and its value is returned (before the entire call is reverted) Note that in order to collect the success/failure of the target call, it must be executed with trace enabled to track the emitted events.\"},\"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"notice\":\"Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\"},\"unlockStake()\":{\"notice\":\"attempt to unlock the stake. the value can be withdrawn (using withdrawStake) after the unstake delay.\"},\"withdrawStake(address)\":{\"notice\":\"withdraw from the (unlocked) stake. must first call unlockStake and wait for the unstakeDelay to pass\"},\"withdrawTo(address,uint256)\":{\"notice\":\"withdraw from the deposit.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IEntryPoint.sol\":\"IEntryPoint\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/UserOperation.sol\":{\"keccak256\":\"0x0844576ffce3c3fd6ec5454d3a142efe5ed119112d7e1c6698c99b5b93a6476f\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://5e788a3d11d336be698790552bd9f31f1bdc72f43a22a5b2574fb248c819076f\",\"dweb:/ipfs/QmcfToLtD2tA36AL6FKB8Du7EWr43zC5yo2HZFGKeY41Z4\"]},\".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IAggregator.sol\":{\"keccak256\":\"0x516d1dcafa4a239386340533d87ed0c1eff291c631cf596afaf82262ddfa603d\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://ed5974a9e0fe8de3de6779ca0ef4c1655a26ca9a73a94b4d8a26789ac1bd09ef\",\"dweb:/ipfs/QmXxjfVDdZS6bqyHo5AfbZthZUtytcCt8Gn87jg8bdM4wv\"]},\".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IEntryPoint.sol\":{\"keccak256\":\"0xef4668624f5de2d35eba19dd3edfddc3acd5a2b845cae211f299c1311e216f2c\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://8769f0c62103b659084e7cefdb26eeb9b46b31de03fd4002e264e9afa64868a8\",\"dweb:/ipfs/QmZovAx1SQH6rmhciv1tGSJTAxRq1YBUjUo63mqsrw3did\"]},\".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/INonceManager.sol\":{\"keccak256\":\"0x77085fe40d8352eb6d16f02cca3b8b57db016e97173b5341104d4c4fc677531f\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://8c7eec5d8ebaef50e8e856364a6570cac01f609a3dfcd611af6d7fa550f05d54\",\"dweb:/ipfs/QmToDwfQAymfgUWUTg4VMnfZW72fGcmxWbGk1pipw5Bkm1\"]},\".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IStakeManager.sol\":{\"keccak256\":\"0x56ed36384e0c62253769a2219b2e9161d88e5f58ae1f781fd3a540c8a399b9a7\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://9f26a6b28abc3eee5cf63938205ee6274d508b6f3acd5d1af0f041a2f239be45\",\"dweb:/ipfs/QmY4DYvnqU93ta3VNSa6nxNjoWoum6B8t8k9D7wLUvk6m1\"]},\".deps/npm/@thirdweb-dev/dynamic-contracts/src/utils/Helpers.sol\":{\"keccak256\":\"0x78aa2145fcfb195f533e68486fd1617a3b6b5bdf53af1b8fd2ab7211459bc8ba\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://a1ea19d4707c245e5bdad9df43cd89bbc451b08e074b0cb2156a04c0e1e2c6da\",\"dweb:/ipfs/QmVas9dTRJt9HJQomia5ZTBgQanxyz1akyDAkCHRL3ecx7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"errors": {
							"ExecutionResult(uint256,uint256,uint48,uint48,bool,bytes)": [
								{
									"notice": "return value of simulateHandleOp"
								}
							],
							"FailedOp(uint256,string)": [
								{
									"notice": "a custom revert error of handleOps, to identify the offending op.  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it."
								}
							],
							"SenderAddressResult(address)": [
								{
									"notice": "return value of getSenderAddress"
								}
							],
							"SignatureValidationFailed(address)": [
								{
									"notice": "error case when a signature aggregator fails to verify the aggregated signature it had created."
								}
							],
							"ValidationResult((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))": [
								{
									"notice": "Successful result from simulateValidation."
								}
							],
							"ValidationResultWithAggregation((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))": [
								{
									"notice": "Successful result from simulateValidation, if the account returns a signature aggregator"
								}
							]
						},
						"events": {
							"AccountDeployed(bytes32,address,address,address)": {
								"notice": "account \"sender\" was deployed."
							},
							"BeforeExecution()": {
								"notice": "an event emitted by handleOps(), before starting the execution loop. any event emitted before this event, is part of the validation."
							},
							"SignatureAggregatorChanged(address)": {
								"notice": "signature aggregator used by the following UserOperationEvents within this bundle."
							},
							"StakeLocked(address,uint256,uint256)": {
								"notice": "Emitted when stake or unstake delay are modified"
							},
							"StakeUnlocked(address,uint256)": {
								"notice": "Emitted once a stake is scheduled for withdrawal"
							},
							"UserOperationRevertReason(bytes32,address,uint256,bytes)": {
								"notice": "An event emitted if the UserOperation \"callData\" reverted with non-zero length"
							}
						},
						"kind": "user",
						"methods": {
							"addStake(uint32)": {
								"notice": "add to the account's stake - amount and delay any pending unstake is first cancelled."
							},
							"depositTo(address)": {
								"notice": "add to the deposit of the given account"
							},
							"getNonce(address,uint192)": {
								"notice": "Return the next nonce for this sender. Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop) But UserOp with different keys can come with arbitrary order."
							},
							"getSenderAddress(bytes)": {
								"notice": "Get counterfactual sender address.  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation. this method always revert, and returns the address in SenderAddressResult error"
							},
							"getUserOpHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
								"notice": "generate a request Id - unique identifier for this request. the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid."
							},
							"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)": {
								"notice": "Execute a batch of UserOperation with Aggregators"
							},
							"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)": {
								"notice": "Execute a batch of UserOperation. no signature aggregator is used. if any account requires an aggregator (that is, it returned an aggregator when performing simulateValidation), then handleAggregatedOps() must be used instead."
							},
							"incrementNonce(uint192)": {
								"notice": "Manually increment the nonce of the sender. This method is exposed just for completeness.. Account does NOT need to call it, neither during validation, nor elsewhere, as the EntryPoint will update the nonce regardless. Possible use-case is call it with various keys to \"initialize\" their nonces to one, so that future UserOperations will not pay extra for the first transaction with a given key."
							},
							"simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)": {
								"notice": "simulate full execution of a UserOperation (including both validation and target execution) this method will always revert with \"ExecutionResult\". it performs full validation of the UserOperation, but ignores signature error. an optional target address is called after the userop succeeds, and its value is returned (before the entire call is reverted) Note that in order to collect the success/failure of the target call, it must be executed with trace enabled to track the emitted events."
							},
							"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
								"notice": "Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp."
							},
							"unlockStake()": {
								"notice": "attempt to unlock the stake. the value can be withdrawn (using withdrawStake) after the unstake delay."
							},
							"withdrawStake(address)": {
								"notice": "withdraw from the (unlocked) stake. must first call unlockStake and wait for the unstakeDelay to pass"
							},
							"withdrawTo(address,uint256)": {
								"notice": "withdraw from the deposit."
							}
						},
						"version": 1
					}
				}
			},
			".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/INonceManager.sol": {
				"INonceManager": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint192",
									"name": "key",
									"type": "uint192"
								}
							],
							"name": "getNonce",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint192",
									"name": "key",
									"type": "uint192"
								}
							],
							"name": "incrementNonce",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"getNonce(address,uint192)": {
								"params": {
									"key": "the high 192 bit of the nonce",
									"sender": "the account address"
								},
								"returns": {
									"nonce": "a full nonce to pass for next UserOp with this sender."
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"getNonce(address,uint192)": "35567e1a",
							"incrementNonce(uint192)": "0bd28e3b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"incrementNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getNonce(address,uint192)\":{\"params\":{\"key\":\"the high 192 bit of the nonce\",\"sender\":\"the account address\"},\"returns\":{\"nonce\":\"a full nonce to pass for next UserOp with this sender.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getNonce(address,uint192)\":{\"notice\":\"Return the next nonce for this sender. Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop) But UserOp with different keys can come with arbitrary order.\"},\"incrementNonce(uint192)\":{\"notice\":\"Manually increment the nonce of the sender. This method is exposed just for completeness.. Account does NOT need to call it, neither during validation, nor elsewhere, as the EntryPoint will update the nonce regardless. Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future UserOperations will not pay extra for the first transaction with a given key.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/INonceManager.sol\":\"INonceManager\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/INonceManager.sol\":{\"keccak256\":\"0x77085fe40d8352eb6d16f02cca3b8b57db016e97173b5341104d4c4fc677531f\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://8c7eec5d8ebaef50e8e856364a6570cac01f609a3dfcd611af6d7fa550f05d54\",\"dweb:/ipfs/QmToDwfQAymfgUWUTg4VMnfZW72fGcmxWbGk1pipw5Bkm1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"getNonce(address,uint192)": {
								"notice": "Return the next nonce for this sender. Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop) But UserOp with different keys can come with arbitrary order."
							},
							"incrementNonce(uint192)": {
								"notice": "Manually increment the nonce of the sender. This method is exposed just for completeness.. Account does NOT need to call it, neither during validation, nor elsewhere, as the EntryPoint will update the nonce regardless. Possible use-case is call it with various keys to \"initialize\" their nonces to one, so that future UserOperations will not pay extra for the first transaction with a given key."
							}
						},
						"version": 1
					}
				}
			},
			".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IStakeManager.sol": {
				"IStakeManager": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "totalDeposit",
									"type": "uint256"
								}
							],
							"name": "Deposited",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "totalStaked",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "unstakeDelaySec",
									"type": "uint256"
								}
							],
							"name": "StakeLocked",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "withdrawTime",
									"type": "uint256"
								}
							],
							"name": "StakeUnlocked",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "withdrawAddress",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "StakeWithdrawn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "withdrawAddress",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "Withdrawn",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint32",
									"name": "_unstakeDelaySec",
									"type": "uint32"
								}
							],
							"name": "addStake",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "depositTo",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "getDepositInfo",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint112",
											"name": "deposit",
											"type": "uint112"
										},
										{
											"internalType": "bool",
											"name": "staked",
											"type": "bool"
										},
										{
											"internalType": "uint112",
											"name": "stake",
											"type": "uint112"
										},
										{
											"internalType": "uint32",
											"name": "unstakeDelaySec",
											"type": "uint32"
										},
										{
											"internalType": "uint48",
											"name": "withdrawTime",
											"type": "uint48"
										}
									],
									"internalType": "struct IStakeManager.DepositInfo",
									"name": "info",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unlockStake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address payable",
									"name": "withdrawAddress",
									"type": "address"
								}
							],
							"name": "withdrawStake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address payable",
									"name": "withdrawAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "withdrawAmount",
									"type": "uint256"
								}
							],
							"name": "withdrawTo",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"addStake(uint32)": {
								"params": {
									"_unstakeDelaySec": "the new lock duration before the deposit can be withdrawn."
								}
							},
							"balanceOf(address)": {
								"returns": {
									"_0": "the deposit (for gas payment) of the account"
								}
							},
							"getDepositInfo(address)": {
								"returns": {
									"info": "- full deposit information of given account"
								}
							},
							"withdrawStake(address)": {
								"params": {
									"withdrawAddress": "the address to send withdrawn value."
								}
							},
							"withdrawTo(address,uint256)": {
								"params": {
									"withdrawAddress": "the address to send withdrawn value.",
									"withdrawAmount": "the amount to withdraw."
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addStake(uint32)": "0396cb60",
							"balanceOf(address)": "70a08231",
							"depositTo(address)": "b760faf9",
							"getDepositInfo(address)": "5287ce12",
							"unlockStake()": "bb9fe6bf",
							"withdrawStake(address)": "c23a5cea",
							"withdrawTo(address,uint256)": "205c2878"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"name\":\"StakeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"}],\"name\":\"StakeUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_unstakeDelaySec\",\"type\":\"uint32\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDepositInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"deposit\",\"type\":\"uint112\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint112\",\"name\":\"stake\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"withdrawTime\",\"type\":\"uint48\"}],\"internalType\":\"struct IStakeManager.DepositInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addStake(uint32)\":{\"params\":{\"_unstakeDelaySec\":\"the new lock duration before the deposit can be withdrawn.\"}},\"balanceOf(address)\":{\"returns\":{\"_0\":\"the deposit (for gas payment) of the account\"}},\"getDepositInfo(address)\":{\"returns\":{\"info\":\"- full deposit information of given account\"}},\"withdrawStake(address)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\"}},\"withdrawTo(address,uint256)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\",\"withdrawAmount\":\"the amount to withdraw.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"StakeLocked(address,uint256,uint256)\":{\"notice\":\"Emitted when stake or unstake delay are modified\"},\"StakeUnlocked(address,uint256)\":{\"notice\":\"Emitted once a stake is scheduled for withdrawal\"}},\"kind\":\"user\",\"methods\":{\"addStake(uint32)\":{\"notice\":\"add to the account's stake - amount and delay any pending unstake is first cancelled.\"},\"depositTo(address)\":{\"notice\":\"add to the deposit of the given account\"},\"unlockStake()\":{\"notice\":\"attempt to unlock the stake. the value can be withdrawn (using withdrawStake) after the unstake delay.\"},\"withdrawStake(address)\":{\"notice\":\"withdraw from the (unlocked) stake. must first call unlockStake and wait for the unstakeDelay to pass\"},\"withdrawTo(address,uint256)\":{\"notice\":\"withdraw from the deposit.\"}},\"notice\":\"manage deposits and stakes. deposit is just a balance used to pay for UserOperations (either by a paymaster or an account) stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IStakeManager.sol\":\"IStakeManager\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IStakeManager.sol\":{\"keccak256\":\"0x56ed36384e0c62253769a2219b2e9161d88e5f58ae1f781fd3a540c8a399b9a7\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://9f26a6b28abc3eee5cf63938205ee6274d508b6f3acd5d1af0f041a2f239be45\",\"dweb:/ipfs/QmY4DYvnqU93ta3VNSa6nxNjoWoum6B8t8k9D7wLUvk6m1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"StakeLocked(address,uint256,uint256)": {
								"notice": "Emitted when stake or unstake delay are modified"
							},
							"StakeUnlocked(address,uint256)": {
								"notice": "Emitted once a stake is scheduled for withdrawal"
							}
						},
						"kind": "user",
						"methods": {
							"addStake(uint32)": {
								"notice": "add to the account's stake - amount and delay any pending unstake is first cancelled."
							},
							"depositTo(address)": {
								"notice": "add to the deposit of the given account"
							},
							"unlockStake()": {
								"notice": "attempt to unlock the stake. the value can be withdrawn (using withdrawStake) after the unstake delay."
							},
							"withdrawStake(address)": {
								"notice": "withdraw from the (unlocked) stake. must first call unlockStake and wait for the unstakeDelay to pass"
							},
							"withdrawTo(address,uint256)": {
								"notice": "withdraw from the deposit."
							}
						},
						"notice": "manage deposits and stakes. deposit is just a balance used to pay for UserOperations (either by a paymaster or an account) stake is value locked for at least \"unstakeDelay\" by the staked entity.",
						"version": 1
					}
				}
			}
		},
		"sources": {
			".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/UserOperation.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/UserOperation.sol",
					"exportedSymbols": {
						"UserOperation": [
							27
						],
						"UserOperationLib": [
							197
						],
						"calldataKeccak": [
							801
						]
					},
					"id": 198,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".12"
							],
							"nodeType": "PragmaDirective",
							"src": "37:24:0"
						},
						{
							"absolutePath": ".deps/npm/@thirdweb-dev/dynamic-contracts/src/utils/Helpers.sol",
							"file": "../../src/utils/Helpers.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 198,
							"sourceUnit": 802,
							"src": "109:61:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "calldataKeccak",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 801,
										"src": "118:14:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"canonicalName": "UserOperation",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "174:1004:0",
								"text": " User Operation struct\n @param sender the sender account of this request.\n @param nonce unique value the sender uses to verify it is not a replay.\n @param initCode if set, the account contract will be created by this constructor/\n @param callData the method call to execute on this account.\n @param callGasLimit the gas limit passed to the callData method call.\n @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\n @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\n @param maxFeePerGas same as EIP-1559 gas parameter.\n @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\n @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\n @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID."
							},
							"id": 27,
							"members": [
								{
									"constant": false,
									"id": 6,
									"mutability": "mutable",
									"name": "sender",
									"nameLocation": "1216:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 27,
									"src": "1208:14:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 5,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1208:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 8,
									"mutability": "mutable",
									"name": "nonce",
									"nameLocation": "1237:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 27,
									"src": "1229:13:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 7,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1229:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 10,
									"mutability": "mutable",
									"name": "initCode",
									"nameLocation": "1255:8:0",
									"nodeType": "VariableDeclaration",
									"scope": 27,
									"src": "1249:14:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes_storage_ptr",
										"typeString": "bytes"
									},
									"typeName": {
										"id": 9,
										"name": "bytes",
										"nodeType": "ElementaryTypeName",
										"src": "1249:5:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes_storage_ptr",
											"typeString": "bytes"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 12,
									"mutability": "mutable",
									"name": "callData",
									"nameLocation": "1276:8:0",
									"nodeType": "VariableDeclaration",
									"scope": 27,
									"src": "1270:14:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes_storage_ptr",
										"typeString": "bytes"
									},
									"typeName": {
										"id": 11,
										"name": "bytes",
										"nodeType": "ElementaryTypeName",
										"src": "1270:5:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes_storage_ptr",
											"typeString": "bytes"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 14,
									"mutability": "mutable",
									"name": "callGasLimit",
									"nameLocation": "1299:12:0",
									"nodeType": "VariableDeclaration",
									"scope": 27,
									"src": "1291:20:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 13,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1291:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 16,
									"mutability": "mutable",
									"name": "verificationGasLimit",
									"nameLocation": "1326:20:0",
									"nodeType": "VariableDeclaration",
									"scope": 27,
									"src": "1318:28:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 15,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1318:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 18,
									"mutability": "mutable",
									"name": "preVerificationGas",
									"nameLocation": "1361:18:0",
									"nodeType": "VariableDeclaration",
									"scope": 27,
									"src": "1353:26:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 17,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1353:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 20,
									"mutability": "mutable",
									"name": "maxFeePerGas",
									"nameLocation": "1394:12:0",
									"nodeType": "VariableDeclaration",
									"scope": 27,
									"src": "1386:20:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 19,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1386:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 22,
									"mutability": "mutable",
									"name": "maxPriorityFeePerGas",
									"nameLocation": "1421:20:0",
									"nodeType": "VariableDeclaration",
									"scope": 27,
									"src": "1413:28:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 21,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1413:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 24,
									"mutability": "mutable",
									"name": "paymasterAndData",
									"nameLocation": "1454:16:0",
									"nodeType": "VariableDeclaration",
									"scope": 27,
									"src": "1448:22:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes_storage_ptr",
										"typeString": "bytes"
									},
									"typeName": {
										"id": 23,
										"name": "bytes",
										"nodeType": "ElementaryTypeName",
										"src": "1448:5:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes_storage_ptr",
											"typeString": "bytes"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 26,
									"mutability": "mutable",
									"name": "signature",
									"nameLocation": "1483:9:0",
									"nodeType": "VariableDeclaration",
									"scope": 27,
									"src": "1477:15:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes_storage_ptr",
										"typeString": "bytes"
									},
									"typeName": {
										"id": 25,
										"name": "bytes",
										"nodeType": "ElementaryTypeName",
										"src": "1477:5:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes_storage_ptr",
											"typeString": "bytes"
										}
									},
									"visibility": "internal"
								}
							],
							"name": "UserOperation",
							"nameLocation": "1187:13:0",
							"nodeType": "StructDefinition",
							"scope": 198,
							"src": "1180:316:0",
							"visibility": "public"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "UserOperationLib",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 28,
								"nodeType": "StructuredDocumentation",
								"src": "1500:79:0",
								"text": " Utility functions helpful when working with UserOperation structs."
							},
							"fullyImplemented": true,
							"id": 197,
							"linearizedBaseContracts": [
								197
							],
							"name": "UserOperationLib",
							"nameLocation": "1589:16:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 48,
										"nodeType": "Block",
										"src": "1695:228:0",
										"statements": [
											{
												"assignments": [
													37
												],
												"declarations": [
													{
														"constant": false,
														"id": 37,
														"mutability": "mutable",
														"name": "data",
														"nameLocation": "1714:4:0",
														"nodeType": "VariableDeclaration",
														"scope": 48,
														"src": "1706:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 36,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1706:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 38,
												"nodeType": "VariableDeclarationStatement",
												"src": "1706:12:0"
											},
											{
												"AST": {
													"nativeSrc": "1822:54:0",
													"nodeType": "YulBlock",
													"src": "1822:54:0",
													"statements": [
														{
															"nativeSrc": "1837:28:0",
															"nodeType": "YulAssignment",
															"src": "1837:28:0",
															"value": {
																"arguments": [
																	{
																		"name": "userOp",
																		"nativeSrc": "1858:6:0",
																		"nodeType": "YulIdentifier",
																		"src": "1858:6:0"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1845:12:0",
																	"nodeType": "YulIdentifier",
																	"src": "1845:12:0"
																},
																"nativeSrc": "1845:20:0",
																"nodeType": "YulFunctionCall",
																"src": "1845:20:0"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "1837:4:0",
																	"nodeType": "YulIdentifier",
																	"src": "1837:4:0"
																}
															]
														}
													]
												},
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 37,
														"isOffset": false,
														"isSlot": false,
														"src": "1837:4:0",
														"valueSize": 1
													},
													{
														"declaration": 31,
														"isOffset": false,
														"isSlot": false,
														"src": "1858:6:0",
														"valueSize": 1
													}
												],
												"id": 39,
												"nodeType": "InlineAssembly",
												"src": "1813:63:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 44,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 37,
																	"src": "1909:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 43,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1901:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint160_$",
																	"typeString": "type(uint160)"
																},
																"typeName": {
																	"id": 42,
																	"name": "uint160",
																	"nodeType": "ElementaryTypeName",
																	"src": "1901:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 45,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1901:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														],
														"id": 41,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1893:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_$",
															"typeString": "type(address)"
														},
														"typeName": {
															"id": 40,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1893:7:0",
															"typeDescriptions": {}
														}
													},
													"id": 46,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1893:22:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 35,
												"id": 47,
												"nodeType": "Return",
												"src": "1886:29:0"
											}
										]
									},
									"id": 49,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getSender",
									"nameLocation": "1622:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 32,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 31,
												"mutability": "mutable",
												"name": "userOp",
												"nameLocation": "1655:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 49,
												"src": "1632:29:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UserOperation_$27_calldata_ptr",
													"typeString": "struct UserOperation"
												},
												"typeName": {
													"id": 30,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 29,
														"name": "UserOperation",
														"nameLocations": [
															"1632:13:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 27,
														"src": "1632:13:0"
													},
													"referencedDeclaration": 27,
													"src": "1632:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserOperation_$27_storage_ptr",
														"typeString": "struct UserOperation"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1631:31:0"
									},
									"returnParameters": {
										"id": 35,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 34,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 49,
												"src": "1686:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 33,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1686:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1685:9:0"
									},
									"scope": 197,
									"src": "1613:310:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "2148:437:0",
										"statements": [
											{
												"id": 82,
												"nodeType": "UncheckedBlock",
												"src": "2159:419:0",
												"statements": [
													{
														"assignments": [
															58
														],
														"declarations": [
															{
																"constant": false,
																"id": 58,
																"mutability": "mutable",
																"name": "maxFeePerGas",
																"nameLocation": "2192:12:0",
																"nodeType": "VariableDeclaration",
																"scope": 82,
																"src": "2184:20:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 57,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2184:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 61,
														"initialValue": {
															"expression": {
																"id": 59,
																"name": "userOp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 52,
																"src": "2207:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UserOperation_$27_calldata_ptr",
																	"typeString": "struct UserOperation calldata"
																}
															},
															"id": 60,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2214:12:0",
															"memberName": "maxFeePerGas",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 20,
															"src": "2207:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2184:42:0"
													},
													{
														"assignments": [
															63
														],
														"declarations": [
															{
																"constant": false,
																"id": 63,
																"mutability": "mutable",
																"name": "maxPriorityFeePerGas",
																"nameLocation": "2249:20:0",
																"nodeType": "VariableDeclaration",
																"scope": 82,
																"src": "2241:28:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 62,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2241:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 66,
														"initialValue": {
															"expression": {
																"id": 64,
																"name": "userOp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 52,
																"src": "2272:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UserOperation_$27_calldata_ptr",
																	"typeString": "struct UserOperation calldata"
																}
															},
															"id": 65,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2279:20:0",
															"memberName": "maxPriorityFeePerGas",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 22,
															"src": "2272:27:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2241:58:0"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 69,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 67,
																"name": "maxFeePerGas",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 58,
																"src": "2318:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 68,
																"name": "maxPriorityFeePerGas",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 63,
																"src": "2334:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2318:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 73,
														"nodeType": "IfStatement",
														"src": "2314:176:0",
														"trueBody": {
															"id": 72,
															"nodeType": "Block",
															"src": "2356:134:0",
															"statements": [
																{
																	"expression": {
																		"id": 70,
																		"name": "maxFeePerGas",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 58,
																		"src": "2462:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 56,
																	"id": 71,
																	"nodeType": "Return",
																	"src": "2455:19:0"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 75,
																	"name": "maxFeePerGas",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 58,
																	"src": "2515:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 79,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 76,
																		"name": "maxPriorityFeePerGas",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 63,
																		"src": "2529:20:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"expression": {
																			"id": 77,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967292,
																			"src": "2552:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 78,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2558:7:0",
																		"memberName": "basefee",
																		"nodeType": "MemberAccess",
																		"src": "2552:13:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2529:36:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 74,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 196,
																"src": "2511:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 80,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2511:55:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 56,
														"id": 81,
														"nodeType": "Return",
														"src": "2504:62:0"
													}
												]
											}
										]
									},
									"id": 84,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "gasPrice",
									"nameLocation": "2076:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 53,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 52,
												"mutability": "mutable",
												"name": "userOp",
												"nameLocation": "2108:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 84,
												"src": "2085:29:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UserOperation_$27_calldata_ptr",
													"typeString": "struct UserOperation"
												},
												"typeName": {
													"id": 51,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 50,
														"name": "UserOperation",
														"nameLocations": [
															"2085:13:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 27,
														"src": "2085:13:0"
													},
													"referencedDeclaration": 27,
													"src": "2085:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserOperation_$27_storage_ptr",
														"typeString": "struct UserOperation"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2084:31:0"
									},
									"returnParameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 84,
												"src": "2139:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 54,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2139:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2138:9:0"
									},
									"scope": 197,
									"src": "2067:518:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 163,
										"nodeType": "Block",
										"src": "2679:997:0",
										"statements": [
											{
												"assignments": [
													93
												],
												"declarations": [
													{
														"constant": false,
														"id": 93,
														"mutability": "mutable",
														"name": "sender",
														"nameLocation": "2698:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 163,
														"src": "2690:14:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 92,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2690:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 97,
												"initialValue": {
													"arguments": [
														{
															"id": 95,
															"name": "userOp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 87,
															"src": "2717:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_UserOperation_$27_calldata_ptr",
																"typeString": "struct UserOperation calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_UserOperation_$27_calldata_ptr",
																"typeString": "struct UserOperation calldata"
															}
														],
														"id": 94,
														"name": "getSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 49,
														"src": "2707:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_struct$_UserOperation_$27_calldata_ptr_$returns$_t_address_$",
															"typeString": "function (struct UserOperation calldata) pure returns (address)"
														}
													},
													"id": 96,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2707:17:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2690:34:0"
											},
											{
												"assignments": [
													99
												],
												"declarations": [
													{
														"constant": false,
														"id": 99,
														"mutability": "mutable",
														"name": "nonce",
														"nameLocation": "2743:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 163,
														"src": "2735:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 98,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2735:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 102,
												"initialValue": {
													"expression": {
														"id": 100,
														"name": "userOp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 87,
														"src": "2751:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_UserOperation_$27_calldata_ptr",
															"typeString": "struct UserOperation calldata"
														}
													},
													"id": 101,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2758:5:0",
													"memberName": "nonce",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 8,
													"src": "2751:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2735:28:0"
											},
											{
												"assignments": [
													104
												],
												"declarations": [
													{
														"constant": false,
														"id": 104,
														"mutability": "mutable",
														"name": "hashInitCode",
														"nameLocation": "2782:12:0",
														"nodeType": "VariableDeclaration",
														"scope": 163,
														"src": "2774:20:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 103,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2774:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 109,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 106,
																"name": "userOp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 87,
																"src": "2812:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UserOperation_$27_calldata_ptr",
																	"typeString": "struct UserOperation calldata"
																}
															},
															"id": 107,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2819:8:0",
															"memberName": "initCode",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 10,
															"src": "2812:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														],
														"id": 105,
														"name": "calldataKeccak",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 801,
														"src": "2797:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes_calldata_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes calldata) pure returns (bytes32)"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2797:31:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2774:54:0"
											},
											{
												"assignments": [
													111
												],
												"declarations": [
													{
														"constant": false,
														"id": 111,
														"mutability": "mutable",
														"name": "hashCallData",
														"nameLocation": "2847:12:0",
														"nodeType": "VariableDeclaration",
														"scope": 163,
														"src": "2839:20:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 110,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2839:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 116,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 113,
																"name": "userOp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 87,
																"src": "2877:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UserOperation_$27_calldata_ptr",
																	"typeString": "struct UserOperation calldata"
																}
															},
															"id": 114,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2884:8:0",
															"memberName": "callData",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 12,
															"src": "2877:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														],
														"id": 112,
														"name": "calldataKeccak",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 801,
														"src": "2862:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes_calldata_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes calldata) pure returns (bytes32)"
														}
													},
													"id": 115,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2862:31:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2839:54:0"
											},
											{
												"assignments": [
													118
												],
												"declarations": [
													{
														"constant": false,
														"id": 118,
														"mutability": "mutable",
														"name": "callGasLimit",
														"nameLocation": "2912:12:0",
														"nodeType": "VariableDeclaration",
														"scope": 163,
														"src": "2904:20:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 117,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2904:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 121,
												"initialValue": {
													"expression": {
														"id": 119,
														"name": "userOp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 87,
														"src": "2927:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_UserOperation_$27_calldata_ptr",
															"typeString": "struct UserOperation calldata"
														}
													},
													"id": 120,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2934:12:0",
													"memberName": "callGasLimit",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 14,
													"src": "2927:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2904:42:0"
											},
											{
												"assignments": [
													123
												],
												"declarations": [
													{
														"constant": false,
														"id": 123,
														"mutability": "mutable",
														"name": "verificationGasLimit",
														"nameLocation": "2965:20:0",
														"nodeType": "VariableDeclaration",
														"scope": 163,
														"src": "2957:28:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 122,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2957:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 126,
												"initialValue": {
													"expression": {
														"id": 124,
														"name": "userOp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 87,
														"src": "2988:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_UserOperation_$27_calldata_ptr",
															"typeString": "struct UserOperation calldata"
														}
													},
													"id": 125,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2995:20:0",
													"memberName": "verificationGasLimit",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 16,
													"src": "2988:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2957:58:0"
											},
											{
												"assignments": [
													128
												],
												"declarations": [
													{
														"constant": false,
														"id": 128,
														"mutability": "mutable",
														"name": "preVerificationGas",
														"nameLocation": "3034:18:0",
														"nodeType": "VariableDeclaration",
														"scope": 163,
														"src": "3026:26:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 127,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3026:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 131,
												"initialValue": {
													"expression": {
														"id": 129,
														"name": "userOp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 87,
														"src": "3055:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_UserOperation_$27_calldata_ptr",
															"typeString": "struct UserOperation calldata"
														}
													},
													"id": 130,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3062:18:0",
													"memberName": "preVerificationGas",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 18,
													"src": "3055:25:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3026:54:0"
											},
											{
												"assignments": [
													133
												],
												"declarations": [
													{
														"constant": false,
														"id": 133,
														"mutability": "mutable",
														"name": "maxFeePerGas",
														"nameLocation": "3099:12:0",
														"nodeType": "VariableDeclaration",
														"scope": 163,
														"src": "3091:20:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 132,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3091:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 136,
												"initialValue": {
													"expression": {
														"id": 134,
														"name": "userOp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 87,
														"src": "3114:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_UserOperation_$27_calldata_ptr",
															"typeString": "struct UserOperation calldata"
														}
													},
													"id": 135,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3121:12:0",
													"memberName": "maxFeePerGas",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 20,
													"src": "3114:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3091:42:0"
											},
											{
												"assignments": [
													138
												],
												"declarations": [
													{
														"constant": false,
														"id": 138,
														"mutability": "mutable",
														"name": "maxPriorityFeePerGas",
														"nameLocation": "3152:20:0",
														"nodeType": "VariableDeclaration",
														"scope": 163,
														"src": "3144:28:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 137,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3144:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 141,
												"initialValue": {
													"expression": {
														"id": 139,
														"name": "userOp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 87,
														"src": "3175:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_UserOperation_$27_calldata_ptr",
															"typeString": "struct UserOperation calldata"
														}
													},
													"id": 140,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3182:20:0",
													"memberName": "maxPriorityFeePerGas",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 22,
													"src": "3175:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3144:58:0"
											},
											{
												"assignments": [
													143
												],
												"declarations": [
													{
														"constant": false,
														"id": 143,
														"mutability": "mutable",
														"name": "hashPaymasterAndData",
														"nameLocation": "3221:20:0",
														"nodeType": "VariableDeclaration",
														"scope": 163,
														"src": "3213:28:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 142,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "3213:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 148,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 145,
																"name": "userOp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 87,
																"src": "3259:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UserOperation_$27_calldata_ptr",
																	"typeString": "struct UserOperation calldata"
																}
															},
															"id": 146,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3266:16:0",
															"memberName": "paymasterAndData",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 24,
															"src": "3259:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														],
														"id": 144,
														"name": "calldataKeccak",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 801,
														"src": "3244:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes_calldata_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes calldata) pure returns (bytes32)"
														}
													},
													"id": 147,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3244:39:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3213:70:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 151,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 93,
															"src": "3345:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 152,
															"name": "nonce",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 99,
															"src": "3370:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 153,
															"name": "hashInitCode",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 104,
															"src": "3394:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 154,
															"name": "hashCallData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 111,
															"src": "3425:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 155,
															"name": "callGasLimit",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 118,
															"src": "3456:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 156,
															"name": "verificationGasLimit",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 123,
															"src": "3487:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 157,
															"name": "preVerificationGas",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 128,
															"src": "3526:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 158,
															"name": "maxFeePerGas",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 133,
															"src": "3563:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 159,
															"name": "maxPriorityFeePerGas",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 138,
															"src": "3594:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 160,
															"name": "hashPaymasterAndData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 143,
															"src": "3633:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 149,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "3316:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 150,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "3320:6:0",
														"memberName": "encode",
														"nodeType": "MemberAccess",
														"src": "3316:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 161,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3316:352:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 91,
												"id": 162,
												"nodeType": "Return",
												"src": "3296:372:0"
											}
										]
									},
									"id": 164,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "pack",
									"nameLocation": "2602:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 87,
												"mutability": "mutable",
												"name": "userOp",
												"nameLocation": "2630:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 164,
												"src": "2607:29:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UserOperation_$27_calldata_ptr",
													"typeString": "struct UserOperation"
												},
												"typeName": {
													"id": 86,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 85,
														"name": "UserOperation",
														"nameLocations": [
															"2607:13:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 27,
														"src": "2607:13:0"
													},
													"referencedDeclaration": 27,
													"src": "2607:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserOperation_$27_storage_ptr",
														"typeString": "struct UserOperation"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2606:31:0"
									},
									"returnParameters": {
										"id": 91,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 90,
												"mutability": "mutable",
												"name": "ret",
												"nameLocation": "2674:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 164,
												"src": "2661:16:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 89,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2661:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2660:18:0"
									},
									"scope": 197,
									"src": "2593:1083:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 178,
										"nodeType": "Block",
										"src": "3761:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 174,
																	"name": "userOp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 167,
																	"src": "3794:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_UserOperation_$27_calldata_ptr",
																		"typeString": "struct UserOperation calldata"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_struct$_UserOperation_$27_calldata_ptr",
																		"typeString": "struct UserOperation calldata"
																	}
																],
																"id": 173,
																"name": "pack",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 164,
																"src": "3789:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_struct$_UserOperation_$27_calldata_ptr_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (struct UserOperation calldata) pure returns (bytes memory)"
																}
															},
															"id": 175,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3789:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 172,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "3779:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3779:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 171,
												"id": 177,
												"nodeType": "Return",
												"src": "3772:30:0"
											}
										]
									},
									"id": 179,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hash",
									"nameLocation": "3693:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 168,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 167,
												"mutability": "mutable",
												"name": "userOp",
												"nameLocation": "3721:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 179,
												"src": "3698:29:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UserOperation_$27_calldata_ptr",
													"typeString": "struct UserOperation"
												},
												"typeName": {
													"id": 166,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 165,
														"name": "UserOperation",
														"nameLocations": [
															"3698:13:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 27,
														"src": "3698:13:0"
													},
													"referencedDeclaration": 27,
													"src": "3698:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserOperation_$27_storage_ptr",
														"typeString": "struct UserOperation"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3697:31:0"
									},
									"returnParameters": {
										"id": 171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 179,
												"src": "3752:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 169,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3752:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3751:9:0"
									},
									"scope": 197,
									"src": "3684:126:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 195,
										"nodeType": "Block",
										"src": "3885:39:0",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 190,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 188,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 181,
															"src": "3903:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 189,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 183,
															"src": "3907:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3903:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 192,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 183,
														"src": "3915:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 193,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "3903:13:0",
													"trueExpression": {
														"id": 191,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 181,
														"src": "3911:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 187,
												"id": 194,
												"nodeType": "Return",
												"src": "3896:20:0"
											}
										]
									},
									"id": 196,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "3827:3:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 181,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3839:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 196,
												"src": "3831:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 180,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3831:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3850:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 196,
												"src": "3842:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 182,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3842:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3830:22:0"
									},
									"returnParameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 196,
												"src": "3876:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 185,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3876:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3875:9:0"
									},
									"scope": 197,
									"src": "3818:106:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 198,
							"src": "1581:2346:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "37:3890:0"
				},
				"id": 0
			},
			".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IAggregator.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IAggregator.sol",
					"exportedSymbols": {
						"IAggregator": [
							231
						],
						"UserOperation": [
							27
						],
						"UserOperationLib": [
							197
						],
						"calldataKeccak": [
							801
						]
					},
					"id": 232,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 199,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".12"
							],
							"nodeType": "PragmaDirective",
							"src": "37:24:1"
						},
						{
							"absolutePath": ".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/UserOperation.sol",
							"file": "../../extension/upgradeable/UserOperation.sol",
							"id": 200,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 232,
							"sourceUnit": 198,
							"src": "65:55:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IAggregator",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 201,
								"nodeType": "StructuredDocumentation",
								"src": "124:45:1",
								"text": " Aggregated Signatures validator."
							},
							"fullyImplemented": false,
							"id": 231,
							"linearizedBaseContracts": [
								231
							],
							"name": "IAggregator",
							"nameLocation": "181:11:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 202,
										"nodeType": "StructuredDocumentation",
										"src": "200:139:1",
										"text": " validate aggregated signature.\n revert if the aggregated signature does not match the given list of operations."
									},
									"functionSelector": "e3563a4f",
									"id": 211,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "validateSignatures",
									"nameLocation": "354:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "userOps",
												"nameLocation": "398:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "373:32:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_UserOperation_$27_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct UserOperation[]"
												},
												"typeName": {
													"baseType": {
														"id": 204,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 203,
															"name": "UserOperation",
															"nameLocations": [
																"373:13:1"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 27,
															"src": "373:13:1"
														},
														"referencedDeclaration": 27,
														"src": "373:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_UserOperation_$27_storage_ptr",
															"typeString": "struct UserOperation"
														}
													},
													"id": 205,
													"nodeType": "ArrayTypeName",
													"src": "373:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_UserOperation_$27_storage_$dyn_storage_ptr",
														"typeString": "struct UserOperation[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 208,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "422:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "407:24:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 207,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "407:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "372:60:1"
									},
									"returnParameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "446:0:1"
									},
									"scope": 231,
									"src": "345:102:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 212,
										"nodeType": "StructuredDocumentation",
										"src": "455:583:1",
										"text": " validate signature of a single userOp\n This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\n First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\n @param userOp the userOperation received from the user.\n @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\n    (usually empty, unless account and aggregator support some kind of \"multisig\""
									},
									"functionSelector": "64c530cd",
									"id": 220,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "validateUserOpSignature",
									"nameLocation": "1053:23:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 216,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 215,
												"mutability": "mutable",
												"name": "userOp",
												"nameLocation": "1100:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 220,
												"src": "1077:29:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UserOperation_$27_calldata_ptr",
													"typeString": "struct UserOperation"
												},
												"typeName": {
													"id": 214,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 213,
														"name": "UserOperation",
														"nameLocations": [
															"1077:13:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 27,
														"src": "1077:13:1"
													},
													"referencedDeclaration": 27,
													"src": "1077:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserOperation_$27_storage_ptr",
														"typeString": "struct UserOperation"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1076:31:1"
									},
									"returnParameters": {
										"id": 219,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 218,
												"mutability": "mutable",
												"name": "sigForUserOp",
												"nameLocation": "1144:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 220,
												"src": "1131:25:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 217,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1131:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1130:27:1"
									},
									"scope": 231,
									"src": "1044:114:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 221,
										"nodeType": "StructuredDocumentation",
										"src": "1166:374:1",
										"text": " aggregate multiple signatures into a single value.\n This method is called off-chain to calculate the signature to pass with handleOps()\n bundler MAY use optimized custom code perform this aggregation\n @param userOps array of UserOperations to collect the signatures from.\n @return aggregatedSignature the aggregated signature"
									},
									"functionSelector": "275e2d79",
									"id": 230,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "aggregateSignatures",
									"nameLocation": "1555:19:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 226,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 225,
												"mutability": "mutable",
												"name": "userOps",
												"nameLocation": "1610:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "1585:32:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_UserOperation_$27_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct UserOperation[]"
												},
												"typeName": {
													"baseType": {
														"id": 223,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 222,
															"name": "UserOperation",
															"nameLocations": [
																"1585:13:1"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 27,
															"src": "1585:13:1"
														},
														"referencedDeclaration": 27,
														"src": "1585:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_UserOperation_$27_storage_ptr",
															"typeString": "struct UserOperation"
														}
													},
													"id": 224,
													"nodeType": "ArrayTypeName",
													"src": "1585:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_UserOperation_$27_storage_$dyn_storage_ptr",
														"typeString": "struct UserOperation[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1574:50:1"
									},
									"returnParameters": {
										"id": 229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "aggregatedSignature",
												"nameLocation": "1661:19:1",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "1648:32:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 227,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1648:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1647:34:1"
									},
									"scope": 231,
									"src": "1546:136:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 232,
							"src": "171:1514:1",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "37:1648:1"
				},
				"id": 1
			},
			".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IEntryPoint.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IEntryPoint.sol",
					"exportedSymbols": {
						"IAggregator": [
							231
						],
						"IEntryPoint": [
							437
						],
						"INonceManager": [
							456
						],
						"IStakeManager": [
							562
						],
						"UserOperation": [
							27
						],
						"UserOperationLib": [
							197
						],
						"calldataKeccak": [
							801
						]
					},
					"id": 438,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 233,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".12"
							],
							"nodeType": "PragmaDirective",
							"src": "168:24:2"
						},
						{
							"absolutePath": ".deps/npm/@thirdweb-dev/dynamic-contracts/extension/upgradeable/UserOperation.sol",
							"file": "../../extension/upgradeable/UserOperation.sol",
							"id": 234,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 438,
							"sourceUnit": 198,
							"src": "322:55:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IStakeManager.sol",
							"file": "./IStakeManager.sol",
							"id": 235,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 438,
							"sourceUnit": 563,
							"src": "379:29:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IAggregator.sol",
							"file": "./IAggregator.sol",
							"id": 236,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 438,
							"sourceUnit": 232,
							"src": "410:27:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/INonceManager.sol",
							"file": "./INonceManager.sol",
							"id": 237,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 438,
							"sourceUnit": 457,
							"src": "439:29:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 238,
										"name": "IStakeManager",
										"nameLocations": [
											"497:13:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 562,
										"src": "497:13:2"
									},
									"id": 239,
									"nodeType": "InheritanceSpecifier",
									"src": "497:13:2"
								},
								{
									"baseName": {
										"id": 240,
										"name": "INonceManager",
										"nameLocations": [
											"512:13:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 456,
										"src": "512:13:2"
									},
									"id": 241,
									"nodeType": "InheritanceSpecifier",
									"src": "512:13:2"
								}
							],
							"canonicalName": "IEntryPoint",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 437,
							"linearizedBaseContracts": [
								437,
								456,
								562
							],
							"name": "IEntryPoint",
							"nameLocation": "482:11:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"eventSelector": "49628fd1471006c1482da88028e9ce4dbb080b815c9b0344d39e5a8e6ec1419f",
									"id": 257,
									"name": "UserOperationEvent",
									"nameLocation": "1243:18:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 256,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 243,
												"indexed": true,
												"mutability": "mutable",
												"name": "userOpHash",
												"nameLocation": "1288:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 257,
												"src": "1272:26:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 242,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1272:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 245,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "1325:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 257,
												"src": "1309:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 244,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1309:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 247,
												"indexed": true,
												"mutability": "mutable",
												"name": "paymaster",
												"nameLocation": "1358:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 257,
												"src": "1342:25:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 246,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1342:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 249,
												"indexed": false,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "1386:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 257,
												"src": "1378:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 248,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1378:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 251,
												"indexed": false,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "1407:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 257,
												"src": "1402:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 250,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1402:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 253,
												"indexed": false,
												"mutability": "mutable",
												"name": "actualGasCost",
												"nameLocation": "1433:13:2",
												"nodeType": "VariableDeclaration",
												"scope": 257,
												"src": "1425:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 252,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1425:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 255,
												"indexed": false,
												"mutability": "mutable",
												"name": "actualGasUsed",
												"nameLocation": "1465:13:2",
												"nodeType": "VariableDeclaration",
												"scope": 257,
												"src": "1457:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 254,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1457:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1261:224:2"
									},
									"src": "1237:249:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 258,
										"nodeType": "StructuredDocumentation",
										"src": "1494:339:2",
										"text": " account \"sender\" was deployed.\n @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\n @param sender the account that is deployed\n @param factory the factory used to deploy this account (in the initCode)\n @param paymaster the paymaster used by this UserOp"
									},
									"eventSelector": "d51a9c61267aa6196961883ecf5ff2da6619c37dac0fa92122513fb32c032d2d",
									"id": 268,
									"name": "AccountDeployed",
									"nameLocation": "1845:15:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 260,
												"indexed": true,
												"mutability": "mutable",
												"name": "userOpHash",
												"nameLocation": "1877:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "1861:26:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 259,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1861:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 262,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "1905:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "1889:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 261,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1889:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 264,
												"indexed": false,
												"mutability": "mutable",
												"name": "factory",
												"nameLocation": "1921:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "1913:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 263,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1913:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 266,
												"indexed": false,
												"mutability": "mutable",
												"name": "paymaster",
												"nameLocation": "1938:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "1930:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 265,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1930:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1860:88:2"
									},
									"src": "1839:110:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 269,
										"nodeType": "StructuredDocumentation",
										"src": "1957:343:2",
										"text": " An event emitted if the UserOperation \"callData\" reverted with non-zero length\n @param userOpHash the request unique identifier.\n @param sender the sender of this request\n @param nonce the nonce used in the request\n @param revertReason - the return bytes from the (reverted) call to \"callData\"."
									},
									"eventSelector": "1c4fada7374c0a9ee8841fc38afe82932dc0f8e69012e927f061a8bae611a201",
									"id": 279,
									"name": "UserOperationRevertReason",
									"nameLocation": "2312:25:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 278,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 271,
												"indexed": true,
												"mutability": "mutable",
												"name": "userOpHash",
												"nameLocation": "2364:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "2348:26:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 270,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2348:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 273,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "2401:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "2385:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 272,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2385:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 275,
												"indexed": false,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "2426:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "2418:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 274,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2418:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 277,
												"indexed": false,
												"mutability": "mutable",
												"name": "revertReason",
												"nameLocation": "2448:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "2442:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 276,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2442:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2337:130:2"
									},
									"src": "2306:162:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 280,
										"nodeType": "StructuredDocumentation",
										"src": "2476:161:2",
										"text": " an event emitted by handleOps(), before starting the execution loop.\n any event emitted before this event, is part of the validation."
									},
									"eventSelector": "bb47ee3e183a558b1a2ff0874b079f3fc5478b7454eacf2bfc5af2ff5878f972",
									"id": 282,
									"name": "BeforeExecution",
									"nameLocation": "2649:15:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 281,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2664:2:2"
									},
									"src": "2643:24:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 283,
										"nodeType": "StructuredDocumentation",
										"src": "2675:103:2",
										"text": " signature aggregator used by the following UserOperationEvents within this bundle."
									},
									"eventSelector": "575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d",
									"id": 287,
									"name": "SignatureAggregatorChanged",
									"nameLocation": "2790:26:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 285,
												"indexed": true,
												"mutability": "mutable",
												"name": "aggregator",
												"nameLocation": "2833:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 287,
												"src": "2817:26:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 284,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2817:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2816:28:2"
									},
									"src": "2784:61:2"
								},
								{
									"documentation": {
										"id": 288,
										"nodeType": "StructuredDocumentation",
										"src": "2853:765:2",
										"text": " a custom revert error of handleOps, to identify the offending op.\n  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\n  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\n  @param reason - revert reason\n      The string starts with a unique code \"AAmn\", where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,\n      so a failure can be attributed to the correct entity.\n   Should be caught in off-chain handleOps simulation and not happen on-chain.\n   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts."
									},
									"errorSelector": "220266b6",
									"id": 294,
									"name": "FailedOp",
									"nameLocation": "3630:8:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "opIndex",
												"nameLocation": "3647:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "3639:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 289,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3639:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "reason",
												"nameLocation": "3663:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "3656:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 291,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3656:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3638:32:2"
									},
									"src": "3624:47:2"
								},
								{
									"documentation": {
										"id": 295,
										"nodeType": "StructuredDocumentation",
										"src": "3679:116:2",
										"text": " error case when a signature aggregator fails to verify the aggregated signature it had created."
									},
									"errorSelector": "86a9f750",
									"id": 299,
									"name": "SignatureValidationFailed",
									"nameLocation": "3807:25:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 298,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 297,
												"mutability": "mutable",
												"name": "aggregator",
												"nameLocation": "3841:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 299,
												"src": "3833:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 296,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3833:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3832:20:2"
									},
									"src": "3801:52:2"
								},
								{
									"documentation": {
										"id": 300,
										"nodeType": "StructuredDocumentation",
										"src": "3861:333:2",
										"text": " Successful result from simulateValidation.\n @param returnInfo gas and time-range returned values\n @param senderInfo stake information about the sender\n @param factoryInfo stake information about the factory (if any)\n @param paymasterInfo stake information about the paymaster (if any)"
									},
									"errorSelector": "e0cff05f",
									"id": 314,
									"name": "ValidationResult",
									"nameLocation": "4206:16:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 303,
												"mutability": "mutable",
												"name": "returnInfo",
												"nameLocation": "4234:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "4223:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ReturnInfo_$412_memory_ptr",
													"typeString": "struct IEntryPoint.ReturnInfo"
												},
												"typeName": {
													"id": 302,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 301,
														"name": "ReturnInfo",
														"nameLocations": [
															"4223:10:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 412,
														"src": "4223:10:2"
													},
													"referencedDeclaration": 412,
													"src": "4223:10:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ReturnInfo_$412_storage_ptr",
														"typeString": "struct IEntryPoint.ReturnInfo"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 306,
												"mutability": "mutable",
												"name": "senderInfo",
												"nameLocation": "4256:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "4246:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StakeInfo_$514_memory_ptr",
													"typeString": "struct IStakeManager.StakeInfo"
												},
												"typeName": {
													"id": 305,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 304,
														"name": "StakeInfo",
														"nameLocations": [
															"4246:9:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 514,
														"src": "4246:9:2"
													},
													"referencedDeclaration": 514,
													"src": "4246:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakeInfo_$514_storage_ptr",
														"typeString": "struct IStakeManager.StakeInfo"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 309,
												"mutability": "mutable",
												"name": "factoryInfo",
												"nameLocation": "4278:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "4268:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StakeInfo_$514_memory_ptr",
													"typeString": "struct IStakeManager.StakeInfo"
												},
												"typeName": {
													"id": 308,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 307,
														"name": "StakeInfo",
														"nameLocations": [
															"4268:9:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 514,
														"src": "4268:9:2"
													},
													"referencedDeclaration": 514,
													"src": "4268:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakeInfo_$514_storage_ptr",
														"typeString": "struct IStakeManager.StakeInfo"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 312,
												"mutability": "mutable",
												"name": "paymasterInfo",
												"nameLocation": "4301:13:2",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "4291:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StakeInfo_$514_memory_ptr",
													"typeString": "struct IStakeManager.StakeInfo"
												},
												"typeName": {
													"id": 311,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 310,
														"name": "StakeInfo",
														"nameLocations": [
															"4291:9:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 514,
														"src": "4291:9:2"
													},
													"referencedDeclaration": 514,
													"src": "4291:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakeInfo_$514_storage_ptr",
														"typeString": "struct IStakeManager.StakeInfo"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4222:93:2"
									},
									"src": "4200:116:2"
								},
								{
									"documentation": {
										"id": 315,
										"nodeType": "StructuredDocumentation",
										"src": "4324:569:2",
										"text": " Successful result from simulateValidation, if the account returns a signature aggregator\n @param returnInfo gas and time-range returned values\n @param senderInfo stake information about the sender\n @param factoryInfo stake information about the factory (if any)\n @param paymasterInfo stake information about the paymaster (if any)\n @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\n      bundler MUST use it to verify the signature, or reject the UserOperation"
									},
									"errorSelector": "faecb4e4",
									"id": 332,
									"name": "ValidationResultWithAggregation",
									"nameLocation": "4905:31:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 331,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 318,
												"mutability": "mutable",
												"name": "returnInfo",
												"nameLocation": "4958:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 332,
												"src": "4947:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ReturnInfo_$412_memory_ptr",
													"typeString": "struct IEntryPoint.ReturnInfo"
												},
												"typeName": {
													"id": 317,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 316,
														"name": "ReturnInfo",
														"nameLocations": [
															"4947:10:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 412,
														"src": "4947:10:2"
													},
													"referencedDeclaration": 412,
													"src": "4947:10:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ReturnInfo_$412_storage_ptr",
														"typeString": "struct IEntryPoint.ReturnInfo"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 321,
												"mutability": "mutable",
												"name": "senderInfo",
												"nameLocation": "4989:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 332,
												"src": "4979:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StakeInfo_$514_memory_ptr",
													"typeString": "struct IStakeManager.StakeInfo"
												},
												"typeName": {
													"id": 320,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 319,
														"name": "StakeInfo",
														"nameLocations": [
															"4979:9:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 514,
														"src": "4979:9:2"
													},
													"referencedDeclaration": 514,
													"src": "4979:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakeInfo_$514_storage_ptr",
														"typeString": "struct IStakeManager.StakeInfo"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 324,
												"mutability": "mutable",
												"name": "factoryInfo",
												"nameLocation": "5020:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 332,
												"src": "5010:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StakeInfo_$514_memory_ptr",
													"typeString": "struct IStakeManager.StakeInfo"
												},
												"typeName": {
													"id": 323,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 322,
														"name": "StakeInfo",
														"nameLocations": [
															"5010:9:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 514,
														"src": "5010:9:2"
													},
													"referencedDeclaration": 514,
													"src": "5010:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakeInfo_$514_storage_ptr",
														"typeString": "struct IStakeManager.StakeInfo"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 327,
												"mutability": "mutable",
												"name": "paymasterInfo",
												"nameLocation": "5052:13:2",
												"nodeType": "VariableDeclaration",
												"scope": 332,
												"src": "5042:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StakeInfo_$514_memory_ptr",
													"typeString": "struct IStakeManager.StakeInfo"
												},
												"typeName": {
													"id": 326,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 325,
														"name": "StakeInfo",
														"nameLocations": [
															"5042:9:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 514,
														"src": "5042:9:2"
													},
													"referencedDeclaration": 514,
													"src": "5042:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakeInfo_$514_storage_ptr",
														"typeString": "struct IStakeManager.StakeInfo"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 330,
												"mutability": "mutable",
												"name": "aggregatorInfo",
												"nameLocation": "5096:14:2",
												"nodeType": "VariableDeclaration",
												"scope": 332,
												"src": "5076:34:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AggregatorStakeInfo_$419_memory_ptr",
													"typeString": "struct IEntryPoint.AggregatorStakeInfo"
												},
												"typeName": {
													"id": 329,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 328,
														"name": "AggregatorStakeInfo",
														"nameLocations": [
															"5076:19:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 419,
														"src": "5076:19:2"
													},
													"referencedDeclaration": 419,
													"src": "5076:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AggregatorStakeInfo_$419_storage_ptr",
														"typeString": "struct IEntryPoint.AggregatorStakeInfo"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4936:181:2"
									},
									"src": "4899:219:2"
								},
								{
									"documentation": {
										"id": 333,
										"nodeType": "StructuredDocumentation",
										"src": "5126:53:2",
										"text": " return value of getSenderAddress"
									},
									"errorSelector": "6ca7b806",
									"id": 337,
									"name": "SenderAddressResult",
									"nameLocation": "5191:19:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 335,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5219:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 337,
												"src": "5211:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 334,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5211:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5210:16:2"
									},
									"src": "5185:42:2"
								},
								{
									"documentation": {
										"id": 338,
										"nodeType": "StructuredDocumentation",
										"src": "5235:53:2",
										"text": " return value of simulateHandleOp"
									},
									"errorSelector": "8b7ac980",
									"id": 352,
									"name": "ExecutionResult",
									"nameLocation": "5300:15:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 351,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 340,
												"mutability": "mutable",
												"name": "preOpGas",
												"nameLocation": "5334:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 352,
												"src": "5326:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 339,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5326:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 342,
												"mutability": "mutable",
												"name": "paid",
												"nameLocation": "5361:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 352,
												"src": "5353:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 341,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5353:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 344,
												"mutability": "mutable",
												"name": "validAfter",
												"nameLocation": "5383:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 352,
												"src": "5376:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 343,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "5376:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 346,
												"mutability": "mutable",
												"name": "validUntil",
												"nameLocation": "5411:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 352,
												"src": "5404:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 345,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "5404:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 348,
												"mutability": "mutable",
												"name": "targetSuccess",
												"nameLocation": "5437:13:2",
												"nodeType": "VariableDeclaration",
												"scope": 352,
												"src": "5432:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 347,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5432:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 350,
												"mutability": "mutable",
												"name": "targetResult",
												"nameLocation": "5467:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 352,
												"src": "5461:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 349,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5461:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5315:171:2"
									},
									"src": "5294:193:2"
								},
								{
									"canonicalName": "IEntryPoint.UserOpsPerAggregator",
									"id": 362,
									"members": [
										{
											"constant": false,
											"id": 356,
											"mutability": "mutable",
											"name": "userOps",
											"nameLocation": "5589:7:2",
											"nodeType": "VariableDeclaration",
											"scope": 362,
											"src": "5573:23:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_struct$_UserOperation_$27_storage_$dyn_storage_ptr",
												"typeString": "struct UserOperation[]"
											},
											"typeName": {
												"baseType": {
													"id": 354,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 353,
														"name": "UserOperation",
														"nameLocations": [
															"5573:13:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 27,
														"src": "5573:13:2"
													},
													"referencedDeclaration": 27,
													"src": "5573:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserOperation_$27_storage_ptr",
														"typeString": "struct UserOperation"
													}
												},
												"id": 355,
												"nodeType": "ArrayTypeName",
												"src": "5573:15:2",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_UserOperation_$27_storage_$dyn_storage_ptr",
													"typeString": "struct UserOperation[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 359,
											"mutability": "mutable",
											"name": "aggregator",
											"nameLocation": "5650:10:2",
											"nodeType": "VariableDeclaration",
											"scope": 362,
											"src": "5638:22:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_IAggregator_$231",
												"typeString": "contract IAggregator"
											},
											"typeName": {
												"id": 358,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 357,
													"name": "IAggregator",
													"nameLocations": [
														"5638:11:2"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 231,
													"src": "5638:11:2"
												},
												"referencedDeclaration": 231,
												"src": "5638:11:2",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IAggregator_$231",
													"typeString": "contract IAggregator"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 361,
											"mutability": "mutable",
											"name": "signature",
											"nameLocation": "5710:9:2",
											"nodeType": "VariableDeclaration",
											"scope": 362,
											"src": "5704:15:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 360,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "5704:5:2",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "UserOpsPerAggregator",
									"nameLocation": "5541:20:2",
									"nodeType": "StructDefinition",
									"scope": 437,
									"src": "5534:193:2",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 363,
										"nodeType": "StructuredDocumentation",
										"src": "5735:375:2",
										"text": " Execute a batch of UserOperation.\n no signature aggregator is used.\n if any account requires an aggregator (that is, it returned an aggregator when\n performing simulateValidation), then handleAggregatedOps() must be used instead.\n @param ops the operations to execute\n @param beneficiary the address to receive the fees"
									},
									"functionSelector": "1fad948c",
									"id": 372,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "handleOps",
									"nameLocation": "6125:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 370,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 367,
												"mutability": "mutable",
												"name": "ops",
												"nameLocation": "6160:3:2",
												"nodeType": "VariableDeclaration",
												"scope": 372,
												"src": "6135:28:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_UserOperation_$27_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct UserOperation[]"
												},
												"typeName": {
													"baseType": {
														"id": 365,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 364,
															"name": "UserOperation",
															"nameLocations": [
																"6135:13:2"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 27,
															"src": "6135:13:2"
														},
														"referencedDeclaration": 27,
														"src": "6135:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_UserOperation_$27_storage_ptr",
															"typeString": "struct UserOperation"
														}
													},
													"id": 366,
													"nodeType": "ArrayTypeName",
													"src": "6135:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_UserOperation_$27_storage_$dyn_storage_ptr",
														"typeString": "struct UserOperation[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 369,
												"mutability": "mutable",
												"name": "beneficiary",
												"nameLocation": "6181:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 372,
												"src": "6165:27:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 368,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6165:15:2",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6134:59:2"
									},
									"returnParameters": {
										"id": 371,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6202:0:2"
									},
									"scope": 437,
									"src": "6116:87:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 373,
										"nodeType": "StructuredDocumentation",
										"src": "6211:253:2",
										"text": " Execute a batch of UserOperation with Aggregators\n @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\n @param beneficiary the address to receive the fees"
									},
									"functionSelector": "4b1d7cf5",
									"id": 382,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "handleAggregatedOps",
									"nameLocation": "6479:19:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 380,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 377,
												"mutability": "mutable",
												"name": "opsPerAggregator",
												"nameLocation": "6541:16:2",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "6509:48:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_UserOpsPerAggregator_$362_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct IEntryPoint.UserOpsPerAggregator[]"
												},
												"typeName": {
													"baseType": {
														"id": 375,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 374,
															"name": "UserOpsPerAggregator",
															"nameLocations": [
																"6509:20:2"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 362,
															"src": "6509:20:2"
														},
														"referencedDeclaration": 362,
														"src": "6509:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_UserOpsPerAggregator_$362_storage_ptr",
															"typeString": "struct IEntryPoint.UserOpsPerAggregator"
														}
													},
													"id": 376,
													"nodeType": "ArrayTypeName",
													"src": "6509:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_UserOpsPerAggregator_$362_storage_$dyn_storage_ptr",
														"typeString": "struct IEntryPoint.UserOpsPerAggregator[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 379,
												"mutability": "mutable",
												"name": "beneficiary",
												"nameLocation": "6584:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "6568:27:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 378,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6568:15:2",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6498:104:2"
									},
									"returnParameters": {
										"id": 381,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6611:0:2"
									},
									"scope": 437,
									"src": "6470:142:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 383,
										"nodeType": "StructuredDocumentation",
										"src": "6620:200:2",
										"text": " generate a request Id - unique identifier for this request.\n the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid."
									},
									"functionSelector": "a6193531",
									"id": 391,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getUserOpHash",
									"nameLocation": "6835:13:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 387,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "userOp",
												"nameLocation": "6872:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "6849:29:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UserOperation_$27_calldata_ptr",
													"typeString": "struct UserOperation"
												},
												"typeName": {
													"id": 385,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 384,
														"name": "UserOperation",
														"nameLocations": [
															"6849:13:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 27,
														"src": "6849:13:2"
													},
													"referencedDeclaration": 27,
													"src": "6849:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserOperation_$27_storage_ptr",
														"typeString": "struct UserOperation"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6848:31:2"
									},
									"returnParameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 389,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "6903:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 388,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6903:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6902:9:2"
									},
									"scope": 437,
									"src": "6826:86:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 392,
										"nodeType": "StructuredDocumentation",
										"src": "6920:403:2",
										"text": " Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\n @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\n @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\n @param userOp the user operation to validate."
									},
									"functionSelector": "ee219423",
									"id": 398,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "simulateValidation",
									"nameLocation": "7338:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 396,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 395,
												"mutability": "mutable",
												"name": "userOp",
												"nameLocation": "7380:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 398,
												"src": "7357:29:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UserOperation_$27_calldata_ptr",
													"typeString": "struct UserOperation"
												},
												"typeName": {
													"id": 394,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 393,
														"name": "UserOperation",
														"nameLocations": [
															"7357:13:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 27,
														"src": "7357:13:2"
													},
													"referencedDeclaration": 27,
													"src": "7357:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserOperation_$27_storage_ptr",
														"typeString": "struct UserOperation"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7356:31:2"
									},
									"returnParameters": {
										"id": 397,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7396:0:2"
									},
									"scope": 437,
									"src": "7329:68:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "IEntryPoint.ReturnInfo",
									"documentation": {
										"id": 399,
										"nodeType": "StructuredDocumentation",
										"src": "7405:596:2",
										"text": " gas and return values during simulation\n @param preOpGas the gas used for validation (including preValidationGas)\n @param prefund the required prefund for this operation\n @param sigFailed validateUserOp's (or paymaster's) signature check failed\n @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\n @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\n @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)"
									},
									"id": 412,
									"members": [
										{
											"constant": false,
											"id": 401,
											"mutability": "mutable",
											"name": "preOpGas",
											"nameLocation": "8044:8:2",
											"nodeType": "VariableDeclaration",
											"scope": 412,
											"src": "8036:16:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 400,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "8036:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 403,
											"mutability": "mutable",
											"name": "prefund",
											"nameLocation": "8071:7:2",
											"nodeType": "VariableDeclaration",
											"scope": 412,
											"src": "8063:15:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 402,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "8063:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 405,
											"mutability": "mutable",
											"name": "sigFailed",
											"nameLocation": "8094:9:2",
											"nodeType": "VariableDeclaration",
											"scope": 412,
											"src": "8089:14:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 404,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "8089:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 407,
											"mutability": "mutable",
											"name": "validAfter",
											"nameLocation": "8121:10:2",
											"nodeType": "VariableDeclaration",
											"scope": 412,
											"src": "8114:17:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											},
											"typeName": {
												"id": 406,
												"name": "uint48",
												"nodeType": "ElementaryTypeName",
												"src": "8114:6:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 409,
											"mutability": "mutable",
											"name": "validUntil",
											"nameLocation": "8149:10:2",
											"nodeType": "VariableDeclaration",
											"scope": 412,
											"src": "8142:17:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											},
											"typeName": {
												"id": 408,
												"name": "uint48",
												"nodeType": "ElementaryTypeName",
												"src": "8142:6:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 411,
											"mutability": "mutable",
											"name": "paymasterContext",
											"nameLocation": "8176:16:2",
											"nodeType": "VariableDeclaration",
											"scope": 412,
											"src": "8170:22:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 410,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "8170:5:2",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ReturnInfo",
									"nameLocation": "8014:10:2",
									"nodeType": "StructDefinition",
									"scope": 437,
									"src": "8007:193:2",
									"visibility": "public"
								},
								{
									"canonicalName": "IEntryPoint.AggregatorStakeInfo",
									"documentation": {
										"id": 413,
										"nodeType": "StructuredDocumentation",
										"src": "8208:127:2",
										"text": " returned aggregated signature info.\n the aggregator returned by the account, and its current stake."
									},
									"id": 419,
									"members": [
										{
											"constant": false,
											"id": 415,
											"mutability": "mutable",
											"name": "aggregator",
											"nameLocation": "8387:10:2",
											"nodeType": "VariableDeclaration",
											"scope": 419,
											"src": "8379:18:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 414,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "8379:7:2",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 418,
											"mutability": "mutable",
											"name": "stakeInfo",
											"nameLocation": "8418:9:2",
											"nodeType": "VariableDeclaration",
											"scope": 419,
											"src": "8408:19:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_StakeInfo_$514_storage_ptr",
												"typeString": "struct IStakeManager.StakeInfo"
											},
											"typeName": {
												"id": 417,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 416,
													"name": "StakeInfo",
													"nameLocations": [
														"8408:9:2"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 514,
													"src": "8408:9:2"
												},
												"referencedDeclaration": 514,
												"src": "8408:9:2",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StakeInfo_$514_storage_ptr",
													"typeString": "struct IStakeManager.StakeInfo"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AggregatorStakeInfo",
									"nameLocation": "8348:19:2",
									"nodeType": "StructDefinition",
									"scope": 437,
									"src": "8341:94:2",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 420,
										"nodeType": "StructuredDocumentation",
										"src": "8443:342:2",
										"text": " Get counterfactual sender address.\n  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\n this method always revert, and returns the address in SenderAddressResult error\n @param initCode the constructor code to be passed into the UserOperation."
									},
									"functionSelector": "9b249f69",
									"id": 425,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getSenderAddress",
									"nameLocation": "8800:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 423,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 422,
												"mutability": "mutable",
												"name": "initCode",
												"nameLocation": "8830:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 425,
												"src": "8817:21:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 421,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8817:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8816:23:2"
									},
									"returnParameters": {
										"id": 424,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8848:0:2"
									},
									"scope": 437,
									"src": "8791:58:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 426,
										"nodeType": "StructuredDocumentation",
										"src": "8857:855:2",
										"text": " simulate full execution of a UserOperation (including both validation and target execution)\n this method will always revert with \"ExecutionResult\".\n it performs full validation of the UserOperation, but ignores signature error.\n an optional target address is called after the userop succeeds, and its value is returned\n (before the entire call is reverted)\n Note that in order to collect the success/failure of the target call, it must be executed\n with trace enabled to track the emitted events.\n @param op the UserOperation to simulate\n @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\n        are set to the return from that call.\n @param targetCallData callData to pass to target address"
									},
									"functionSelector": "d6383f94",
									"id": 436,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "simulateHandleOp",
									"nameLocation": "9727:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 434,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "op",
												"nameLocation": "9767:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "9744:25:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UserOperation_$27_calldata_ptr",
													"typeString": "struct UserOperation"
												},
												"typeName": {
													"id": 428,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 427,
														"name": "UserOperation",
														"nameLocations": [
															"9744:13:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 27,
														"src": "9744:13:2"
													},
													"referencedDeclaration": 27,
													"src": "9744:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserOperation_$27_storage_ptr",
														"typeString": "struct UserOperation"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 431,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "9779:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "9771:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 430,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9771:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 433,
												"mutability": "mutable",
												"name": "targetCallData",
												"nameLocation": "9802:14:2",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "9787:29:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 432,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9787:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9743:74:2"
									},
									"returnParameters": {
										"id": 435,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9826:0:2"
									},
									"scope": 437,
									"src": "9718:109:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 438,
							"src": "472:9358:2",
							"usedErrors": [
								294,
								299,
								314,
								332,
								337,
								352
							],
							"usedEvents": [
								257,
								268,
								279,
								282,
								287,
								465,
								473,
								482,
								489,
								497
							]
						}
					],
					"src": "168:9662:2"
				},
				"id": 2
			},
			".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/INonceManager.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/INonceManager.sol",
					"exportedSymbols": {
						"INonceManager": [
							456
						]
					},
					"id": 457,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 439,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".12"
							],
							"nodeType": "PragmaDirective",
							"src": "37:24:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "INonceManager",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 456,
							"linearizedBaseContracts": [
								456
							],
							"name": "INonceManager",
							"nameLocation": "75:13:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 440,
										"nodeType": "StructuredDocumentation",
										"src": "96:424:3",
										"text": " Return the next nonce for this sender.\n Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\n But UserOp with different keys can come with arbitrary order.\n @param sender the account address\n @param key the high 192 bit of the nonce\n @return nonce a full nonce to pass for next UserOp with this sender."
									},
									"functionSelector": "35567e1a",
									"id": 449,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getNonce",
									"nameLocation": "535:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 445,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 442,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "552:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 449,
												"src": "544:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 441,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "544:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 444,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "568:3:3",
												"nodeType": "VariableDeclaration",
												"scope": 449,
												"src": "560:11:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint192",
													"typeString": "uint192"
												},
												"typeName": {
													"id": 443,
													"name": "uint192",
													"nodeType": "ElementaryTypeName",
													"src": "560:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint192",
														"typeString": "uint192"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "543:29:3"
									},
									"returnParameters": {
										"id": 448,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 447,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "604:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 449,
												"src": "596:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 446,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "596:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "595:15:3"
									},
									"scope": 456,
									"src": "526:85:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 450,
										"nodeType": "StructuredDocumentation",
										"src": "619:456:3",
										"text": " Manually increment the nonce of the sender.\n This method is exposed just for completeness..\n Account does NOT need to call it, neither during validation, nor elsewhere,\n as the EntryPoint will update the nonce regardless.\n Possible use-case is call it with various keys to \"initialize\" their nonces to one, so that future\n UserOperations will not pay extra for the first transaction with a given key."
									},
									"functionSelector": "0bd28e3b",
									"id": 455,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "incrementNonce",
									"nameLocation": "1090:14:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 452,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "1113:3:3",
												"nodeType": "VariableDeclaration",
												"scope": 455,
												"src": "1105:11:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint192",
													"typeString": "uint192"
												},
												"typeName": {
													"id": 451,
													"name": "uint192",
													"nodeType": "ElementaryTypeName",
													"src": "1105:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint192",
														"typeString": "uint192"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1104:13:3"
									},
									"returnParameters": {
										"id": 454,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1126:0:3"
									},
									"scope": 456,
									"src": "1081:46:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 457,
							"src": "65:1065:3",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "37:1093:3"
				},
				"id": 3
			},
			".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IStakeManager.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@thirdweb-dev/dynamic-contracts/src/interface/IStakeManager.sol",
					"exportedSymbols": {
						"IStakeManager": [
							562
						]
					},
					"id": 563,
					"license": "GPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 458,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".12"
							],
							"nodeType": "PragmaDirective",
							"src": "42:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IStakeManager",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 459,
								"nodeType": "StructuredDocumentation",
								"src": "70:215:4",
								"text": " manage deposits and stakes.\n deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\n stake is value locked for at least \"unstakeDelay\" by the staked entity."
							},
							"fullyImplemented": false,
							"id": 562,
							"linearizedBaseContracts": [
								562
							],
							"name": "IStakeManager",
							"nameLocation": "297:13:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"eventSelector": "2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4",
									"id": 465,
									"name": "Deposited",
									"nameLocation": "324:9:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 461,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "350:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 465,
												"src": "334:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 460,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "334:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 463,
												"indexed": false,
												"mutability": "mutable",
												"name": "totalDeposit",
												"nameLocation": "367:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 465,
												"src": "359:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 462,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "359:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "333:47:4"
									},
									"src": "318:63:4"
								},
								{
									"anonymous": false,
									"eventSelector": "d1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb",
									"id": 473,
									"name": "Withdrawn",
									"nameLocation": "395:9:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 467,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "421:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "405:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 466,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "405:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 469,
												"indexed": false,
												"mutability": "mutable",
												"name": "withdrawAddress",
												"nameLocation": "438:15:4",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "430:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 468,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "430:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 471,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "463:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "455:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 470,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "455:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "404:66:4"
									},
									"src": "389:82:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 474,
										"nodeType": "StructuredDocumentation",
										"src": "479:52:4",
										"text": "Emitted when stake or unstake delay are modified"
									},
									"eventSelector": "a5ae833d0bb1dcd632d98a8b70973e8516812898e19bf27b70071ebc8dc52c01",
									"id": 482,
									"name": "StakeLocked",
									"nameLocation": "543:11:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 481,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 476,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "571:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "555:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 475,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "555:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 478,
												"indexed": false,
												"mutability": "mutable",
												"name": "totalStaked",
												"nameLocation": "588:11:4",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "580:19:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 477,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "580:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 480,
												"indexed": false,
												"mutability": "mutable",
												"name": "unstakeDelaySec",
												"nameLocation": "609:15:4",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "601:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 479,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "601:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "554:71:4"
									},
									"src": "537:89:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 483,
										"nodeType": "StructuredDocumentation",
										"src": "634:52:4",
										"text": "Emitted once a stake is scheduled for withdrawal"
									},
									"eventSelector": "fa9b3c14cc825c412c9ed81b3ba365a5b459439403f18829e572ed53a4180f0a",
									"id": 489,
									"name": "StakeUnlocked",
									"nameLocation": "698:13:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 488,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 485,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "728:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 489,
												"src": "712:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 484,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "712:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 487,
												"indexed": false,
												"mutability": "mutable",
												"name": "withdrawTime",
												"nameLocation": "745:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 489,
												"src": "737:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 486,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "737:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "711:47:4"
									},
									"src": "692:67:4"
								},
								{
									"anonymous": false,
									"eventSelector": "b7c918e0e249f999e965cafeb6c664271b3f4317d296461500e71da39f0cbda3",
									"id": 497,
									"name": "StakeWithdrawn",
									"nameLocation": "773:14:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 491,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "804:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "788:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 490,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "788:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 493,
												"indexed": false,
												"mutability": "mutable",
												"name": "withdrawAddress",
												"nameLocation": "821:15:4",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "813:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 492,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "813:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 495,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "846:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "838:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 494,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "838:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "787:66:4"
									},
									"src": "767:87:4"
								},
								{
									"canonicalName": "IStakeManager.DepositInfo",
									"documentation": {
										"id": 498,
										"nodeType": "StructuredDocumentation",
										"src": "862:643:4",
										"text": " @param deposit the entity's deposit\n @param staked true if this entity is staked.\n @param stake actual amount of ether staked for this entity.\n @param unstakeDelaySec minimum delay to withdraw the stake.\n @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\n @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\n    and the rest fit into a 2nd cell.\n    112 bit allows for 10^15 eth\n    48 bit for full timestamp\n    32 bit allows 150 years for unstake delay"
									},
									"id": 509,
									"members": [
										{
											"constant": false,
											"id": 500,
											"mutability": "mutable",
											"name": "deposit",
											"nameLocation": "1549:7:4",
											"nodeType": "VariableDeclaration",
											"scope": 509,
											"src": "1541:15:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint112",
												"typeString": "uint112"
											},
											"typeName": {
												"id": 499,
												"name": "uint112",
												"nodeType": "ElementaryTypeName",
												"src": "1541:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_uint112",
													"typeString": "uint112"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 502,
											"mutability": "mutable",
											"name": "staked",
											"nameLocation": "1572:6:4",
											"nodeType": "VariableDeclaration",
											"scope": 509,
											"src": "1567:11:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 501,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1567:4:4",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 504,
											"mutability": "mutable",
											"name": "stake",
											"nameLocation": "1597:5:4",
											"nodeType": "VariableDeclaration",
											"scope": 509,
											"src": "1589:13:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint112",
												"typeString": "uint112"
											},
											"typeName": {
												"id": 503,
												"name": "uint112",
												"nodeType": "ElementaryTypeName",
												"src": "1589:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_uint112",
													"typeString": "uint112"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 506,
											"mutability": "mutable",
											"name": "unstakeDelaySec",
											"nameLocation": "1620:15:4",
											"nodeType": "VariableDeclaration",
											"scope": 509,
											"src": "1613:22:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											},
											"typeName": {
												"id": 505,
												"name": "uint32",
												"nodeType": "ElementaryTypeName",
												"src": "1613:6:4",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 508,
											"mutability": "mutable",
											"name": "withdrawTime",
											"nameLocation": "1653:12:4",
											"nodeType": "VariableDeclaration",
											"scope": 509,
											"src": "1646:19:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											},
											"typeName": {
												"id": 507,
												"name": "uint48",
												"nodeType": "ElementaryTypeName",
												"src": "1646:6:4",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "DepositInfo",
									"nameLocation": "1518:11:4",
									"nodeType": "StructDefinition",
									"scope": 562,
									"src": "1511:162:4",
									"visibility": "public"
								},
								{
									"canonicalName": "IStakeManager.StakeInfo",
									"id": 514,
									"members": [
										{
											"constant": false,
											"id": 511,
											"mutability": "mutable",
											"name": "stake",
											"nameLocation": "1779:5:4",
											"nodeType": "VariableDeclaration",
											"scope": 514,
											"src": "1771:13:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 510,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1771:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 513,
											"mutability": "mutable",
											"name": "unstakeDelaySec",
											"nameLocation": "1803:15:4",
											"nodeType": "VariableDeclaration",
											"scope": 514,
											"src": "1795:23:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 512,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1795:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StakeInfo",
									"nameLocation": "1750:9:4",
									"nodeType": "StructDefinition",
									"scope": 562,
									"src": "1743:83:4",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 515,
										"nodeType": "StructuredDocumentation",
										"src": "1834:60:4",
										"text": "@return info - full deposit information of given account"
									},
									"functionSelector": "5287ce12",
									"id": 523,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getDepositInfo",
									"nameLocation": "1909:14:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 518,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 517,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1932:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "1924:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 516,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1924:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1923:17:4"
									},
									"returnParameters": {
										"id": 522,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 521,
												"mutability": "mutable",
												"name": "info",
												"nameLocation": "1983:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "1964:23:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_DepositInfo_$509_memory_ptr",
													"typeString": "struct IStakeManager.DepositInfo"
												},
												"typeName": {
													"id": 520,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 519,
														"name": "DepositInfo",
														"nameLocations": [
															"1964:11:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 509,
														"src": "1964:11:4"
													},
													"referencedDeclaration": 509,
													"src": "1964:11:4",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_DepositInfo_$509_storage_ptr",
														"typeString": "struct IStakeManager.DepositInfo"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1963:25:4"
									},
									"scope": 562,
									"src": "1900:89:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 524,
										"nodeType": "StructuredDocumentation",
										"src": "1997:56:4",
										"text": "@return the deposit (for gas payment) of the account"
									},
									"functionSelector": "70a08231",
									"id": 531,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "2068:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 527,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 526,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2086:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "2078:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 525,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2078:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2077:17:4"
									},
									"returnParameters": {
										"id": 530,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 529,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "2118:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 528,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2118:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2117:9:4"
									},
									"scope": 562,
									"src": "2059:68:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 532,
										"nodeType": "StructuredDocumentation",
										"src": "2135:60:4",
										"text": " add to the deposit of the given account"
									},
									"functionSelector": "b760faf9",
									"id": 537,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "depositTo",
									"nameLocation": "2210:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 535,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 534,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2228:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 537,
												"src": "2220:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 533,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2220:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2219:17:4"
									},
									"returnParameters": {
										"id": 536,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2253:0:4"
									},
									"scope": 562,
									"src": "2201:53:4",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 538,
										"nodeType": "StructuredDocumentation",
										"src": "2262:205:4",
										"text": " add to the account's stake - amount and delay\n any pending unstake is first cancelled.\n @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn."
									},
									"functionSelector": "0396cb60",
									"id": 543,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addStake",
									"nameLocation": "2482:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 541,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 540,
												"mutability": "mutable",
												"name": "_unstakeDelaySec",
												"nameLocation": "2498:16:4",
												"nodeType": "VariableDeclaration",
												"scope": 543,
												"src": "2491:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 539,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "2491:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2490:25:4"
									},
									"returnParameters": {
										"id": 542,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2532:0:4"
									},
									"scope": 562,
									"src": "2473:60:4",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 544,
										"nodeType": "StructuredDocumentation",
										"src": "2541:131:4",
										"text": " attempt to unlock the stake.\n the value can be withdrawn (using withdrawStake) after the unstake delay."
									},
									"functionSelector": "bb9fe6bf",
									"id": 547,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unlockStake",
									"nameLocation": "2687:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 545,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2698:2:4"
									},
									"returnParameters": {
										"id": 546,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2709:0:4"
									},
									"scope": 562,
									"src": "2678:32:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 548,
										"nodeType": "StructuredDocumentation",
										"src": "2718:198:4",
										"text": " withdraw from the (unlocked) stake.\n must first call unlockStake and wait for the unstakeDelay to pass\n @param withdrawAddress the address to send withdrawn value."
									},
									"functionSelector": "c23a5cea",
									"id": 553,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "withdrawStake",
									"nameLocation": "2931:13:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 551,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 550,
												"mutability": "mutable",
												"name": "withdrawAddress",
												"nameLocation": "2961:15:4",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "2945:31:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 549,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2945:15:4",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2944:33:4"
									},
									"returnParameters": {
										"id": 552,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2986:0:4"
									},
									"scope": 562,
									"src": "2922:65:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 554,
										"nodeType": "StructuredDocumentation",
										"src": "2995:169:4",
										"text": " withdraw from the deposit.\n @param withdrawAddress the address to send withdrawn value.\n @param withdrawAmount the amount to withdraw."
									},
									"functionSelector": "205c2878",
									"id": 561,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "withdrawTo",
									"nameLocation": "3179:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 556,
												"mutability": "mutable",
												"name": "withdrawAddress",
												"nameLocation": "3206:15:4",
												"nodeType": "VariableDeclaration",
												"scope": 561,
												"src": "3190:31:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 555,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3190:15:4",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 558,
												"mutability": "mutable",
												"name": "withdrawAmount",
												"nameLocation": "3231:14:4",
												"nodeType": "VariableDeclaration",
												"scope": 561,
												"src": "3223:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 557,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3223:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3189:57:4"
									},
									"returnParameters": {
										"id": 560,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3255:0:4"
									},
									"scope": 562,
									"src": "3170:86:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 563,
							"src": "287:2972:4",
							"usedErrors": [],
							"usedEvents": [
								465,
								473,
								482,
								489,
								497
							]
						}
					],
					"src": "42:3217:4"
				},
				"id": 4
			},
			".deps/npm/@thirdweb-dev/dynamic-contracts/src/utils/Helpers.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@thirdweb-dev/dynamic-contracts/src/utils/Helpers.sol",
					"exportedSymbols": {
						"ValidationData": [
							572
						],
						"_intersectTimeRange": [
							716
						],
						"_packValidationData": [
							753,
							791
						],
						"_parseValidationData": [
							631
						],
						"calldataKeccak": [
							801
						]
					},
					"id": 802,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 564,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".12"
							],
							"nodeType": "PragmaDirective",
							"src": "37:24:5"
						},
						{
							"canonicalName": "ValidationData",
							"documentation": {
								"id": 565,
								"nodeType": "StructuredDocumentation",
								"src": "148:589:5",
								"text": " returned data from validateUserOp.\n validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\n @param aggregator - address(0) - the account validated the signature by itself.\n              address(1) - the account failed to validate the signature.\n              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\n @param validAfter - this UserOp is valid only after this timestamp.\n @param validaUntil - this UserOp is valid only up to this timestamp."
							},
							"id": 572,
							"members": [
								{
									"constant": false,
									"id": 567,
									"mutability": "mutable",
									"name": "aggregator",
									"nameLocation": "776:10:5",
									"nodeType": "VariableDeclaration",
									"scope": 572,
									"src": "768:18:5",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 566,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "768:7:5",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 569,
									"mutability": "mutable",
									"name": "validAfter",
									"nameLocation": "800:10:5",
									"nodeType": "VariableDeclaration",
									"scope": 572,
									"src": "793:17:5",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint48",
										"typeString": "uint48"
									},
									"typeName": {
										"id": 568,
										"name": "uint48",
										"nodeType": "ElementaryTypeName",
										"src": "793:6:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint48",
											"typeString": "uint48"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 571,
									"mutability": "mutable",
									"name": "validUntil",
									"nameLocation": "824:10:5",
									"nodeType": "VariableDeclaration",
									"scope": 572,
									"src": "817:17:5",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint48",
										"typeString": "uint48"
									},
									"typeName": {
										"id": 570,
										"name": "uint48",
										"nodeType": "ElementaryTypeName",
										"src": "817:6:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint48",
											"typeString": "uint48"
										}
									},
									"visibility": "internal"
								}
							],
							"name": "ValidationData",
							"nameLocation": "746:14:5",
							"nodeType": "StructDefinition",
							"scope": 802,
							"src": "739:99:5",
							"visibility": "public"
						},
						{
							"body": {
								"id": 630,
								"nodeType": "Block",
								"src": "1037:322:5",
								"statements": [
									{
										"assignments": [
											581
										],
										"declarations": [
											{
												"constant": false,
												"id": 581,
												"mutability": "mutable",
												"name": "aggregator",
												"nameLocation": "1052:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 630,
												"src": "1044:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 580,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1044:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"id": 589,
										"initialValue": {
											"arguments": [
												{
													"arguments": [
														{
															"id": 586,
															"name": "validationData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 574,
															"src": "1081:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 585,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1073:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint160_$",
															"typeString": "type(uint160)"
														},
														"typeName": {
															"id": 584,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "1073:7:5",
															"typeDescriptions": {}
														}
													},
													"id": 587,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1073:23:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												],
												"id": 583,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"lValueRequested": false,
												"nodeType": "ElementaryTypeNameExpression",
												"src": "1065:7:5",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_address_$",
													"typeString": "type(address)"
												},
												"typeName": {
													"id": 582,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1065:7:5",
													"typeDescriptions": {}
												}
											},
											"id": 588,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"kind": "typeConversion",
											"lValueRequested": false,
											"nameLocations": [],
											"names": [],
											"nodeType": "FunctionCall",
											"src": "1065:32:5",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "VariableDeclarationStatement",
										"src": "1044:53:5"
									},
									{
										"assignments": [
											591
										],
										"declarations": [
											{
												"constant": false,
												"id": 591,
												"mutability": "mutable",
												"name": "validUntil",
												"nameLocation": "1111:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 630,
												"src": "1104:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 590,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "1104:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											}
										],
										"id": 598,
										"initialValue": {
											"arguments": [
												{
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 596,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 594,
														"name": "validationData",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 574,
														"src": "1131:14:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">>",
													"rightExpression": {
														"hexValue": "313630",
														"id": 595,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1149:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_160_by_1",
															"typeString": "int_const 160"
														},
														"value": "160"
													},
													"src": "1131:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												],
												"id": 593,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"lValueRequested": false,
												"nodeType": "ElementaryTypeNameExpression",
												"src": "1124:6:5",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_uint48_$",
													"typeString": "type(uint48)"
												},
												"typeName": {
													"id": 592,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "1124:6:5",
													"typeDescriptions": {}
												}
											},
											"id": 597,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"kind": "typeConversion",
											"lValueRequested": false,
											"nameLocations": [],
											"names": [],
											"nodeType": "FunctionCall",
											"src": "1124:29:5",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											}
										},
										"nodeType": "VariableDeclarationStatement",
										"src": "1104:49:5"
									},
									{
										"condition": {
											"commonType": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											},
											"id": 601,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"lValueRequested": false,
											"leftExpression": {
												"id": 599,
												"name": "validUntil",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 591,
												"src": "1164:10:5",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												}
											},
											"nodeType": "BinaryOperation",
											"operator": "==",
											"rightExpression": {
												"hexValue": "30",
												"id": 600,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "1178:1:5",
												"typeDescriptions": {
													"typeIdentifier": "t_rational_0_by_1",
													"typeString": "int_const 0"
												},
												"value": "0"
											},
											"src": "1164:15:5",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										},
										"id": 611,
										"nodeType": "IfStatement",
										"src": "1160:69:5",
										"trueBody": {
											"id": 610,
											"nodeType": "Block",
											"src": "1181:48:5",
											"statements": [
												{
													"expression": {
														"id": 608,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 602,
															"name": "validUntil",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 591,
															"src": "1192:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint48",
																"typeString": "uint48"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"expression": {
																"arguments": [
																	{
																		"id": 605,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1210:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint48_$",
																			"typeString": "type(uint48)"
																		},
																		"typeName": {
																			"id": 604,
																			"name": "uint48",
																			"nodeType": "ElementaryTypeName",
																			"src": "1210:6:5",
																			"typeDescriptions": {}
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_uint48_$",
																			"typeString": "type(uint48)"
																		}
																	],
																	"id": 603,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "1205:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 606,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1205:12:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_uint48",
																	"typeString": "type(uint48)"
																}
															},
															"id": 607,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "1218:3:5",
															"memberName": "max",
															"nodeType": "MemberAccess",
															"src": "1205:16:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint48",
																"typeString": "uint48"
															}
														},
														"src": "1192:29:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint48",
															"typeString": "uint48"
														}
													},
													"id": 609,
													"nodeType": "ExpressionStatement",
													"src": "1192:29:5"
												}
											]
										}
									},
									{
										"assignments": [
											613
										],
										"declarations": [
											{
												"constant": false,
												"id": 613,
												"mutability": "mutable",
												"name": "validAfter",
												"nameLocation": "1242:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 630,
												"src": "1235:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 612,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "1235:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											}
										],
										"id": 623,
										"initialValue": {
											"arguments": [
												{
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 621,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 616,
														"name": "validationData",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 574,
														"src": "1262:14:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">>",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_rational_208_by_1",
																	"typeString": "int_const 208"
																},
																"id": 619,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3438",
																	"id": 617,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1281:2:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_48_by_1",
																		"typeString": "int_const 48"
																	},
																	"value": "48"
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "313630",
																	"id": 618,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1286:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_160_by_1",
																		"typeString": "int_const 160"
																	},
																	"value": "160"
																},
																"src": "1281:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_208_by_1",
																	"typeString": "int_const 208"
																}
															}
														],
														"id": 620,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1280:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_208_by_1",
															"typeString": "int_const 208"
														}
													},
													"src": "1262:28:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												],
												"id": 615,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"lValueRequested": false,
												"nodeType": "ElementaryTypeNameExpression",
												"src": "1255:6:5",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_uint48_$",
													"typeString": "type(uint48)"
												},
												"typeName": {
													"id": 614,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "1255:6:5",
													"typeDescriptions": {}
												}
											},
											"id": 622,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"kind": "typeConversion",
											"lValueRequested": false,
											"nameLocations": [],
											"names": [],
											"nodeType": "FunctionCall",
											"src": "1255:36:5",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											}
										},
										"nodeType": "VariableDeclarationStatement",
										"src": "1235:56:5"
									},
									{
										"expression": {
											"arguments": [
												{
													"id": 625,
													"name": "aggregator",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 581,
													"src": "1320:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												{
													"id": 626,
													"name": "validAfter",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 613,
													"src": "1332:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												{
													"id": 627,
													"name": "validUntil",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 591,
													"src": "1344:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													{
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													},
													{
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												],
												"id": 624,
												"name": "ValidationData",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 572,
												"src": "1305:14:5",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_struct$_ValidationData_$572_storage_ptr_$",
													"typeString": "type(struct ValidationData storage pointer)"
												}
											},
											"id": 628,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"kind": "structConstructorCall",
											"lValueRequested": false,
											"nameLocations": [],
											"names": [],
											"nodeType": "FunctionCall",
											"src": "1305:50:5",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_ValidationData_$572_memory_ptr",
												"typeString": "struct ValidationData memory"
											}
										},
										"functionReturnParameters": 579,
										"id": 629,
										"nodeType": "Return",
										"src": "1298:57:5"
									}
								]
							},
							"id": 631,
							"implemented": true,
							"kind": "freeFunction",
							"modifiers": [],
							"name": "_parseValidationData",
							"nameLocation": "950:20:5",
							"nodeType": "FunctionDefinition",
							"parameters": {
								"id": 575,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 574,
										"mutability": "mutable",
										"name": "validationData",
										"nameLocation": "979:14:5",
										"nodeType": "VariableDeclaration",
										"scope": 631,
										"src": "971:22:5",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"typeName": {
											"id": 573,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "971:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "970:24:5"
							},
							"returnParameters": {
								"id": 579,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 578,
										"mutability": "mutable",
										"name": "data",
										"nameLocation": "1031:4:5",
										"nodeType": "VariableDeclaration",
										"scope": 631,
										"src": "1009:26:5",
										"stateVariable": false,
										"storageLocation": "memory",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_ValidationData_$572_memory_ptr",
											"typeString": "struct ValidationData"
										},
										"typeName": {
											"id": 577,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 576,
												"name": "ValidationData",
												"nameLocations": [
													"1009:14:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 572,
												"src": "1009:14:5"
											},
											"referencedDeclaration": 572,
											"src": "1009:14:5",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_ValidationData_$572_storage_ptr",
												"typeString": "struct ValidationData"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "1008:28:5"
							},
							"scope": 802,
							"src": "941:418:5",
							"stateMutability": "pure",
							"virtual": false,
							"visibility": "internal"
						},
						{
							"body": {
								"id": 715,
								"nodeType": "Block",
								"src": "1543:763:5",
								"statements": [
									{
										"assignments": [
											643
										],
										"declarations": [
											{
												"constant": false,
												"id": 643,
												"mutability": "mutable",
												"name": "accountValidationData",
												"nameLocation": "1572:21:5",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "1550:43:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ValidationData_$572_memory_ptr",
													"typeString": "struct ValidationData"
												},
												"typeName": {
													"id": 642,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 641,
														"name": "ValidationData",
														"nameLocations": [
															"1550:14:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 572,
														"src": "1550:14:5"
													},
													"referencedDeclaration": 572,
													"src": "1550:14:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ValidationData_$572_storage_ptr",
														"typeString": "struct ValidationData"
													}
												},
												"visibility": "internal"
											}
										],
										"id": 647,
										"initialValue": {
											"arguments": [
												{
													"id": 645,
													"name": "validationData",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 633,
													"src": "1617:14:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												],
												"id": 644,
												"name": "_parseValidationData",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 631,
												"src": "1596:20:5",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_struct$_ValidationData_$572_memory_ptr_$",
													"typeString": "function (uint256) pure returns (struct ValidationData memory)"
												}
											},
											"id": 646,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"kind": "functionCall",
											"lValueRequested": false,
											"nameLocations": [],
											"names": [],
											"nodeType": "FunctionCall",
											"src": "1596:36:5",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_ValidationData_$572_memory_ptr",
												"typeString": "struct ValidationData memory"
											}
										},
										"nodeType": "VariableDeclarationStatement",
										"src": "1550:82:5"
									},
									{
										"assignments": [
											650
										],
										"declarations": [
											{
												"constant": false,
												"id": 650,
												"mutability": "mutable",
												"name": "pmValidationData",
												"nameLocation": "1661:16:5",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "1639:38:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ValidationData_$572_memory_ptr",
													"typeString": "struct ValidationData"
												},
												"typeName": {
													"id": 649,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 648,
														"name": "ValidationData",
														"nameLocations": [
															"1639:14:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 572,
														"src": "1639:14:5"
													},
													"referencedDeclaration": 572,
													"src": "1639:14:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ValidationData_$572_storage_ptr",
														"typeString": "struct ValidationData"
													}
												},
												"visibility": "internal"
											}
										],
										"id": 654,
										"initialValue": {
											"arguments": [
												{
													"id": 652,
													"name": "paymasterValidationData",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 635,
													"src": "1701:23:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												],
												"id": 651,
												"name": "_parseValidationData",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 631,
												"src": "1680:20:5",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_struct$_ValidationData_$572_memory_ptr_$",
													"typeString": "function (uint256) pure returns (struct ValidationData memory)"
												}
											},
											"id": 653,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"kind": "functionCall",
											"lValueRequested": false,
											"nameLocations": [],
											"names": [],
											"nodeType": "FunctionCall",
											"src": "1680:45:5",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_ValidationData_$572_memory_ptr",
												"typeString": "struct ValidationData memory"
											}
										},
										"nodeType": "VariableDeclarationStatement",
										"src": "1639:86:5"
									},
									{
										"assignments": [
											656
										],
										"declarations": [
											{
												"constant": false,
												"id": 656,
												"mutability": "mutable",
												"name": "aggregator",
												"nameLocation": "1740:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "1732:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 655,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1732:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"id": 659,
										"initialValue": {
											"expression": {
												"id": 657,
												"name": "accountValidationData",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 643,
												"src": "1753:21:5",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ValidationData_$572_memory_ptr",
													"typeString": "struct ValidationData memory"
												}
											},
											"id": 658,
											"isConstant": false,
											"isLValue": true,
											"isPure": false,
											"lValueRequested": false,
											"memberLocation": "1775:10:5",
											"memberName": "aggregator",
											"nodeType": "MemberAccess",
											"referencedDeclaration": 567,
											"src": "1753:32:5",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "VariableDeclarationStatement",
										"src": "1732:53:5"
									},
									{
										"condition": {
											"commonType": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"id": 665,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"lValueRequested": false,
											"leftExpression": {
												"id": 660,
												"name": "aggregator",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 656,
												"src": "1796:10:5",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "BinaryOperation",
											"operator": "==",
											"rightExpression": {
												"arguments": [
													{
														"hexValue": "30",
														"id": 663,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1818:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													}
												],
												"expression": {
													"argumentTypes": [
														{
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														}
													],
													"id": 662,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"nodeType": "ElementaryTypeNameExpression",
													"src": "1810:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_type$_t_address_$",
														"typeString": "type(address)"
													},
													"typeName": {
														"id": 661,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1810:7:5",
														"typeDescriptions": {}
													}
												},
												"id": 664,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "typeConversion",
												"lValueRequested": false,
												"nameLocations": [],
												"names": [],
												"nodeType": "FunctionCall",
												"src": "1810:10:5",
												"tryCall": false,
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"src": "1796:24:5",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										},
										"id": 672,
										"nodeType": "IfStatement",
										"src": "1792:89:5",
										"trueBody": {
											"id": 671,
											"nodeType": "Block",
											"src": "1822:59:5",
											"statements": [
												{
													"expression": {
														"id": 669,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 666,
															"name": "aggregator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 656,
															"src": "1833:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"expression": {
																"id": 667,
																"name": "pmValidationData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 650,
																"src": "1846:16:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_ValidationData_$572_memory_ptr",
																	"typeString": "struct ValidationData memory"
																}
															},
															"id": 668,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1863:10:5",
															"memberName": "aggregator",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 567,
															"src": "1846:27:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "1833:40:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 670,
													"nodeType": "ExpressionStatement",
													"src": "1833:40:5"
												}
											]
										}
									},
									{
										"assignments": [
											674
										],
										"declarations": [
											{
												"constant": false,
												"id": 674,
												"mutability": "mutable",
												"name": "validAfter",
												"nameLocation": "1894:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "1887:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 673,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "1887:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											}
										],
										"id": 677,
										"initialValue": {
											"expression": {
												"id": 675,
												"name": "accountValidationData",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 643,
												"src": "1907:21:5",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ValidationData_$572_memory_ptr",
													"typeString": "struct ValidationData memory"
												}
											},
											"id": 676,
											"isConstant": false,
											"isLValue": true,
											"isPure": false,
											"lValueRequested": false,
											"memberLocation": "1929:10:5",
											"memberName": "validAfter",
											"nodeType": "MemberAccess",
											"referencedDeclaration": 569,
											"src": "1907:32:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											}
										},
										"nodeType": "VariableDeclarationStatement",
										"src": "1887:52:5"
									},
									{
										"assignments": [
											679
										],
										"declarations": [
											{
												"constant": false,
												"id": 679,
												"mutability": "mutable",
												"name": "validUntil",
												"nameLocation": "1953:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "1946:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 678,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "1946:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											}
										],
										"id": 682,
										"initialValue": {
											"expression": {
												"id": 680,
												"name": "accountValidationData",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 643,
												"src": "1966:21:5",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ValidationData_$572_memory_ptr",
													"typeString": "struct ValidationData memory"
												}
											},
											"id": 681,
											"isConstant": false,
											"isLValue": true,
											"isPure": false,
											"lValueRequested": false,
											"memberLocation": "1988:10:5",
											"memberName": "validUntil",
											"nodeType": "MemberAccess",
											"referencedDeclaration": 571,
											"src": "1966:32:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											}
										},
										"nodeType": "VariableDeclarationStatement",
										"src": "1946:52:5"
									},
									{
										"assignments": [
											684
										],
										"declarations": [
											{
												"constant": false,
												"id": 684,
												"mutability": "mutable",
												"name": "pmValidAfter",
												"nameLocation": "2012:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "2005:19:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 683,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "2005:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											}
										],
										"id": 687,
										"initialValue": {
											"expression": {
												"id": 685,
												"name": "pmValidationData",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 650,
												"src": "2027:16:5",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ValidationData_$572_memory_ptr",
													"typeString": "struct ValidationData memory"
												}
											},
											"id": 686,
											"isConstant": false,
											"isLValue": true,
											"isPure": false,
											"lValueRequested": false,
											"memberLocation": "2044:10:5",
											"memberName": "validAfter",
											"nodeType": "MemberAccess",
											"referencedDeclaration": 569,
											"src": "2027:27:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											}
										},
										"nodeType": "VariableDeclarationStatement",
										"src": "2005:49:5"
									},
									{
										"assignments": [
											689
										],
										"declarations": [
											{
												"constant": false,
												"id": 689,
												"mutability": "mutable",
												"name": "pmValidUntil",
												"nameLocation": "2068:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "2061:19:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 688,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "2061:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											}
										],
										"id": 692,
										"initialValue": {
											"expression": {
												"id": 690,
												"name": "pmValidationData",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 650,
												"src": "2083:16:5",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ValidationData_$572_memory_ptr",
													"typeString": "struct ValidationData memory"
												}
											},
											"id": 691,
											"isConstant": false,
											"isLValue": true,
											"isPure": false,
											"lValueRequested": false,
											"memberLocation": "2100:10:5",
											"memberName": "validUntil",
											"nodeType": "MemberAccess",
											"referencedDeclaration": 571,
											"src": "2083:27:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											}
										},
										"nodeType": "VariableDeclarationStatement",
										"src": "2061:49:5"
									},
									{
										"condition": {
											"commonType": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											},
											"id": 695,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"lValueRequested": false,
											"leftExpression": {
												"id": 693,
												"name": "validAfter",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 674,
												"src": "2123:10:5",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												}
											},
											"nodeType": "BinaryOperation",
											"operator": "<",
											"rightExpression": {
												"id": 694,
												"name": "pmValidAfter",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 684,
												"src": "2136:12:5",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												}
											},
											"src": "2123:25:5",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										},
										"id": 700,
										"nodeType": "IfStatement",
										"src": "2119:56:5",
										"trueBody": {
											"expression": {
												"id": 698,
												"isConstant": false,
												"isLValue": false,
												"isPure": false,
												"lValueRequested": false,
												"leftHandSide": {
													"id": 696,
													"name": "validAfter",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 674,
													"src": "2150:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"nodeType": "Assignment",
												"operator": "=",
												"rightHandSide": {
													"id": 697,
													"name": "pmValidAfter",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 684,
													"src": "2163:12:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"src": "2150:25:5",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												}
											},
											"id": 699,
											"nodeType": "ExpressionStatement",
											"src": "2150:25:5"
										}
									},
									{
										"condition": {
											"commonType": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											},
											"id": 703,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"lValueRequested": false,
											"leftExpression": {
												"id": 701,
												"name": "validUntil",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 679,
												"src": "2186:10:5",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												}
											},
											"nodeType": "BinaryOperation",
											"operator": ">",
											"rightExpression": {
												"id": 702,
												"name": "pmValidUntil",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 689,
												"src": "2199:12:5",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												}
											},
											"src": "2186:25:5",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										},
										"id": 708,
										"nodeType": "IfStatement",
										"src": "2182:56:5",
										"trueBody": {
											"expression": {
												"id": 706,
												"isConstant": false,
												"isLValue": false,
												"isPure": false,
												"lValueRequested": false,
												"leftHandSide": {
													"id": 704,
													"name": "validUntil",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 679,
													"src": "2213:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"nodeType": "Assignment",
												"operator": "=",
												"rightHandSide": {
													"id": 705,
													"name": "pmValidUntil",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 689,
													"src": "2226:12:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"src": "2213:25:5",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												}
											},
											"id": 707,
											"nodeType": "ExpressionStatement",
											"src": "2213:25:5"
										}
									},
									{
										"expression": {
											"arguments": [
												{
													"id": 710,
													"name": "aggregator",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 656,
													"src": "2267:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												{
													"id": 711,
													"name": "validAfter",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 674,
													"src": "2279:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												{
													"id": 712,
													"name": "validUntil",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 679,
													"src": "2291:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													{
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													},
													{
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												],
												"id": 709,
												"name": "ValidationData",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 572,
												"src": "2252:14:5",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_struct$_ValidationData_$572_storage_ptr_$",
													"typeString": "type(struct ValidationData storage pointer)"
												}
											},
											"id": 713,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"kind": "structConstructorCall",
											"lValueRequested": false,
											"nameLocations": [],
											"names": [],
											"nodeType": "FunctionCall",
											"src": "2252:50:5",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_ValidationData_$572_memory_ptr",
												"typeString": "struct ValidationData memory"
											}
										},
										"functionReturnParameters": 640,
										"id": 714,
										"nodeType": "Return",
										"src": "2245:57:5"
									}
								]
							},
							"id": 716,
							"implemented": true,
							"kind": "freeFunction",
							"modifiers": [],
							"name": "_intersectTimeRange",
							"nameLocation": "1416:19:5",
							"nodeType": "FunctionDefinition",
							"parameters": {
								"id": 636,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 633,
										"mutability": "mutable",
										"name": "validationData",
										"nameLocation": "1450:14:5",
										"nodeType": "VariableDeclaration",
										"scope": 716,
										"src": "1442:22:5",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"typeName": {
											"id": 632,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1442:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"visibility": "internal"
									},
									{
										"constant": false,
										"id": 635,
										"mutability": "mutable",
										"name": "paymasterValidationData",
										"nameLocation": "1479:23:5",
										"nodeType": "VariableDeclaration",
										"scope": 716,
										"src": "1471:31:5",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"typeName": {
											"id": 634,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1471:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "1435:70:5"
							},
							"returnParameters": {
								"id": 640,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 639,
										"mutability": "mutable",
										"name": "",
										"nameLocation": "-1:-1:-1",
										"nodeType": "VariableDeclaration",
										"scope": 716,
										"src": "1520:21:5",
										"stateVariable": false,
										"storageLocation": "memory",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_ValidationData_$572_memory_ptr",
											"typeString": "struct ValidationData"
										},
										"typeName": {
											"id": 638,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 637,
												"name": "ValidationData",
												"nameLocations": [
													"1520:14:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 572,
												"src": "1520:14:5"
											},
											"referencedDeclaration": 572,
											"src": "1520:14:5",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_ValidationData_$572_storage_ptr",
												"typeString": "struct ValidationData"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "1519:23:5"
							},
							"scope": 802,
							"src": "1407:899:5",
							"stateMutability": "pure",
							"virtual": false,
							"visibility": "internal"
						},
						{
							"body": {
								"id": 752,
								"nodeType": "Block",
								"src": "2500:121:5",
								"statements": [
									{
										"expression": {
											"commonType": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"id": 750,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"lValueRequested": false,
											"leftExpression": {
												"commonType": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"id": 738,
												"isConstant": false,
												"isLValue": false,
												"isPure": false,
												"lValueRequested": false,
												"leftExpression": {
													"arguments": [
														{
															"expression": {
																"id": 727,
																"name": "data",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 720,
																"src": "2522:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_ValidationData_$572_memory_ptr",
																	"typeString": "struct ValidationData memory"
																}
															},
															"id": 728,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2527:10:5",
															"memberName": "aggregator",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 567,
															"src": "2522:15:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 726,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2514:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint160_$",
															"typeString": "type(uint160)"
														},
														"typeName": {
															"id": 725,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "2514:7:5",
															"typeDescriptions": {}
														}
													},
													"id": 729,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2514:24:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"nodeType": "BinaryOperation",
												"operator": "|",
												"rightExpression": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 736,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 732,
																			"name": "data",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 720,
																			"src": "2550:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_ValidationData_$572_memory_ptr",
																				"typeString": "struct ValidationData memory"
																			}
																		},
																		"id": 733,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2555:10:5",
																		"memberName": "validUntil",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 571,
																		"src": "2550:15:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint48",
																			"typeString": "uint48"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint48",
																			"typeString": "uint48"
																		}
																	],
																	"id": 731,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2542:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 730,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2542:7:5",
																		"typeDescriptions": {}
																	}
																},
																"id": 734,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2542:24:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<<",
															"rightExpression": {
																"hexValue": "313630",
																"id": 735,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2570:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_160_by_1",
																	"typeString": "int_const 160"
																},
																"value": "160"
															},
															"src": "2542:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 737,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2541:33:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"src": "2514:60:5",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"nodeType": "BinaryOperation",
											"operator": "|",
											"rightExpression": {
												"components": [
													{
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 748,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"expression": {
																		"id": 741,
																		"name": "data",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 720,
																		"src": "2586:4:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ValidationData_$572_memory_ptr",
																			"typeString": "struct ValidationData memory"
																		}
																	},
																	"id": 742,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2591:10:5",
																	"memberName": "validAfter",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 569,
																	"src": "2586:15:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint48",
																		"typeString": "uint48"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint48",
																		"typeString": "uint48"
																	}
																],
																"id": 740,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2578:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 739,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2578:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 743,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2578:24:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<<",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_rational_208_by_1",
																		"typeString": "int_const 208"
																	},
																	"id": 746,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"leftExpression": {
																		"hexValue": "313630",
																		"id": 744,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2607:3:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_160_by_1",
																			"typeString": "int_const 160"
																		},
																		"value": "160"
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "3438",
																		"id": 745,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2613:2:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_48_by_1",
																			"typeString": "int_const 48"
																		},
																		"value": "48"
																	},
																	"src": "2607:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_208_by_1",
																		"typeString": "int_const 208"
																	}
																}
															],
															"id": 747,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2606:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_208_by_1",
																"typeString": "int_const 208"
															}
														},
														"src": "2578:38:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													}
												],
												"id": 749,
												"isConstant": false,
												"isInlineArray": false,
												"isLValue": false,
												"isPure": false,
												"lValueRequested": false,
												"nodeType": "TupleExpression",
												"src": "2577:40:5",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"src": "2514:103:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"functionReturnParameters": 724,
										"id": 751,
										"nodeType": "Return",
										"src": "2507:110:5"
									}
								]
							},
							"documentation": {
								"id": 717,
								"nodeType": "StructuredDocumentation",
								"src": "2310:108:5",
								"text": " helper to pack the return value for validateUserOp\n @param data - the ValidationData to pack"
							},
							"id": 753,
							"implemented": true,
							"kind": "freeFunction",
							"modifiers": [],
							"name": "_packValidationData",
							"nameLocation": "2429:19:5",
							"nodeType": "FunctionDefinition",
							"parameters": {
								"id": 721,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 720,
										"mutability": "mutable",
										"name": "data",
										"nameLocation": "2471:4:5",
										"nodeType": "VariableDeclaration",
										"scope": 753,
										"src": "2449:26:5",
										"stateVariable": false,
										"storageLocation": "memory",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_ValidationData_$572_memory_ptr",
											"typeString": "struct ValidationData"
										},
										"typeName": {
											"id": 719,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 718,
												"name": "ValidationData",
												"nameLocations": [
													"2449:14:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 572,
												"src": "2449:14:5"
											},
											"referencedDeclaration": 572,
											"src": "2449:14:5",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_ValidationData_$572_storage_ptr",
												"typeString": "struct ValidationData"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "2448:28:5"
							},
							"returnParameters": {
								"id": 724,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 723,
										"mutability": "mutable",
										"name": "",
										"nameLocation": "-1:-1:-1",
										"nodeType": "VariableDeclaration",
										"scope": 753,
										"src": "2491:7:5",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"typeName": {
											"id": 722,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "2491:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "2490:9:5"
							},
							"scope": 802,
							"src": "2420:201:5",
							"stateMutability": "pure",
							"virtual": false,
							"visibility": "internal"
						},
						{
							"body": {
								"id": 790,
								"nodeType": "Block",
								"src": "3049:106:5",
								"statements": [
									{
										"expression": {
											"commonType": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"id": 788,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"lValueRequested": false,
											"leftExpression": {
												"commonType": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"id": 777,
												"isConstant": false,
												"isLValue": false,
												"isPure": false,
												"lValueRequested": false,
												"leftExpression": {
													"components": [
														{
															"condition": {
																"id": 765,
																"name": "sigFailed",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 756,
																"src": "3064:9:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"hexValue": "30",
																"id": 767,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3080:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"id": 768,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "3064:17:5",
															"trueExpression": {
																"hexValue": "31",
																"id": 766,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3076:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"id": 769,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "3063:19:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"nodeType": "BinaryOperation",
												"operator": "|",
												"rightExpression": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 775,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 772,
																		"name": "validUntil",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 758,
																		"src": "3094:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint48",
																			"typeString": "uint48"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint48",
																			"typeString": "uint48"
																		}
																	],
																	"id": 771,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3086:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 770,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3086:7:5",
																		"typeDescriptions": {}
																	}
																},
																"id": 773,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3086:19:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<<",
															"rightExpression": {
																"hexValue": "313630",
																"id": 774,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3109:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_160_by_1",
																	"typeString": "int_const 160"
																},
																"value": "160"
															},
															"src": "3086:26:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 776,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "3085:28:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"src": "3063:50:5",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"nodeType": "BinaryOperation",
											"operator": "|",
											"rightExpression": {
												"components": [
													{
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 786,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 780,
																	"name": "validAfter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 760,
																	"src": "3125:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint48",
																		"typeString": "uint48"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint48",
																		"typeString": "uint48"
																	}
																],
																"id": 779,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3117:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 778,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3117:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 781,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3117:19:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<<",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_rational_208_by_1",
																		"typeString": "int_const 208"
																	},
																	"id": 784,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"leftExpression": {
																		"hexValue": "313630",
																		"id": 782,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3141:3:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_160_by_1",
																			"typeString": "int_const 160"
																		},
																		"value": "160"
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "3438",
																		"id": 783,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3147:2:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_48_by_1",
																			"typeString": "int_const 48"
																		},
																		"value": "48"
																	},
																	"src": "3141:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_208_by_1",
																		"typeString": "int_const 208"
																	}
																}
															],
															"id": 785,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "3140:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_208_by_1",
																"typeString": "int_const 208"
															}
														},
														"src": "3117:33:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													}
												],
												"id": 787,
												"isConstant": false,
												"isInlineArray": false,
												"isLValue": false,
												"isPure": false,
												"lValueRequested": false,
												"nodeType": "TupleExpression",
												"src": "3116:35:5",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"src": "3063:88:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"functionReturnParameters": 764,
										"id": 789,
										"nodeType": "Return",
										"src": "3056:95:5"
									}
								]
							},
							"documentation": {
								"id": 754,
								"nodeType": "StructuredDocumentation",
								"src": "2625:316:5",
								"text": " helper to pack the return value for validateUserOp, when not using an aggregator\n @param sigFailed - true for signature failure, false for success\n @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\n @param validAfter first timestamp this UserOperation is valid"
							},
							"id": 791,
							"implemented": true,
							"kind": "freeFunction",
							"modifiers": [],
							"name": "_packValidationData",
							"nameLocation": "2952:19:5",
							"nodeType": "FunctionDefinition",
							"parameters": {
								"id": 761,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 756,
										"mutability": "mutable",
										"name": "sigFailed",
										"nameLocation": "2977:9:5",
										"nodeType": "VariableDeclaration",
										"scope": 791,
										"src": "2972:14:5",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										},
										"typeName": {
											"id": 755,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "2972:4:5",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										},
										"visibility": "internal"
									},
									{
										"constant": false,
										"id": 758,
										"mutability": "mutable",
										"name": "validUntil",
										"nameLocation": "2995:10:5",
										"nodeType": "VariableDeclaration",
										"scope": 791,
										"src": "2988:17:5",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint48",
											"typeString": "uint48"
										},
										"typeName": {
											"id": 757,
											"name": "uint48",
											"nodeType": "ElementaryTypeName",
											"src": "2988:6:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											}
										},
										"visibility": "internal"
									},
									{
										"constant": false,
										"id": 760,
										"mutability": "mutable",
										"name": "validAfter",
										"nameLocation": "3014:10:5",
										"nodeType": "VariableDeclaration",
										"scope": 791,
										"src": "3007:17:5",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint48",
											"typeString": "uint48"
										},
										"typeName": {
											"id": 759,
											"name": "uint48",
											"nodeType": "ElementaryTypeName",
											"src": "3007:6:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "2971:54:5"
							},
							"returnParameters": {
								"id": 764,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 763,
										"mutability": "mutable",
										"name": "",
										"nameLocation": "-1:-1:-1",
										"nodeType": "VariableDeclaration",
										"scope": 791,
										"src": "3040:7:5",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"typeName": {
											"id": 762,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "3040:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "3039:9:5"
							},
							"scope": 802,
							"src": "2943:212:5",
							"stateMutability": "pure",
							"virtual": false,
							"visibility": "internal"
						},
						{
							"body": {
								"id": 800,
								"nodeType": "Block",
								"src": "3412:172:5",
								"statements": [
									{
										"AST": {
											"nativeSrc": "3428:153:5",
											"nodeType": "YulBlock",
											"src": "3428:153:5",
											"statements": [
												{
													"nativeSrc": "3439:22:5",
													"nodeType": "YulVariableDeclaration",
													"src": "3439:22:5",
													"value": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "3456:4:5",
																"nodeType": "YulLiteral",
																"src": "3456:4:5",
																"type": "",
																"value": "0x40"
															}
														],
														"functionName": {
															"name": "mload",
															"nativeSrc": "3450:5:5",
															"nodeType": "YulIdentifier",
															"src": "3450:5:5"
														},
														"nativeSrc": "3450:11:5",
														"nodeType": "YulFunctionCall",
														"src": "3450:11:5"
													},
													"variables": [
														{
															"name": "mem",
															"nativeSrc": "3443:3:5",
															"nodeType": "YulTypedName",
															"src": "3443:3:5",
															"type": ""
														}
													]
												},
												{
													"nativeSrc": "3471:22:5",
													"nodeType": "YulVariableDeclaration",
													"src": "3471:22:5",
													"value": {
														"name": "data.length",
														"nativeSrc": "3482:11:5",
														"nodeType": "YulIdentifier",
														"src": "3482:11:5"
													},
													"variables": [
														{
															"name": "len",
															"nativeSrc": "3475:3:5",
															"nodeType": "YulTypedName",
															"src": "3475:3:5",
															"type": ""
														}
													]
												},
												{
													"expression": {
														"arguments": [
															{
																"name": "mem",
																"nativeSrc": "3516:3:5",
																"nodeType": "YulIdentifier",
																"src": "3516:3:5"
															},
															{
																"name": "data.offset",
																"nativeSrc": "3521:11:5",
																"nodeType": "YulIdentifier",
																"src": "3521:11:5"
															},
															{
																"name": "len",
																"nativeSrc": "3534:3:5",
																"nodeType": "YulIdentifier",
																"src": "3534:3:5"
															}
														],
														"functionName": {
															"name": "calldatacopy",
															"nativeSrc": "3503:12:5",
															"nodeType": "YulIdentifier",
															"src": "3503:12:5"
														},
														"nativeSrc": "3503:35:5",
														"nodeType": "YulFunctionCall",
														"src": "3503:35:5"
													},
													"nativeSrc": "3503:35:5",
													"nodeType": "YulExpressionStatement",
													"src": "3503:35:5"
												},
												{
													"nativeSrc": "3548:26:5",
													"nodeType": "YulAssignment",
													"src": "3548:26:5",
													"value": {
														"arguments": [
															{
																"name": "mem",
																"nativeSrc": "3565:3:5",
																"nodeType": "YulIdentifier",
																"src": "3565:3:5"
															},
															{
																"name": "len",
																"nativeSrc": "3570:3:5",
																"nodeType": "YulIdentifier",
																"src": "3570:3:5"
															}
														],
														"functionName": {
															"name": "keccak256",
															"nativeSrc": "3555:9:5",
															"nodeType": "YulIdentifier",
															"src": "3555:9:5"
														},
														"nativeSrc": "3555:19:5",
														"nodeType": "YulFunctionCall",
														"src": "3555:19:5"
													},
													"variableNames": [
														{
															"name": "ret",
															"nativeSrc": "3548:3:5",
															"nodeType": "YulIdentifier",
															"src": "3548:3:5"
														}
													]
												}
											]
										},
										"evmVersion": "shanghai",
										"externalReferences": [
											{
												"declaration": 794,
												"isOffset": false,
												"isSlot": false,
												"src": "3482:11:5",
												"suffix": "length",
												"valueSize": 1
											},
											{
												"declaration": 794,
												"isOffset": true,
												"isSlot": false,
												"src": "3521:11:5",
												"suffix": "offset",
												"valueSize": 1
											},
											{
												"declaration": 797,
												"isOffset": false,
												"isSlot": false,
												"src": "3548:3:5",
												"valueSize": 1
											}
										],
										"id": 799,
										"nodeType": "InlineAssembly",
										"src": "3419:162:5"
									}
								]
							},
							"documentation": {
								"id": 792,
								"nodeType": "StructuredDocumentation",
								"src": "3159:179:5",
								"text": " keccak function over calldata.\n @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it."
							},
							"id": 801,
							"implemented": true,
							"kind": "freeFunction",
							"modifiers": [],
							"name": "calldataKeccak",
							"nameLocation": "3349:14:5",
							"nodeType": "FunctionDefinition",
							"parameters": {
								"id": 795,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 794,
										"mutability": "mutable",
										"name": "data",
										"nameLocation": "3379:4:5",
										"nodeType": "VariableDeclaration",
										"scope": 801,
										"src": "3364:19:5",
										"stateVariable": false,
										"storageLocation": "calldata",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes_calldata_ptr",
											"typeString": "bytes"
										},
										"typeName": {
											"id": 793,
											"name": "bytes",
											"nodeType": "ElementaryTypeName",
											"src": "3364:5:5",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "3363:21:5"
							},
							"returnParameters": {
								"id": 798,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 797,
										"mutability": "mutable",
										"name": "ret",
										"nameLocation": "3407:3:5",
										"nodeType": "VariableDeclaration",
										"scope": 801,
										"src": "3399:11:5",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										},
										"typeName": {
											"id": 796,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "3399:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "3398:13:5"
							},
							"scope": 802,
							"src": "3340:244:5",
							"stateMutability": "pure",
							"virtual": false,
							"visibility": "internal"
						}
					],
					"src": "37:3547:5"
				},
				"id": 5
			}
		}
	}
}